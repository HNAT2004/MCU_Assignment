
Project_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000488c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004998  08004998  00014998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a4c  08004a4c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08004a4c  08004a4c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a4c  08004a4c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a4c  08004a4c  00014a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a50  08004a50  00014a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  2000007c  08004ad0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  08004ad0  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012300  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000282e  00000000  00000000  000323a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00034bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  00035cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ed5  00000000  00000000  00036ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141cc  00000000  00000000  0004fb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008deaf  00000000  00000000  00063d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1bf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004880  00000000  00000000  000f1c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004980 	.word	0x08004980

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08004980 	.word	0x08004980

0800014c <Timer_init>:
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
 8000150:	bf00      	nop
 8000152:	46bd      	mov	sp, r7
 8000154:	bc80      	pop	{r7}
 8000156:	4770      	bx	lr

08000158 <Watchdog_init>:
 8000158:	b480      	push	{r7}
 800015a:	af00      	add	r7, sp, #0
 800015c:	bf00      	nop
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr

08000164 <SCH_Init>:
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af00      	add	r7, sp, #0
 800016a:	2300      	movs	r3, #0
 800016c:	71fb      	strb	r3, [r7, #7]
 800016e:	e006      	b.n	800017e <SCH_Init+0x1a>
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	4618      	mov	r0, r3
 8000174:	f000 f922 	bl	80003bc <SCH_Delete_Task>
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	3301      	adds	r3, #1
 800017c:	71fb      	strb	r3, [r7, #7]
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	2b27      	cmp	r3, #39	; 0x27
 8000182:	d9f5      	bls.n	8000170 <SCH_Init+0xc>
 8000184:	4b05      	ldr	r3, [pc, #20]	; (800019c <SCH_Init+0x38>)
 8000186:	2200      	movs	r2, #0
 8000188:	701a      	strb	r2, [r3, #0]
 800018a:	f7ff ffdf 	bl	800014c <Timer_init>
 800018e:	f7ff ffe3 	bl	8000158 <Watchdog_init>
 8000192:	bf00      	nop
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	20000098 	.word	0x20000098

080001a0 <SCH_Update>:
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	2300      	movs	r3, #0
 80001a8:	71fb      	strb	r3, [r7, #7]
 80001aa:	e05c      	b.n	8000266 <SCH_Update+0xc6>
 80001ac:	79fa      	ldrb	r2, [r7, #7]
 80001ae:	4932      	ldr	r1, [pc, #200]	; (8000278 <SCH_Update+0xd8>)
 80001b0:	4613      	mov	r3, r2
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	4413      	add	r3, r2
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	440b      	add	r3, r1
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d04f      	beq.n	8000260 <SCH_Update+0xc0>
 80001c0:	79fa      	ldrb	r2, [r7, #7]
 80001c2:	492d      	ldr	r1, [pc, #180]	; (8000278 <SCH_Update+0xd8>)
 80001c4:	4613      	mov	r3, r2
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	4413      	add	r3, r2
 80001ca:	009b      	lsls	r3, r3, #2
 80001cc:	440b      	add	r3, r1
 80001ce:	3304      	adds	r3, #4
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d132      	bne.n	800023c <SCH_Update+0x9c>
 80001d6:	79fa      	ldrb	r2, [r7, #7]
 80001d8:	4927      	ldr	r1, [pc, #156]	; (8000278 <SCH_Update+0xd8>)
 80001da:	4613      	mov	r3, r2
 80001dc:	009b      	lsls	r3, r3, #2
 80001de:	4413      	add	r3, r2
 80001e0:	009b      	lsls	r3, r3, #2
 80001e2:	440b      	add	r3, r1
 80001e4:	330c      	adds	r3, #12
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	79fa      	ldrb	r2, [r7, #7]
 80001ea:	3301      	adds	r3, #1
 80001ec:	b2d8      	uxtb	r0, r3
 80001ee:	4922      	ldr	r1, [pc, #136]	; (8000278 <SCH_Update+0xd8>)
 80001f0:	4613      	mov	r3, r2
 80001f2:	009b      	lsls	r3, r3, #2
 80001f4:	4413      	add	r3, r2
 80001f6:	009b      	lsls	r3, r3, #2
 80001f8:	440b      	add	r3, r1
 80001fa:	330c      	adds	r3, #12
 80001fc:	4602      	mov	r2, r0
 80001fe:	701a      	strb	r2, [r3, #0]
 8000200:	79fa      	ldrb	r2, [r7, #7]
 8000202:	491d      	ldr	r1, [pc, #116]	; (8000278 <SCH_Update+0xd8>)
 8000204:	4613      	mov	r3, r2
 8000206:	009b      	lsls	r3, r3, #2
 8000208:	4413      	add	r3, r2
 800020a:	009b      	lsls	r3, r3, #2
 800020c:	440b      	add	r3, r1
 800020e:	3308      	adds	r3, #8
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d024      	beq.n	8000260 <SCH_Update+0xc0>
 8000216:	79f9      	ldrb	r1, [r7, #7]
 8000218:	79fa      	ldrb	r2, [r7, #7]
 800021a:	4817      	ldr	r0, [pc, #92]	; (8000278 <SCH_Update+0xd8>)
 800021c:	460b      	mov	r3, r1
 800021e:	009b      	lsls	r3, r3, #2
 8000220:	440b      	add	r3, r1
 8000222:	009b      	lsls	r3, r3, #2
 8000224:	4403      	add	r3, r0
 8000226:	3308      	adds	r3, #8
 8000228:	6819      	ldr	r1, [r3, #0]
 800022a:	4813      	ldr	r0, [pc, #76]	; (8000278 <SCH_Update+0xd8>)
 800022c:	4613      	mov	r3, r2
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	4413      	add	r3, r2
 8000232:	009b      	lsls	r3, r3, #2
 8000234:	4403      	add	r3, r0
 8000236:	3304      	adds	r3, #4
 8000238:	6019      	str	r1, [r3, #0]
 800023a:	e011      	b.n	8000260 <SCH_Update+0xc0>
 800023c:	79fa      	ldrb	r2, [r7, #7]
 800023e:	490e      	ldr	r1, [pc, #56]	; (8000278 <SCH_Update+0xd8>)
 8000240:	4613      	mov	r3, r2
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	4413      	add	r3, r2
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	440b      	add	r3, r1
 800024a:	3304      	adds	r3, #4
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	1e59      	subs	r1, r3, #1
 8000250:	4809      	ldr	r0, [pc, #36]	; (8000278 <SCH_Update+0xd8>)
 8000252:	4613      	mov	r3, r2
 8000254:	009b      	lsls	r3, r3, #2
 8000256:	4413      	add	r3, r2
 8000258:	009b      	lsls	r3, r3, #2
 800025a:	4403      	add	r3, r0
 800025c:	3304      	adds	r3, #4
 800025e:	6019      	str	r1, [r3, #0]
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	3301      	adds	r3, #1
 8000264:	71fb      	strb	r3, [r7, #7]
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	2b27      	cmp	r3, #39	; 0x27
 800026a:	d99f      	bls.n	80001ac <SCH_Update+0xc>
 800026c:	bf00      	nop
 800026e:	bf00      	nop
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	20000114 	.word	0x20000114

0800027c <SCH_Add_Task>:
 800027c:	b480      	push	{r7}
 800027e:	b087      	sub	sp, #28
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	607a      	str	r2, [r7, #4]
 8000288:	2300      	movs	r3, #0
 800028a:	75fb      	strb	r3, [r7, #23]
 800028c:	e002      	b.n	8000294 <SCH_Add_Task+0x18>
 800028e:	7dfb      	ldrb	r3, [r7, #23]
 8000290:	3301      	adds	r3, #1
 8000292:	75fb      	strb	r3, [r7, #23]
 8000294:	7dfa      	ldrb	r2, [r7, #23]
 8000296:	4920      	ldr	r1, [pc, #128]	; (8000318 <SCH_Add_Task+0x9c>)
 8000298:	4613      	mov	r3, r2
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	4413      	add	r3, r2
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	440b      	add	r3, r1
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d002      	beq.n	80002ae <SCH_Add_Task+0x32>
 80002a8:	7dfb      	ldrb	r3, [r7, #23]
 80002aa:	2b27      	cmp	r3, #39	; 0x27
 80002ac:	d9ef      	bls.n	800028e <SCH_Add_Task+0x12>
 80002ae:	7dfb      	ldrb	r3, [r7, #23]
 80002b0:	2b28      	cmp	r3, #40	; 0x28
 80002b2:	d104      	bne.n	80002be <SCH_Add_Task+0x42>
 80002b4:	4b19      	ldr	r3, [pc, #100]	; (800031c <SCH_Add_Task+0xa0>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	701a      	strb	r2, [r3, #0]
 80002ba:	2328      	movs	r3, #40	; 0x28
 80002bc:	e027      	b.n	800030e <SCH_Add_Task+0x92>
 80002be:	7dfa      	ldrb	r2, [r7, #23]
 80002c0:	4915      	ldr	r1, [pc, #84]	; (8000318 <SCH_Add_Task+0x9c>)
 80002c2:	4613      	mov	r3, r2
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	4413      	add	r3, r2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	440b      	add	r3, r1
 80002cc:	68fa      	ldr	r2, [r7, #12]
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	7dfa      	ldrb	r2, [r7, #23]
 80002d2:	4911      	ldr	r1, [pc, #68]	; (8000318 <SCH_Add_Task+0x9c>)
 80002d4:	4613      	mov	r3, r2
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	4413      	add	r3, r2
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	440b      	add	r3, r1
 80002de:	3304      	adds	r3, #4
 80002e0:	68ba      	ldr	r2, [r7, #8]
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	7dfa      	ldrb	r2, [r7, #23]
 80002e6:	490c      	ldr	r1, [pc, #48]	; (8000318 <SCH_Add_Task+0x9c>)
 80002e8:	4613      	mov	r3, r2
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	4413      	add	r3, r2
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	440b      	add	r3, r1
 80002f2:	3308      	adds	r3, #8
 80002f4:	687a      	ldr	r2, [r7, #4]
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	7dfa      	ldrb	r2, [r7, #23]
 80002fa:	4907      	ldr	r1, [pc, #28]	; (8000318 <SCH_Add_Task+0x9c>)
 80002fc:	4613      	mov	r3, r2
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	4413      	add	r3, r2
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	440b      	add	r3, r1
 8000306:	330c      	adds	r3, #12
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
 800030c:	7dfb      	ldrb	r3, [r7, #23]
 800030e:	4618      	mov	r0, r3
 8000310:	371c      	adds	r7, #28
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	20000114 	.word	0x20000114
 800031c:	20000098 	.word	0x20000098

08000320 <SCH_Dispatch_Tasks>:
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	2300      	movs	r3, #0
 8000328:	71fb      	strb	r3, [r7, #7]
 800032a:	e039      	b.n	80003a0 <SCH_Dispatch_Tasks+0x80>
 800032c:	79fa      	ldrb	r2, [r7, #7]
 800032e:	4922      	ldr	r1, [pc, #136]	; (80003b8 <SCH_Dispatch_Tasks+0x98>)
 8000330:	4613      	mov	r3, r2
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	4413      	add	r3, r2
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	440b      	add	r3, r1
 800033a:	330c      	adds	r3, #12
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d02b      	beq.n	800039a <SCH_Dispatch_Tasks+0x7a>
 8000342:	79fa      	ldrb	r2, [r7, #7]
 8000344:	491c      	ldr	r1, [pc, #112]	; (80003b8 <SCH_Dispatch_Tasks+0x98>)
 8000346:	4613      	mov	r3, r2
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	4413      	add	r3, r2
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	440b      	add	r3, r1
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4798      	blx	r3
 8000354:	79fa      	ldrb	r2, [r7, #7]
 8000356:	4918      	ldr	r1, [pc, #96]	; (80003b8 <SCH_Dispatch_Tasks+0x98>)
 8000358:	4613      	mov	r3, r2
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	4413      	add	r3, r2
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	440b      	add	r3, r1
 8000362:	330c      	adds	r3, #12
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	3b01      	subs	r3, #1
 8000368:	b2d8      	uxtb	r0, r3
 800036a:	4913      	ldr	r1, [pc, #76]	; (80003b8 <SCH_Dispatch_Tasks+0x98>)
 800036c:	4613      	mov	r3, r2
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	4413      	add	r3, r2
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	440b      	add	r3, r1
 8000376:	330c      	adds	r3, #12
 8000378:	4602      	mov	r2, r0
 800037a:	701a      	strb	r2, [r3, #0]
 800037c:	79fa      	ldrb	r2, [r7, #7]
 800037e:	490e      	ldr	r1, [pc, #56]	; (80003b8 <SCH_Dispatch_Tasks+0x98>)
 8000380:	4613      	mov	r3, r2
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	4413      	add	r3, r2
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	440b      	add	r3, r1
 800038a:	3308      	adds	r3, #8
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d103      	bne.n	800039a <SCH_Dispatch_Tasks+0x7a>
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	4618      	mov	r0, r3
 8000396:	f000 f811 	bl	80003bc <SCH_Delete_Task>
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	3301      	adds	r3, #1
 800039e:	71fb      	strb	r3, [r7, #7]
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	2b27      	cmp	r3, #39	; 0x27
 80003a4:	d9c2      	bls.n	800032c <SCH_Dispatch_Tasks+0xc>
 80003a6:	f000 f857 	bl	8000458 <SCH_Report_Status>
 80003aa:	f000 f84f 	bl	800044c <SCH_Go_To_Sleep>
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000114 	.word	0x20000114

080003bc <SCH_Delete_Task>:
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	491f      	ldr	r1, [pc, #124]	; (8000444 <SCH_Delete_Task+0x88>)
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	4613      	mov	r3, r2
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	4413      	add	r3, r2
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	440b      	add	r3, r1
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d105      	bne.n	80003e4 <SCH_Delete_Task+0x28>
 80003d8:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <SCH_Delete_Task+0x8c>)
 80003da:	2208      	movs	r2, #8
 80003dc:	701a      	strb	r2, [r3, #0]
 80003de:	2309      	movs	r3, #9
 80003e0:	73fb      	strb	r3, [r7, #15]
 80003e2:	e001      	b.n	80003e8 <SCH_Delete_Task+0x2c>
 80003e4:	230a      	movs	r3, #10
 80003e6:	73fb      	strb	r3, [r7, #15]
 80003e8:	4916      	ldr	r1, [pc, #88]	; (8000444 <SCH_Delete_Task+0x88>)
 80003ea:	687a      	ldr	r2, [r7, #4]
 80003ec:	4613      	mov	r3, r2
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	4413      	add	r3, r2
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	440b      	add	r3, r1
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	4912      	ldr	r1, [pc, #72]	; (8000444 <SCH_Delete_Task+0x88>)
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	4613      	mov	r3, r2
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	4413      	add	r3, r2
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	440b      	add	r3, r1
 8000408:	3304      	adds	r3, #4
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	490d      	ldr	r1, [pc, #52]	; (8000444 <SCH_Delete_Task+0x88>)
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	4613      	mov	r3, r2
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	4413      	add	r3, r2
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	440b      	add	r3, r1
 800041c:	3308      	adds	r3, #8
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	4908      	ldr	r1, [pc, #32]	; (8000444 <SCH_Delete_Task+0x88>)
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	4613      	mov	r3, r2
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	4413      	add	r3, r2
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	440b      	add	r3, r1
 8000430:	330c      	adds	r3, #12
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
 8000436:	7bfb      	ldrb	r3, [r7, #15]
 8000438:	4618      	mov	r0, r3
 800043a:	3714      	adds	r7, #20
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	20000114 	.word	0x20000114
 8000448:	20000098 	.word	0x20000098

0800044c <SCH_Go_To_Sleep>:
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <SCH_Report_Status>:
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr

08000464 <SetMode>:
int Time_red = 50;
int Time_green = 30;
int Time_yellow = 20;
int counter_x = 0;
int counter_y = 0;
void SetMode(void){
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
	if(ProcessButton3() == 1){
 800046a:	f000 fef5 	bl	8001258 <ProcessButton3>
 800046e:	4603      	mov	r3, r0
 8000470:	2b01      	cmp	r3, #1
 8000472:	f040 80af 	bne.w	80005d4 <SetMode+0x170>
		if(counterMode == 1){
 8000476:	4b59      	ldr	r3, [pc, #356]	; (80005dc <SetMode+0x178>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2b01      	cmp	r3, #1
 800047c:	d126      	bne.n	80004cc <SetMode+0x68>
			char stry[16];
			char strx[16];
			sprintf(stry, "  Manual Mode ");
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	4957      	ldr	r1, [pc, #348]	; (80005e0 <SetMode+0x17c>)
 8000484:	4618      	mov	r0, r3
 8000486:	f003 fe41 	bl	800410c <siprintf>
			sprintf(strx, "          ");
 800048a:	463b      	mov	r3, r7
 800048c:	4955      	ldr	r1, [pc, #340]	; (80005e4 <SetMode+0x180>)
 800048e:	4618      	mov	r0, r3
 8000490:	f003 fe3c 	bl	800410c <siprintf>
			lcd_goto_XY(1, 0);
 8000494:	2100      	movs	r1, #0
 8000496:	2001      	movs	r0, #1
 8000498:	f000 fd8d 	bl	8000fb6 <lcd_goto_XY>
			lcd_send_string(strx);
 800049c:	463b      	mov	r3, r7
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 fd74 	bl	8000f8c <lcd_send_string>
			lcd_goto_XY(2, 0);
 80004a4:	2100      	movs	r1, #0
 80004a6:	2002      	movs	r0, #2
 80004a8:	f000 fd85 	bl	8000fb6 <lcd_goto_XY>
			lcd_send_string(stry);
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 fd6b 	bl	8000f8c <lcd_send_string>
			statusx = MANUAL_REDX_GREENY;
 80004b6:	4b4c      	ldr	r3, [pc, #304]	; (80005e8 <SetMode+0x184>)
 80004b8:	2208      	movs	r2, #8
 80004ba:	601a      	str	r2, [r3, #0]
			statusy = MANUAL_REDX_GREENY;
 80004bc:	4b4b      	ldr	r3, [pc, #300]	; (80005ec <SetMode+0x188>)
 80004be:	2208      	movs	r2, #8
 80004c0:	601a      	str	r2, [r3, #0]
			counterMode = 1;
 80004c2:	4b46      	ldr	r3, [pc, #280]	; (80005dc <SetMode+0x178>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	601a      	str	r2, [r3, #0]
			InitLED();
 80004c8:	f001 f81c 	bl	8001504 <InitLED>
		}
		if(counterMode == 2){
 80004cc:	4b43      	ldr	r3, [pc, #268]	; (80005dc <SetMode+0x178>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d12b      	bne.n	800052c <SetMode+0xc8>
			Time_red = counterTimeSet * 10;
 80004d4:	4b46      	ldr	r3, [pc, #280]	; (80005f0 <SetMode+0x18c>)
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	4613      	mov	r3, r2
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	4413      	add	r3, r2
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	461a      	mov	r2, r3
 80004e2:	4b44      	ldr	r3, [pc, #272]	; (80005f4 <SetMode+0x190>)
 80004e4:	601a      	str	r2, [r3, #0]
			if(Time_red <= Time_green || Time_red <= Time_yellow){
 80004e6:	4b43      	ldr	r3, [pc, #268]	; (80005f4 <SetMode+0x190>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	4b43      	ldr	r3, [pc, #268]	; (80005f8 <SetMode+0x194>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	dd05      	ble.n	80004fe <SetMode+0x9a>
 80004f2:	4b40      	ldr	r3, [pc, #256]	; (80005f4 <SetMode+0x190>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	4b41      	ldr	r3, [pc, #260]	; (80005fc <SetMode+0x198>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	dc07      	bgt.n	800050e <SetMode+0xaa>
				Time_red = Time_green + Time_yellow;
 80004fe:	4b3e      	ldr	r3, [pc, #248]	; (80005f8 <SetMode+0x194>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	4b3e      	ldr	r3, [pc, #248]	; (80005fc <SetMode+0x198>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4413      	add	r3, r2
 8000508:	4a3a      	ldr	r2, [pc, #232]	; (80005f4 <SetMode+0x190>)
 800050a:	6013      	str	r3, [r2, #0]
 800050c:	e006      	b.n	800051c <SetMode+0xb8>
			}
			else{
				Time_green = Time_red - Time_yellow;
 800050e:	4b39      	ldr	r3, [pc, #228]	; (80005f4 <SetMode+0x190>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <SetMode+0x198>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	1ad3      	subs	r3, r2, r3
 8000518:	4a37      	ldr	r2, [pc, #220]	; (80005f8 <SetMode+0x194>)
 800051a:	6013      	str	r3, [r2, #0]
			}
			number_clock1 = Time_red;
 800051c:	4b35      	ldr	r3, [pc, #212]	; (80005f4 <SetMode+0x190>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a37      	ldr	r2, [pc, #220]	; (8000600 <SetMode+0x19c>)
 8000522:	6013      	str	r3, [r2, #0]
			number_clock2 = Time_green;
 8000524:	4b34      	ldr	r3, [pc, #208]	; (80005f8 <SetMode+0x194>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a36      	ldr	r2, [pc, #216]	; (8000604 <SetMode+0x1a0>)
 800052a:	6013      	str	r3, [r2, #0]
		}
		if(counterMode == 3){
 800052c:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <SetMode+0x178>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b03      	cmp	r3, #3
 8000532:	d125      	bne.n	8000580 <SetMode+0x11c>
			Time_green = counterTimeSet * 10;
 8000534:	4b2e      	ldr	r3, [pc, #184]	; (80005f0 <SetMode+0x18c>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4613      	mov	r3, r2
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	4413      	add	r3, r2
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	461a      	mov	r2, r3
 8000542:	4b2d      	ldr	r3, [pc, #180]	; (80005f8 <SetMode+0x194>)
 8000544:	601a      	str	r2, [r3, #0]
			if(Time_red <= Time_green){
 8000546:	4b2b      	ldr	r3, [pc, #172]	; (80005f4 <SetMode+0x190>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	4b2b      	ldr	r3, [pc, #172]	; (80005f8 <SetMode+0x194>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	429a      	cmp	r2, r3
 8000550:	dc07      	bgt.n	8000562 <SetMode+0xfe>
				Time_red =  Time_yellow + Time_green;
 8000552:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <SetMode+0x198>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <SetMode+0x194>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4413      	add	r3, r2
 800055c:	4a25      	ldr	r2, [pc, #148]	; (80005f4 <SetMode+0x190>)
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	e006      	b.n	8000570 <SetMode+0x10c>
			}
			else{
				Time_yellow = Time_red - Time_green;
 8000562:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <SetMode+0x190>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <SetMode+0x194>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	1ad3      	subs	r3, r2, r3
 800056c:	4a23      	ldr	r2, [pc, #140]	; (80005fc <SetMode+0x198>)
 800056e:	6013      	str	r3, [r2, #0]
			}
			number_clock1 = Time_red;
 8000570:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <SetMode+0x190>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a22      	ldr	r2, [pc, #136]	; (8000600 <SetMode+0x19c>)
 8000576:	6013      	str	r3, [r2, #0]
			number_clock2 = Time_green;
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <SetMode+0x194>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a21      	ldr	r2, [pc, #132]	; (8000604 <SetMode+0x1a0>)
 800057e:	6013      	str	r3, [r2, #0]
		}
		if(counterMode == 4){
 8000580:	4b16      	ldr	r3, [pc, #88]	; (80005dc <SetMode+0x178>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b04      	cmp	r3, #4
 8000586:	d125      	bne.n	80005d4 <SetMode+0x170>
			Time_yellow = counterTimeSet * 10;
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <SetMode+0x18c>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4613      	mov	r3, r2
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	4413      	add	r3, r2
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	461a      	mov	r2, r3
 8000596:	4b19      	ldr	r3, [pc, #100]	; (80005fc <SetMode+0x198>)
 8000598:	601a      	str	r2, [r3, #0]
			if(Time_red <= Time_yellow){
 800059a:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <SetMode+0x190>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <SetMode+0x198>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	dc07      	bgt.n	80005b6 <SetMode+0x152>
				Time_red =  Time_yellow + Time_green;
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <SetMode+0x198>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <SetMode+0x194>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <SetMode+0x190>)
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	e006      	b.n	80005c4 <SetMode+0x160>
			}
			else{
				Time_green = Time_red - Time_yellow;
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <SetMode+0x190>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <SetMode+0x198>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <SetMode+0x194>)
 80005c2:	6013      	str	r3, [r2, #0]
			}
			number_clock1 =  Time_red;
 80005c4:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <SetMode+0x190>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <SetMode+0x19c>)
 80005ca:	6013      	str	r3, [r2, #0]
			number_clock2 = Time_green;
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <SetMode+0x194>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <SetMode+0x1a0>)
 80005d2:	6013      	str	r3, [r2, #0]
		}
	}
}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000d4 	.word	0x200000d4
 80005e0:	08004998 	.word	0x08004998
 80005e4:	080049a8 	.word	0x080049a8
 80005e8:	200000c0 	.word	0x200000c0
 80005ec:	200000c4 	.word	0x200000c4
 80005f0:	200000d8 	.word	0x200000d8
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000004 	.word	0x20000004
 80005fc:	20000008 	.word	0x20000008
 8000600:	200000c8 	.word	0x200000c8
 8000604:	200000cc 	.word	0x200000cc

08000608 <ChangeModeX>:
void ChangeModeX(void){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	if(counterMode == 1){
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <ChangeModeX+0x58>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d102      	bne.n	800061a <ChangeModeX+0x12>
		mode4_flag = 0;
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <ChangeModeX+0x5c>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
	}
	if(counterMode == 2){
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <ChangeModeX+0x58>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b02      	cmp	r3, #2
 8000620:	d104      	bne.n	800062c <ChangeModeX+0x24>
		statusx = MAN_RED;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <ChangeModeX+0x60>)
 8000624:	2205      	movs	r2, #5
 8000626:	601a      	str	r2, [r3, #0]
		InitLED();
 8000628:	f000 ff6c 	bl	8001504 <InitLED>
	}
	if(counterMode == 3){
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <ChangeModeX+0x58>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b03      	cmp	r3, #3
 8000632:	d107      	bne.n	8000644 <ChangeModeX+0x3c>
		mode2_flag = 0;
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <ChangeModeX+0x64>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
		statusx = MAN_GREEN;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <ChangeModeX+0x60>)
 800063c:	2206      	movs	r2, #6
 800063e:	601a      	str	r2, [r3, #0]
		InitLED();
 8000640:	f000 ff60 	bl	8001504 <InitLED>
	}
	if(counterMode == 4){
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <ChangeModeX+0x58>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b04      	cmp	r3, #4
 800064a:	d107      	bne.n	800065c <ChangeModeX+0x54>
		mode3_flag = 0;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <ChangeModeX+0x68>)
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
		statusx = MAN_YELLOW;
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <ChangeModeX+0x60>)
 8000654:	2207      	movs	r2, #7
 8000656:	601a      	str	r2, [r3, #0]
		InitLED();
 8000658:	f000 ff54 	bl	8001504 <InitLED>
	}
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000d4 	.word	0x200000d4
 8000664:	200000a8 	.word	0x200000a8
 8000668:	200000c0 	.word	0x200000c0
 800066c:	200000a0 	.word	0x200000a0
 8000670:	200000a4 	.word	0x200000a4

08000674 <ChangeModeY>:
void ChangeModeY(void){
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	if(counterMode == 1){
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <ChangeModeY+0x58>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d102      	bne.n	8000686 <ChangeModeY+0x12>
		mode4_flag = 0;
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <ChangeModeY+0x5c>)
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
	}
	if(counterMode == 2){
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <ChangeModeY+0x58>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b02      	cmp	r3, #2
 800068c:	d104      	bne.n	8000698 <ChangeModeY+0x24>
		statusy = MAN_RED;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <ChangeModeY+0x60>)
 8000690:	2205      	movs	r2, #5
 8000692:	601a      	str	r2, [r3, #0]
		InitLED();
 8000694:	f000 ff36 	bl	8001504 <InitLED>
	}
	if(counterMode == 3){
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <ChangeModeY+0x58>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b03      	cmp	r3, #3
 800069e:	d107      	bne.n	80006b0 <ChangeModeY+0x3c>
		mode2_flag = 0;
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <ChangeModeY+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
		statusy = MAN_GREEN;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <ChangeModeY+0x60>)
 80006a8:	2206      	movs	r2, #6
 80006aa:	601a      	str	r2, [r3, #0]
		InitLED();
 80006ac:	f000 ff2a 	bl	8001504 <InitLED>
	}
	if(counterMode == 4){
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <ChangeModeY+0x58>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b04      	cmp	r3, #4
 80006b6:	d107      	bne.n	80006c8 <ChangeModeY+0x54>
		mode3_flag = 0;
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <ChangeModeY+0x68>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
		statusy = MAN_YELLOW;
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <ChangeModeY+0x60>)
 80006c0:	2207      	movs	r2, #7
 80006c2:	601a      	str	r2, [r3, #0]
		InitLED();
 80006c4:	f000 ff1e 	bl	8001504 <InitLED>
	}
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200000d4 	.word	0x200000d4
 80006d0:	200000a8 	.word	0x200000a8
 80006d4:	200000c4 	.word	0x200000c4
 80006d8:	200000a0 	.word	0x200000a0
 80006dc:	200000a4 	.word	0x200000a4

080006e0 <fsm_clock>:
void fsm_clock(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
	if(statusx == AUTO_RED || statusx == AUTO_GREEN || statusx == AUTO_YELLOW){
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <fsm_clock+0x8c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	d007      	beq.n	80006fe <fsm_clock+0x1e>
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <fsm_clock+0x8c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d003      	beq.n	80006fe <fsm_clock+0x1e>
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <fsm_clock+0x8c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	d131      	bne.n	8000762 <fsm_clock+0x82>
		if(number_clock1 > 0){
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <fsm_clock+0x90>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	dd04      	ble.n	8000710 <fsm_clock+0x30>
			number_clock1--;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <fsm_clock+0x90>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3b01      	subs	r3, #1
 800070c:	4a18      	ldr	r2, [pc, #96]	; (8000770 <fsm_clock+0x90>)
 800070e:	6013      	str	r3, [r2, #0]
		}
		if(number_clock2 > 0){
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <fsm_clock+0x94>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dd04      	ble.n	8000722 <fsm_clock+0x42>
			number_clock2--;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <fsm_clock+0x94>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3b01      	subs	r3, #1
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <fsm_clock+0x94>)
 8000720:	6013      	str	r3, [r2, #0]
		}
        char stry[16];
        char strx[16];
        sprintf(strx, "Road X: %d    ", number_clock1);
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <fsm_clock+0x90>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	463b      	mov	r3, r7
 8000728:	4913      	ldr	r1, [pc, #76]	; (8000778 <fsm_clock+0x98>)
 800072a:	4618      	mov	r0, r3
 800072c:	f003 fcee 	bl	800410c <siprintf>
        sprintf(stry, "Road Y: %d    ", number_clock2);
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <fsm_clock+0x94>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	4910      	ldr	r1, [pc, #64]	; (800077c <fsm_clock+0x9c>)
 800073a:	4618      	mov	r0, r3
 800073c:	f003 fce6 	bl	800410c <siprintf>
        lcd_goto_XY(1, 0);
 8000740:	2100      	movs	r1, #0
 8000742:	2001      	movs	r0, #1
 8000744:	f000 fc37 	bl	8000fb6 <lcd_goto_XY>
        lcd_send_string(strx);
 8000748:	463b      	mov	r3, r7
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fc1e 	bl	8000f8c <lcd_send_string>
        lcd_goto_XY(2, 0);
 8000750:	2100      	movs	r1, #0
 8000752:	2002      	movs	r0, #2
 8000754:	f000 fc2f 	bl	8000fb6 <lcd_goto_XY>
        lcd_send_string(stry);
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fc15 	bl	8000f8c <lcd_send_string>
	}
}
 8000762:	bf00      	nop
 8000764:	3720      	adds	r7, #32
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000c0 	.word	0x200000c0
 8000770:	200000c8 	.word	0x200000c8
 8000774:	200000cc 	.word	0x200000cc
 8000778:	080049b4 	.word	0x080049b4
 800077c:	080049c4 	.word	0x080049c4

08000780 <fsm_mode>:
void fsm_mode(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
	if(statusx == MAN_RED || statusx == MAN_GREEN || statusx == MAN_YELLOW){
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <fsm_mode+0x68>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b05      	cmp	r3, #5
 800078c:	d007      	beq.n	800079e <fsm_mode+0x1e>
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <fsm_mode+0x68>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b06      	cmp	r3, #6
 8000794:	d003      	beq.n	800079e <fsm_mode+0x1e>
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <fsm_mode+0x68>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b07      	cmp	r3, #7
 800079c:	d11f      	bne.n	80007de <fsm_mode+0x5e>
        char stry[16];
        char strx[16];
        sprintf(stry, "Time:   %d ", counterTimeSet);
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <fsm_mode+0x6c>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	4912      	ldr	r1, [pc, #72]	; (80007f0 <fsm_mode+0x70>)
 80007a8:	4618      	mov	r0, r3
 80007aa:	f003 fcaf 	bl	800410c <siprintf>
        sprintf(strx, "Mode:   %d ", counterMode);
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <fsm_mode+0x74>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	463b      	mov	r3, r7
 80007b4:	4910      	ldr	r1, [pc, #64]	; (80007f8 <fsm_mode+0x78>)
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 fca8 	bl	800410c <siprintf>
        lcd_goto_XY(1, 0);
 80007bc:	2100      	movs	r1, #0
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 fbf9 	bl	8000fb6 <lcd_goto_XY>
        lcd_send_string(strx);
 80007c4:	463b      	mov	r3, r7
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fbe0 	bl	8000f8c <lcd_send_string>
        lcd_goto_XY(2, 0);
 80007cc:	2100      	movs	r1, #0
 80007ce:	2002      	movs	r0, #2
 80007d0:	f000 fbf1 	bl	8000fb6 <lcd_goto_XY>
        lcd_send_string(stry);
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fbd7 	bl	8000f8c <lcd_send_string>
	}
}
 80007de:	bf00      	nop
 80007e0:	3720      	adds	r7, #32
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000c0 	.word	0x200000c0
 80007ec:	200000d8 	.word	0x200000d8
 80007f0:	080049d4 	.word	0x080049d4
 80007f4:	200000d4 	.word	0x200000d4
 80007f8:	080049e0 	.word	0x080049e0

080007fc <Walking_LED>:
void Walking_LED(void){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	if((statusy == AUTO_YELLOW  && number_clock2 <= 3) || statusx == MANUAL_REDX_YELLOWY){
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <Walking_LED+0x7c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b04      	cmp	r3, #4
 8000806:	d103      	bne.n	8000810 <Walking_LED+0x14>
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <Walking_LED+0x80>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b03      	cmp	r3, #3
 800080e:	dd03      	ble.n	8000818 <Walking_LED+0x1c>
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <Walking_LED+0x84>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b09      	cmp	r3, #9
 8000816:	d102      	bne.n	800081e <Walking_LED+0x22>
		WalkingX_Blinking();
 8000818:	f000 ffb2 	bl	8001780 <WalkingX_Blinking>
 800081c:	e00d      	b.n	800083a <Walking_LED+0x3e>
	}
	else if(statusx == AUTO_RED || statusx == MANUAL_REDX_GREENY || statusx == MANUAL_REDX_YELLOWY){
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <Walking_LED+0x84>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b02      	cmp	r3, #2
 8000824:	d007      	beq.n	8000836 <Walking_LED+0x3a>
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <Walking_LED+0x84>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b08      	cmp	r3, #8
 800082c:	d003      	beq.n	8000836 <Walking_LED+0x3a>
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <Walking_LED+0x84>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b09      	cmp	r3, #9
 8000834:	d101      	bne.n	800083a <Walking_LED+0x3e>
		WalkingX();
 8000836:	f000 ff37 	bl	80016a8 <WalkingX>
	}
	if((statusx == AUTO_YELLOW && number_clock1 <= 3) || statusx == MANUAL_YELLOWX_REDY){
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <Walking_LED+0x84>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b04      	cmp	r3, #4
 8000840:	d103      	bne.n	800084a <Walking_LED+0x4e>
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <Walking_LED+0x88>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b03      	cmp	r3, #3
 8000848:	dd03      	ble.n	8000852 <Walking_LED+0x56>
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <Walking_LED+0x84>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b0b      	cmp	r3, #11
 8000850:	d102      	bne.n	8000858 <Walking_LED+0x5c>
		WalkingY_Blinnking();
 8000852:	f000 ffb3 	bl	80017bc <WalkingY_Blinnking>
	}
	else if(statusy == AUTO_RED || statusx == MANUAL_GREENX_REDY || statusx == MANUAL_YELLOWX_REDY){
		WalkingY();
	}
}
 8000856:	e00d      	b.n	8000874 <Walking_LED+0x78>
	else if(statusy == AUTO_RED || statusx == MANUAL_GREENX_REDY || statusx == MANUAL_YELLOWX_REDY){
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <Walking_LED+0x7c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d007      	beq.n	8000870 <Walking_LED+0x74>
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <Walking_LED+0x84>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b0a      	cmp	r3, #10
 8000866:	d003      	beq.n	8000870 <Walking_LED+0x74>
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <Walking_LED+0x84>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b0b      	cmp	r3, #11
 800086e:	d101      	bne.n	8000874 <Walking_LED+0x78>
		WalkingY();
 8000870:	f000 ff3e 	bl	80016f0 <WalkingY>
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200000c4 	.word	0x200000c4
 800087c:	200000cc 	.word	0x200000cc
 8000880:	200000c0 	.word	0x200000c0
 8000884:	200000c8 	.word	0x200000c8

08000888 <fsm_automatic_runx>:
void fsm_automatic_runx(){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	switch(statusx){
 800088c:	4b44      	ldr	r3, [pc, #272]	; (80009a0 <fsm_automatic_runx+0x118>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3b01      	subs	r3, #1
 8000892:	2b03      	cmp	r3, #3
 8000894:	d872      	bhi.n	800097c <fsm_automatic_runx+0xf4>
 8000896:	a201      	add	r2, pc, #4	; (adr r2, 800089c <fsm_automatic_runx+0x14>)
 8000898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800089c:	080008ad 	.word	0x080008ad
 80008a0:	080008d1 	.word	0x080008d1
 80008a4:	08000909 	.word	0x08000909
 80008a8:	08000945 	.word	0x08000945
	case INIT:
		statusx = AUTO_RED;
 80008ac:	4b3c      	ldr	r3, [pc, #240]	; (80009a0 <fsm_automatic_runx+0x118>)
 80008ae:	2202      	movs	r2, #2
 80008b0:	601a      	str	r2, [r3, #0]
		counter_x = Time_red;
 80008b2:	4b3c      	ldr	r3, [pc, #240]	; (80009a4 <fsm_automatic_runx+0x11c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a3c      	ldr	r2, [pc, #240]	; (80009a8 <fsm_automatic_runx+0x120>)
 80008b8:	6013      	str	r3, [r2, #0]
		number_clock1 = counter_x/10;
 80008ba:	4b3b      	ldr	r3, [pc, #236]	; (80009a8 <fsm_automatic_runx+0x120>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a3b      	ldr	r2, [pc, #236]	; (80009ac <fsm_automatic_runx+0x124>)
 80008c0:	fb82 1203 	smull	r1, r2, r2, r3
 80008c4:	1092      	asrs	r2, r2, #2
 80008c6:	17db      	asrs	r3, r3, #31
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	4a39      	ldr	r2, [pc, #228]	; (80009b0 <fsm_automatic_runx+0x128>)
 80008cc:	6013      	str	r3, [r2, #0]
		break;
 80008ce:	e05c      	b.n	800098a <fsm_automatic_runx+0x102>
	case AUTO_RED:
		DisplayREDX();
 80008d0:	f000 fdb2 	bl	8001438 <DisplayREDX>
		SetMode();
 80008d4:	f7ff fdc6 	bl	8000464 <SetMode>
		ChangeModeX();
 80008d8:	f7ff fe96 	bl	8000608 <ChangeModeX>
		if(counter_x <= 0){
 80008dc:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <fsm_automatic_runx+0x120>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	dc4d      	bgt.n	8000980 <fsm_automatic_runx+0xf8>
			statusx = AUTO_GREEN;
 80008e4:	4b2e      	ldr	r3, [pc, #184]	; (80009a0 <fsm_automatic_runx+0x118>)
 80008e6:	2203      	movs	r2, #3
 80008e8:	601a      	str	r2, [r3, #0]
			counter_x = Time_green;
 80008ea:	4b32      	ldr	r3, [pc, #200]	; (80009b4 <fsm_automatic_runx+0x12c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a2e      	ldr	r2, [pc, #184]	; (80009a8 <fsm_automatic_runx+0x120>)
 80008f0:	6013      	str	r3, [r2, #0]
			number_clock1 = counter_x/10;
 80008f2:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <fsm_automatic_runx+0x120>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a2d      	ldr	r2, [pc, #180]	; (80009ac <fsm_automatic_runx+0x124>)
 80008f8:	fb82 1203 	smull	r1, r2, r2, r3
 80008fc:	1092      	asrs	r2, r2, #2
 80008fe:	17db      	asrs	r3, r3, #31
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	4a2b      	ldr	r2, [pc, #172]	; (80009b0 <fsm_automatic_runx+0x128>)
 8000904:	6013      	str	r3, [r2, #0]
		}
		break;
 8000906:	e03b      	b.n	8000980 <fsm_automatic_runx+0xf8>
	case AUTO_GREEN:
		DisplayGREENX();
 8000908:	f000 fdb6 	bl	8001478 <DisplayGREENX>
		SetMode();
 800090c:	f7ff fdaa 	bl	8000464 <SetMode>
		StopX();
 8000910:	f000 fedc 	bl	80016cc <StopX>
		ChangeModeX();
 8000914:	f7ff fe78 	bl	8000608 <ChangeModeX>
		if(counter_x <= 0){
 8000918:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <fsm_automatic_runx+0x120>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	dc31      	bgt.n	8000984 <fsm_automatic_runx+0xfc>
			statusx = AUTO_YELLOW;
 8000920:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <fsm_automatic_runx+0x118>)
 8000922:	2204      	movs	r2, #4
 8000924:	601a      	str	r2, [r3, #0]
			counter_x = Time_yellow;
 8000926:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <fsm_automatic_runx+0x130>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <fsm_automatic_runx+0x120>)
 800092c:	6013      	str	r3, [r2, #0]
			number_clock1 = counter_x/10;
 800092e:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <fsm_automatic_runx+0x120>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a1e      	ldr	r2, [pc, #120]	; (80009ac <fsm_automatic_runx+0x124>)
 8000934:	fb82 1203 	smull	r1, r2, r2, r3
 8000938:	1092      	asrs	r2, r2, #2
 800093a:	17db      	asrs	r3, r3, #31
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <fsm_automatic_runx+0x128>)
 8000940:	6013      	str	r3, [r2, #0]
		}
		break;
 8000942:	e01f      	b.n	8000984 <fsm_automatic_runx+0xfc>
	case AUTO_YELLOW:
		DisplayYELLOWX();
 8000944:	f000 fd88 	bl	8001458 <DisplayYELLOWX>
		SetMode();
 8000948:	f7ff fd8c 	bl	8000464 <SetMode>
		ChangeModeX();
 800094c:	f7ff fe5c 	bl	8000608 <ChangeModeX>
		if(counter_x <= 0){
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <fsm_automatic_runx+0x120>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	dc17      	bgt.n	8000988 <fsm_automatic_runx+0x100>
			statusx = AUTO_RED;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <fsm_automatic_runx+0x118>)
 800095a:	2202      	movs	r2, #2
 800095c:	601a      	str	r2, [r3, #0]
			counter_x = Time_red;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <fsm_automatic_runx+0x11c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a11      	ldr	r2, [pc, #68]	; (80009a8 <fsm_automatic_runx+0x120>)
 8000964:	6013      	str	r3, [r2, #0]
			number_clock1 = counter_x/10;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <fsm_automatic_runx+0x120>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <fsm_automatic_runx+0x124>)
 800096c:	fb82 1203 	smull	r1, r2, r2, r3
 8000970:	1092      	asrs	r2, r2, #2
 8000972:	17db      	asrs	r3, r3, #31
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <fsm_automatic_runx+0x128>)
 8000978:	6013      	str	r3, [r2, #0]
		}
		break;
 800097a:	e005      	b.n	8000988 <fsm_automatic_runx+0x100>
	default:
		break;
 800097c:	bf00      	nop
 800097e:	e004      	b.n	800098a <fsm_automatic_runx+0x102>
		break;
 8000980:	bf00      	nop
 8000982:	e002      	b.n	800098a <fsm_automatic_runx+0x102>
		break;
 8000984:	bf00      	nop
 8000986:	e000      	b.n	800098a <fsm_automatic_runx+0x102>
		break;
 8000988:	bf00      	nop
	}
	if(counter_x > 0){
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <fsm_automatic_runx+0x120>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	dd04      	ble.n	800099c <fsm_automatic_runx+0x114>
		counter_x--;
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <fsm_automatic_runx+0x120>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3b01      	subs	r3, #1
 8000998:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <fsm_automatic_runx+0x120>)
 800099a:	6013      	str	r3, [r2, #0]
	}
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200000c0 	.word	0x200000c0
 80009a4:	20000000 	.word	0x20000000
 80009a8:	200000ac 	.word	0x200000ac
 80009ac:	66666667 	.word	0x66666667
 80009b0:	200000c8 	.word	0x200000c8
 80009b4:	20000004 	.word	0x20000004
 80009b8:	20000008 	.word	0x20000008

080009bc <fsm_automatic_runy>:
void fsm_automatic_runy(){
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	switch(statusy){
 80009c0:	4b45      	ldr	r3, [pc, #276]	; (8000ad8 <fsm_automatic_runy+0x11c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	3b01      	subs	r3, #1
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d874      	bhi.n	8000ab4 <fsm_automatic_runy+0xf8>
 80009ca:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <fsm_automatic_runy+0x14>)
 80009cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d0:	080009e1 	.word	0x080009e1
 80009d4:	08000a09 	.word	0x08000a09
 80009d8:	08000a41 	.word	0x08000a41
 80009dc:	08000a7d 	.word	0x08000a7d
	case INIT:
		DisplayGREENY();
 80009e0:	f000 fd7e 	bl	80014e0 <DisplayGREENY>
		statusy = AUTO_GREEN;
 80009e4:	4b3c      	ldr	r3, [pc, #240]	; (8000ad8 <fsm_automatic_runy+0x11c>)
 80009e6:	2203      	movs	r2, #3
 80009e8:	601a      	str	r2, [r3, #0]
		counter_y = Time_green;
 80009ea:	4b3c      	ldr	r3, [pc, #240]	; (8000adc <fsm_automatic_runy+0x120>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a3c      	ldr	r2, [pc, #240]	; (8000ae0 <fsm_automatic_runy+0x124>)
 80009f0:	6013      	str	r3, [r2, #0]
		number_clock2 = counter_y/10;
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <fsm_automatic_runy+0x124>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a3b      	ldr	r2, [pc, #236]	; (8000ae4 <fsm_automatic_runy+0x128>)
 80009f8:	fb82 1203 	smull	r1, r2, r2, r3
 80009fc:	1092      	asrs	r2, r2, #2
 80009fe:	17db      	asrs	r3, r3, #31
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	4a39      	ldr	r2, [pc, #228]	; (8000ae8 <fsm_automatic_runy+0x12c>)
 8000a04:	6013      	str	r3, [r2, #0]
		break;
 8000a06:	e05c      	b.n	8000ac2 <fsm_automatic_runy+0x106>
	case AUTO_RED:
		DisplayREDY();
 8000a08:	f000 fd46 	bl	8001498 <DisplayREDY>
		SetMode();
 8000a0c:	f7ff fd2a 	bl	8000464 <SetMode>
		ChangeModeY();
 8000a10:	f7ff fe30 	bl	8000674 <ChangeModeY>
		if(counter_y <= 0){
 8000a14:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <fsm_automatic_runy+0x124>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	dc4d      	bgt.n	8000ab8 <fsm_automatic_runy+0xfc>
			statusy = AUTO_GREEN;
 8000a1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <fsm_automatic_runy+0x11c>)
 8000a1e:	2203      	movs	r2, #3
 8000a20:	601a      	str	r2, [r3, #0]
			counter_y = Time_green;
 8000a22:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <fsm_automatic_runy+0x120>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a2e      	ldr	r2, [pc, #184]	; (8000ae0 <fsm_automatic_runy+0x124>)
 8000a28:	6013      	str	r3, [r2, #0]
			number_clock2 = counter_y/10;
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <fsm_automatic_runy+0x124>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a2d      	ldr	r2, [pc, #180]	; (8000ae4 <fsm_automatic_runy+0x128>)
 8000a30:	fb82 1203 	smull	r1, r2, r2, r3
 8000a34:	1092      	asrs	r2, r2, #2
 8000a36:	17db      	asrs	r3, r3, #31
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	4a2b      	ldr	r2, [pc, #172]	; (8000ae8 <fsm_automatic_runy+0x12c>)
 8000a3c:	6013      	str	r3, [r2, #0]
		}
		break;
 8000a3e:	e03b      	b.n	8000ab8 <fsm_automatic_runy+0xfc>
	case AUTO_GREEN:
		DisplayGREENY();
 8000a40:	f000 fd4e 	bl	80014e0 <DisplayGREENY>
		StopY();
 8000a44:	f000 fe66 	bl	8001714 <StopY>
		SetMode();
 8000a48:	f7ff fd0c 	bl	8000464 <SetMode>
		ChangeModeY();
 8000a4c:	f7ff fe12 	bl	8000674 <ChangeModeY>
		if(counter_y <= 0){
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <fsm_automatic_runy+0x124>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	dc31      	bgt.n	8000abc <fsm_automatic_runy+0x100>
			statusy = AUTO_YELLOW;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <fsm_automatic_runy+0x11c>)
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	601a      	str	r2, [r3, #0]
			counter_y = Time_yellow;
 8000a5e:	4b23      	ldr	r3, [pc, #140]	; (8000aec <fsm_automatic_runy+0x130>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a1f      	ldr	r2, [pc, #124]	; (8000ae0 <fsm_automatic_runy+0x124>)
 8000a64:	6013      	str	r3, [r2, #0]
			number_clock2 = counter_y/10;
 8000a66:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <fsm_automatic_runy+0x124>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ae4 <fsm_automatic_runy+0x128>)
 8000a6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a70:	1092      	asrs	r2, r2, #2
 8000a72:	17db      	asrs	r3, r3, #31
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <fsm_automatic_runy+0x12c>)
 8000a78:	6013      	str	r3, [r2, #0]
		}
		break;
 8000a7a:	e01f      	b.n	8000abc <fsm_automatic_runy+0x100>
	case AUTO_YELLOW:
		DisplayYELLOWY();
 8000a7c:	f000 fd1e 	bl	80014bc <DisplayYELLOWY>
		SetMode();
 8000a80:	f7ff fcf0 	bl	8000464 <SetMode>
		ChangeModeY();
 8000a84:	f7ff fdf6 	bl	8000674 <ChangeModeY>
		if(counter_y <= 0){
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <fsm_automatic_runy+0x124>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	dc17      	bgt.n	8000ac0 <fsm_automatic_runy+0x104>
			statusy = AUTO_RED;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <fsm_automatic_runy+0x11c>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	601a      	str	r2, [r3, #0]
			counter_y = Time_red;
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <fsm_automatic_runy+0x134>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <fsm_automatic_runy+0x124>)
 8000a9c:	6013      	str	r3, [r2, #0]
			number_clock2 = counter_y/10;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <fsm_automatic_runy+0x124>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <fsm_automatic_runy+0x128>)
 8000aa4:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa8:	1092      	asrs	r2, r2, #2
 8000aaa:	17db      	asrs	r3, r3, #31
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <fsm_automatic_runy+0x12c>)
 8000ab0:	6013      	str	r3, [r2, #0]
		}
		break;
 8000ab2:	e005      	b.n	8000ac0 <fsm_automatic_runy+0x104>
	default:
		break;
 8000ab4:	bf00      	nop
 8000ab6:	e004      	b.n	8000ac2 <fsm_automatic_runy+0x106>
		break;
 8000ab8:	bf00      	nop
 8000aba:	e002      	b.n	8000ac2 <fsm_automatic_runy+0x106>
		break;
 8000abc:	bf00      	nop
 8000abe:	e000      	b.n	8000ac2 <fsm_automatic_runy+0x106>
		break;
 8000ac0:	bf00      	nop
	}
	if(counter_y > 0){
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <fsm_automatic_runy+0x124>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	dd04      	ble.n	8000ad4 <fsm_automatic_runy+0x118>
		counter_y--;
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <fsm_automatic_runy+0x124>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	4a03      	ldr	r2, [pc, #12]	; (8000ae0 <fsm_automatic_runy+0x124>)
 8000ad2:	6013      	str	r3, [r2, #0]
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000c4 	.word	0x200000c4
 8000adc:	20000004 	.word	0x20000004
 8000ae0:	200000b0 	.word	0x200000b0
 8000ae4:	66666667 	.word	0x66666667
 8000ae8:	200000cc 	.word	0x200000cc
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000000 	.word	0x20000000

08000af4 <fsm_manual_run1>:
#include "led_display.h"
#include "input_processing.h"
#include "fsm_automatic.h"
int counter_led_x = 0;
int counter_led_y = 0;
void fsm_manual_run1(void){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	switch(statusx){
 8000af8:	4b31      	ldr	r3, [pc, #196]	; (8000bc0 <fsm_manual_run1+0xcc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b07      	cmp	r3, #7
 8000afe:	d030      	beq.n	8000b62 <fsm_manual_run1+0x6e>
 8000b00:	2b07      	cmp	r3, #7
 8000b02:	dc51      	bgt.n	8000ba8 <fsm_manual_run1+0xb4>
 8000b04:	2b05      	cmp	r3, #5
 8000b06:	d002      	beq.n	8000b0e <fsm_manual_run1+0x1a>
 8000b08:	2b06      	cmp	r3, #6
 8000b0a:	d015      	beq.n	8000b38 <fsm_manual_run1+0x44>
			InitLED();
		}
		SetMode();
		break;
	default:
		break;
 8000b0c:	e04c      	b.n	8000ba8 <fsm_manual_run1+0xb4>
		if(counter_led_x <= 0){
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <fsm_manual_run1+0xd0>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	dc04      	bgt.n	8000b20 <fsm_manual_run1+0x2c>
			DisplayMAN_REDX();
 8000b16:	f000 fd13 	bl	8001540 <DisplayMAN_REDX>
			counter_led_x = 5;
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <fsm_manual_run1+0xd0>)
 8000b1c:	2205      	movs	r2, #5
 8000b1e:	601a      	str	r2, [r3, #0]
		if(counterMode == 3){
 8000b20:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <fsm_manual_run1+0xd4>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	d104      	bne.n	8000b32 <fsm_manual_run1+0x3e>
			statusx = MAN_GREEN;
 8000b28:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <fsm_manual_run1+0xcc>)
 8000b2a:	2206      	movs	r2, #6
 8000b2c:	601a      	str	r2, [r3, #0]
			InitLED();
 8000b2e:	f000 fce9 	bl	8001504 <InitLED>
		SetMode();
 8000b32:	f7ff fc97 	bl	8000464 <SetMode>
		break;
 8000b36:	e038      	b.n	8000baa <fsm_manual_run1+0xb6>
		if(counter_led_x <= 0){
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <fsm_manual_run1+0xd0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	dc04      	bgt.n	8000b4a <fsm_manual_run1+0x56>
			DisplayMAN_GREENX();
 8000b40:	f000 fd3a 	bl	80015b8 <DisplayMAN_GREENX>
			counter_led_x = 5;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <fsm_manual_run1+0xd0>)
 8000b46:	2205      	movs	r2, #5
 8000b48:	601a      	str	r2, [r3, #0]
		if(counterMode == 4){
 8000b4a:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <fsm_manual_run1+0xd4>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	d104      	bne.n	8000b5c <fsm_manual_run1+0x68>
			statusx = MAN_YELLOW;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <fsm_manual_run1+0xcc>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	601a      	str	r2, [r3, #0]
			InitLED();
 8000b58:	f000 fcd4 	bl	8001504 <InitLED>
		SetMode();
 8000b5c:	f7ff fc82 	bl	8000464 <SetMode>
		break;
 8000b60:	e023      	b.n	8000baa <fsm_manual_run1+0xb6>
		if(counter_led_x <= 0){
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <fsm_manual_run1+0xd0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	dc04      	bgt.n	8000b74 <fsm_manual_run1+0x80>
			DisplayMAN_YELLOWX();
 8000b6a:	f000 fd61 	bl	8001630 <DisplayMAN_YELLOWX>
			counter_led_x = 5;
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <fsm_manual_run1+0xd0>)
 8000b70:	2205      	movs	r2, #5
 8000b72:	601a      	str	r2, [r3, #0]
		if(counterMode == 1){
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <fsm_manual_run1+0xd4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d112      	bne.n	8000ba2 <fsm_manual_run1+0xae>
			statusx = AUTO_RED;
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <fsm_manual_run1+0xcc>)
 8000b7e:	2202      	movs	r2, #2
 8000b80:	601a      	str	r2, [r3, #0]
			number_clock1 = Time_red/10;
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <fsm_manual_run1+0xd8>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <fsm_manual_run1+0xdc>)
 8000b88:	fb82 1203 	smull	r1, r2, r2, r3
 8000b8c:	1092      	asrs	r2, r2, #2
 8000b8e:	17db      	asrs	r3, r3, #31
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <fsm_manual_run1+0xe0>)
 8000b94:	6013      	str	r3, [r2, #0]
			counter_x = Time_red;
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <fsm_manual_run1+0xd8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <fsm_manual_run1+0xe4>)
 8000b9c:	6013      	str	r3, [r2, #0]
			InitLED();
 8000b9e:	f000 fcb1 	bl	8001504 <InitLED>
		SetMode();
 8000ba2:	f7ff fc5f 	bl	8000464 <SetMode>
		break;
 8000ba6:	e000      	b.n	8000baa <fsm_manual_run1+0xb6>
		break;
 8000ba8:	bf00      	nop
	}
	if(counter_led_x > 0){
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <fsm_manual_run1+0xd0>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	dd04      	ble.n	8000bbc <fsm_manual_run1+0xc8>
		counter_led_x--;
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <fsm_manual_run1+0xd0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	4a02      	ldr	r2, [pc, #8]	; (8000bc4 <fsm_manual_run1+0xd0>)
 8000bba:	6013      	str	r3, [r2, #0]
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200000c0 	.word	0x200000c0
 8000bc4:	200000b4 	.word	0x200000b4
 8000bc8:	200000d4 	.word	0x200000d4
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	66666667 	.word	0x66666667
 8000bd4:	200000c8 	.word	0x200000c8
 8000bd8:	200000ac 	.word	0x200000ac

08000bdc <fsm_manual_run2>:
void fsm_manual_run2(void){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	switch(statusy){
 8000be0:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <fsm_manual_run2+0xcc>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b07      	cmp	r3, #7
 8000be6:	d02c      	beq.n	8000c42 <fsm_manual_run2+0x66>
 8000be8:	2b07      	cmp	r3, #7
 8000bea:	dc4b      	bgt.n	8000c84 <fsm_manual_run2+0xa8>
 8000bec:	2b05      	cmp	r3, #5
 8000bee:	d002      	beq.n	8000bf6 <fsm_manual_run2+0x1a>
 8000bf0:	2b06      	cmp	r3, #6
 8000bf2:	d013      	beq.n	8000c1c <fsm_manual_run2+0x40>
			counter_y = Time_green;
			InitLED();
		}
		break;
	default:
		break;
 8000bf4:	e046      	b.n	8000c84 <fsm_manual_run2+0xa8>
		if(counter_led_y <= 0){
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <fsm_manual_run2+0xd0>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	dc04      	bgt.n	8000c08 <fsm_manual_run2+0x2c>
			DisplayMAN_REDY();
 8000bfe:	f000 fcbd 	bl	800157c <DisplayMAN_REDY>
			counter_led_y = 5;
 8000c02:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <fsm_manual_run2+0xd0>)
 8000c04:	2205      	movs	r2, #5
 8000c06:	601a      	str	r2, [r3, #0]
		if(counterMode == 3){
 8000c08:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <fsm_manual_run2+0xd4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d13b      	bne.n	8000c88 <fsm_manual_run2+0xac>
			statusy = MAN_GREEN;
 8000c10:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <fsm_manual_run2+0xcc>)
 8000c12:	2206      	movs	r2, #6
 8000c14:	601a      	str	r2, [r3, #0]
			InitLED();
 8000c16:	f000 fc75 	bl	8001504 <InitLED>
		break;
 8000c1a:	e035      	b.n	8000c88 <fsm_manual_run2+0xac>
		if(counter_led_y <= 0){
 8000c1c:	4b23      	ldr	r3, [pc, #140]	; (8000cac <fsm_manual_run2+0xd0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	dc04      	bgt.n	8000c2e <fsm_manual_run2+0x52>
			DisplayMAN_GREENY();
 8000c24:	f000 fce6 	bl	80015f4 <DisplayMAN_GREENY>
			counter_led_y = 5;
 8000c28:	4b20      	ldr	r3, [pc, #128]	; (8000cac <fsm_manual_run2+0xd0>)
 8000c2a:	2205      	movs	r2, #5
 8000c2c:	601a      	str	r2, [r3, #0]
		if(counterMode == 4){
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <fsm_manual_run2+0xd4>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	d12a      	bne.n	8000c8c <fsm_manual_run2+0xb0>
			statusy = MAN_YELLOW;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <fsm_manual_run2+0xcc>)
 8000c38:	2207      	movs	r2, #7
 8000c3a:	601a      	str	r2, [r3, #0]
			InitLED();
 8000c3c:	f000 fc62 	bl	8001504 <InitLED>
		break;
 8000c40:	e024      	b.n	8000c8c <fsm_manual_run2+0xb0>
		if(counter_led_y <= 0){
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <fsm_manual_run2+0xd0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	dc04      	bgt.n	8000c54 <fsm_manual_run2+0x78>
			DisplayMAN_YELLOWY();
 8000c4a:	f000 fd0f 	bl	800166c <DisplayMAN_YELLOWY>
			counter_led_y = 5;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <fsm_manual_run2+0xd0>)
 8000c50:	2205      	movs	r2, #5
 8000c52:	601a      	str	r2, [r3, #0]
		if(counterMode == 1){
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <fsm_manual_run2+0xd4>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d119      	bne.n	8000c90 <fsm_manual_run2+0xb4>
			statusy = AUTO_GREEN;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <fsm_manual_run2+0xcc>)
 8000c5e:	2203      	movs	r2, #3
 8000c60:	601a      	str	r2, [r3, #0]
			number_clock2 = Time_green/10;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <fsm_manual_run2+0xd8>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <fsm_manual_run2+0xdc>)
 8000c68:	fb82 1203 	smull	r1, r2, r2, r3
 8000c6c:	1092      	asrs	r2, r2, #2
 8000c6e:	17db      	asrs	r3, r3, #31
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <fsm_manual_run2+0xe0>)
 8000c74:	6013      	str	r3, [r2, #0]
			counter_y = Time_green;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <fsm_manual_run2+0xd8>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a11      	ldr	r2, [pc, #68]	; (8000cc0 <fsm_manual_run2+0xe4>)
 8000c7c:	6013      	str	r3, [r2, #0]
			InitLED();
 8000c7e:	f000 fc41 	bl	8001504 <InitLED>
		break;
 8000c82:	e005      	b.n	8000c90 <fsm_manual_run2+0xb4>
		break;
 8000c84:	bf00      	nop
 8000c86:	e004      	b.n	8000c92 <fsm_manual_run2+0xb6>
		break;
 8000c88:	bf00      	nop
 8000c8a:	e002      	b.n	8000c92 <fsm_manual_run2+0xb6>
		break;
 8000c8c:	bf00      	nop
 8000c8e:	e000      	b.n	8000c92 <fsm_manual_run2+0xb6>
		break;
 8000c90:	bf00      	nop
	}
	if(counter_led_y > 0){
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <fsm_manual_run2+0xd0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	dd04      	ble.n	8000ca4 <fsm_manual_run2+0xc8>
		counter_led_y--;
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <fsm_manual_run2+0xd0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	4a02      	ldr	r2, [pc, #8]	; (8000cac <fsm_manual_run2+0xd0>)
 8000ca2:	6013      	str	r3, [r2, #0]
	}
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200000c4 	.word	0x200000c4
 8000cac:	200000b8 	.word	0x200000b8
 8000cb0:	200000d4 	.word	0x200000d4
 8000cb4:	20000004 	.word	0x20000004
 8000cb8:	66666667 	.word	0x66666667
 8000cbc:	200000cc 	.word	0x200000cc
 8000cc0:	200000b0 	.word	0x200000b0

08000cc4 <change_fsm>:
#include "global.h"
#include "led_display.h"
#include "input_processing.h"
#include "fsm_automatic.h"
int counter_manual = 0;
void change_fsm(void){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	if(ProcessButton2()){
 8000cc8:	f000 faa8 	bl	800121c <ProcessButton2>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d026      	beq.n	8000d20 <change_fsm+0x5c>
		counterMode = 1;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <change_fsm+0x60>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]
		statusx = AUTO_RED;
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <change_fsm+0x64>)
 8000cda:	2202      	movs	r2, #2
 8000cdc:	601a      	str	r2, [r3, #0]
		statusy = AUTO_GREEN;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <change_fsm+0x68>)
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	601a      	str	r2, [r3, #0]
		InitLED();
 8000ce4:	f000 fc0e 	bl	8001504 <InitLED>
		number_clock1 = Time_red/10;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <change_fsm+0x6c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <change_fsm+0x70>)
 8000cee:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf2:	1092      	asrs	r2, r2, #2
 8000cf4:	17db      	asrs	r3, r3, #31
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <change_fsm+0x74>)
 8000cfa:	6013      	str	r3, [r2, #0]
		counter_x = Time_red;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <change_fsm+0x6c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <change_fsm+0x78>)
 8000d02:	6013      	str	r3, [r2, #0]
		number_clock2 = Time_green/10;
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <change_fsm+0x7c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <change_fsm+0x70>)
 8000d0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0e:	1092      	asrs	r2, r2, #2
 8000d10:	17db      	asrs	r3, r3, #31
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <change_fsm+0x80>)
 8000d16:	6013      	str	r3, [r2, #0]
		counter_y = Time_green;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <change_fsm+0x7c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <change_fsm+0x84>)
 8000d1e:	6013      	str	r3, [r2, #0]
	}
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200000d4 	.word	0x200000d4
 8000d28:	200000c0 	.word	0x200000c0
 8000d2c:	200000c4 	.word	0x200000c4
 8000d30:	20000000 	.word	0x20000000
 8000d34:	66666667 	.word	0x66666667
 8000d38:	200000c8 	.word	0x200000c8
 8000d3c:	200000ac 	.word	0x200000ac
 8000d40:	20000004 	.word	0x20000004
 8000d44:	200000cc 	.word	0x200000cc
 8000d48:	200000b0 	.word	0x200000b0

08000d4c <fsm_manual_run>:
void fsm_manual_run(void){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	switch(statusx){
 8000d50:	4b44      	ldr	r3, [pc, #272]	; (8000e64 <fsm_manual_run+0x118>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3b08      	subs	r3, #8
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d870      	bhi.n	8000e3c <fsm_manual_run+0xf0>
 8000d5a:	a201      	add	r2, pc, #4	; (adr r2, 8000d60 <fsm_manual_run+0x14>)
 8000d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d60:	08000d71 	.word	0x08000d71
 8000d64:	08000d9f 	.word	0x08000d9f
 8000d68:	08000dd7 	.word	0x08000dd7
 8000d6c:	08000e05 	.word	0x08000e05
	case MANUAL_REDX_GREENY:
		//TODO
		DisplayREDX();
 8000d70:	f000 fb62 	bl	8001438 <DisplayREDX>
		DisplayGREENY();
 8000d74:	f000 fbb4 	bl	80014e0 <DisplayGREENY>
		change_fsm();
 8000d78:	f7ff ffa4 	bl	8000cc4 <change_fsm>
		WalkingX();
 8000d7c:	f000 fc94 	bl	80016a8 <WalkingX>
		StopY();
 8000d80:	f000 fcc8 	bl	8001714 <StopY>
		if (counterMode == 2){
 8000d84:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <fsm_manual_run+0x11c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d159      	bne.n	8000e40 <fsm_manual_run+0xf4>
			statusx = MANUAL_REDX_YELLOWY;
 8000d8c:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <fsm_manual_run+0x118>)
 8000d8e:	2209      	movs	r2, #9
 8000d90:	601a      	str	r2, [r3, #0]
			InitLED();
 8000d92:	f000 fbb7 	bl	8001504 <InitLED>
			counter_manual = 50;
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <fsm_manual_run+0x120>)
 8000d98:	2232      	movs	r2, #50	; 0x32
 8000d9a:	601a      	str	r2, [r3, #0]
		}
		break;
 8000d9c:	e050      	b.n	8000e40 <fsm_manual_run+0xf4>
	case MANUAL_REDX_YELLOWY:
		DisplayREDX();
 8000d9e:	f000 fb4b 	bl	8001438 <DisplayREDX>
		DisplayYELLOWY();
 8000da2:	f000 fb8b 	bl	80014bc <DisplayYELLOWY>
		change_fsm();
 8000da6:	f7ff ff8d 	bl	8000cc4 <change_fsm>
		if (counterMode == 3){
 8000daa:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <fsm_manual_run+0x11c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d104      	bne.n	8000dbc <fsm_manual_run+0x70>
			statusx = MANUAL_GREENX_REDY;
 8000db2:	4b2c      	ldr	r3, [pc, #176]	; (8000e64 <fsm_manual_run+0x118>)
 8000db4:	220a      	movs	r2, #10
 8000db6:	601a      	str	r2, [r3, #0]
			InitLED();
 8000db8:	f000 fba4 	bl	8001504 <InitLED>
		}
		if(counter_manual == 0){
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <fsm_manual_run+0x120>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d13f      	bne.n	8000e44 <fsm_manual_run+0xf8>
			statusx = MANUAL_GREENX_REDY;
 8000dc4:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <fsm_manual_run+0x118>)
 8000dc6:	220a      	movs	r2, #10
 8000dc8:	601a      	str	r2, [r3, #0]
			counterMode = 3;
 8000dca:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <fsm_manual_run+0x11c>)
 8000dcc:	2203      	movs	r2, #3
 8000dce:	601a      	str	r2, [r3, #0]
			InitLED();
 8000dd0:	f000 fb98 	bl	8001504 <InitLED>
		}
		break;
 8000dd4:	e036      	b.n	8000e44 <fsm_manual_run+0xf8>
	case MANUAL_GREENX_REDY:
		DisplayGREENX();
 8000dd6:	f000 fb4f 	bl	8001478 <DisplayGREENX>
		DisplayREDY();
 8000dda:	f000 fb5d 	bl	8001498 <DisplayREDY>
		change_fsm();
 8000dde:	f7ff ff71 	bl	8000cc4 <change_fsm>
		StopX();
 8000de2:	f000 fc73 	bl	80016cc <StopX>
		WalkingY();
 8000de6:	f000 fc83 	bl	80016f0 <WalkingY>
		if (counterMode == 4){
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <fsm_manual_run+0x11c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	d12a      	bne.n	8000e48 <fsm_manual_run+0xfc>
			statusx = MANUAL_YELLOWX_REDY;
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <fsm_manual_run+0x118>)
 8000df4:	220b      	movs	r2, #11
 8000df6:	601a      	str	r2, [r3, #0]
			InitLED();
 8000df8:	f000 fb84 	bl	8001504 <InitLED>
			counter_manual = 50;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <fsm_manual_run+0x120>)
 8000dfe:	2232      	movs	r2, #50	; 0x32
 8000e00:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e02:	e021      	b.n	8000e48 <fsm_manual_run+0xfc>
	case MANUAL_YELLOWX_REDY:
		DisplayYELLOWX();
 8000e04:	f000 fb28 	bl	8001458 <DisplayYELLOWX>
		DisplayREDY();
 8000e08:	f000 fb46 	bl	8001498 <DisplayREDY>
		change_fsm();
 8000e0c:	f7ff ff5a 	bl	8000cc4 <change_fsm>
		if (counterMode == 1){
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <fsm_manual_run+0x11c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d104      	bne.n	8000e22 <fsm_manual_run+0xd6>
			statusx = MANUAL_REDX_GREENY;
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <fsm_manual_run+0x118>)
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	601a      	str	r2, [r3, #0]
			InitLED();
 8000e1e:	f000 fb71 	bl	8001504 <InitLED>
		}
		if(counter_manual == 0){
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <fsm_manual_run+0x120>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d110      	bne.n	8000e4c <fsm_manual_run+0x100>
			statusx = MANUAL_REDX_GREENY;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <fsm_manual_run+0x118>)
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	601a      	str	r2, [r3, #0]
			counterMode = 1;
 8000e30:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <fsm_manual_run+0x11c>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	601a      	str	r2, [r3, #0]
			InitLED();
 8000e36:	f000 fb65 	bl	8001504 <InitLED>
		}
		break;
 8000e3a:	e007      	b.n	8000e4c <fsm_manual_run+0x100>
	default:
		break;
 8000e3c:	bf00      	nop
 8000e3e:	e006      	b.n	8000e4e <fsm_manual_run+0x102>
		break;
 8000e40:	bf00      	nop
 8000e42:	e004      	b.n	8000e4e <fsm_manual_run+0x102>
		break;
 8000e44:	bf00      	nop
 8000e46:	e002      	b.n	8000e4e <fsm_manual_run+0x102>
		break;
 8000e48:	bf00      	nop
 8000e4a:	e000      	b.n	8000e4e <fsm_manual_run+0x102>
		break;
 8000e4c:	bf00      	nop
	}
	if(counter_manual > 0){
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <fsm_manual_run+0x120>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	dd04      	ble.n	8000e60 <fsm_manual_run+0x114>
		counter_manual--;
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <fsm_manual_run+0x120>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	4a03      	ldr	r2, [pc, #12]	; (8000e6c <fsm_manual_run+0x120>)
 8000e5e:	6013      	str	r3, [r2, #0]
	}
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200000c0 	.word	0x200000c0
 8000e68:	200000d4 	.word	0x200000d4
 8000e6c:	200000bc 	.word	0x200000bc

08000e70 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af02      	add	r7, sp, #8
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f023 030f 	bic.w	r3, r3, #15
 8000e80:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	011b      	lsls	r3, r3, #4
 8000e86:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	f043 030c 	orr.w	r3, r3, #12
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	f043 0308 	orr.w	r3, r3, #8
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	f043 030c 	orr.w	r3, r3, #12
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000ea6:	7bbb      	ldrb	r3, [r7, #14]
 8000ea8:	f043 0308 	orr.w	r3, r3, #8
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000eb0:	f107 0208 	add.w	r2, r7, #8
 8000eb4:	2364      	movs	r3, #100	; 0x64
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2304      	movs	r3, #4
 8000eba:	2142      	movs	r1, #66	; 0x42
 8000ebc:	4803      	ldr	r0, [pc, #12]	; (8000ecc <lcd_send_cmd+0x5c>)
 8000ebe:	f001 fcbd 	bl	800283c <HAL_I2C_Master_Transmit>
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000434 	.word	0x20000434

08000ed0 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f023 030f 	bic.w	r3, r3, #15
 8000ee0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	011b      	lsls	r3, r3, #4
 8000ee6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	f043 030d 	orr.w	r3, r3, #13
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	f043 0309 	orr.w	r3, r3, #9
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000efc:	7bbb      	ldrb	r3, [r7, #14]
 8000efe:	f043 030d 	orr.w	r3, r3, #13
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f06:	7bbb      	ldrb	r3, [r7, #14]
 8000f08:	f043 0309 	orr.w	r3, r3, #9
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f10:	f107 0208 	add.w	r2, r7, #8
 8000f14:	2364      	movs	r3, #100	; 0x64
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2304      	movs	r3, #4
 8000f1a:	2142      	movs	r1, #66	; 0x42
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <lcd_send_data+0x5c>)
 8000f1e:	f001 fc8d 	bl	800283c <HAL_I2C_Master_Transmit>
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000434 	.word	0x20000434

08000f30 <lcd_init>:

void lcd_init (void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000f34:	2033      	movs	r0, #51	; 0x33
 8000f36:	f7ff ff9b 	bl	8000e70 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000f3a:	2032      	movs	r0, #50	; 0x32
 8000f3c:	f7ff ff98 	bl	8000e70 <lcd_send_cmd>
	HAL_Delay(50);
 8000f40:	2032      	movs	r0, #50	; 0x32
 8000f42:	f001 f851 	bl	8001fe8 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000f46:	2028      	movs	r0, #40	; 0x28
 8000f48:	f7ff ff92 	bl	8000e70 <lcd_send_cmd>
	HAL_Delay(50);
 8000f4c:	2032      	movs	r0, #50	; 0x32
 8000f4e:	f001 f84b 	bl	8001fe8 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000f52:	2001      	movs	r0, #1
 8000f54:	f7ff ff8c 	bl	8000e70 <lcd_send_cmd>
	HAL_Delay(50);
 8000f58:	2032      	movs	r0, #50	; 0x32
 8000f5a:	f001 f845 	bl	8001fe8 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000f5e:	2006      	movs	r0, #6
 8000f60:	f7ff ff86 	bl	8000e70 <lcd_send_cmd>
	HAL_Delay(50);
 8000f64:	2032      	movs	r0, #50	; 0x32
 8000f66:	f001 f83f 	bl	8001fe8 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000f6a:	200c      	movs	r0, #12
 8000f6c:	f7ff ff80 	bl	8000e70 <lcd_send_cmd>
	HAL_Delay(50);
 8000f70:	2032      	movs	r0, #50	; 0x32
 8000f72:	f001 f839 	bl	8001fe8 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000f76:	2002      	movs	r0, #2
 8000f78:	f7ff ff7a 	bl	8000e70 <lcd_send_cmd>
	HAL_Delay(50);
 8000f7c:	2032      	movs	r0, #50	; 0x32
 8000f7e:	f001 f833 	bl	8001fe8 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000f82:	2080      	movs	r0, #128	; 0x80
 8000f84:	f7ff ff74 	bl	8000e70 <lcd_send_cmd>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000f94:	e006      	b.n	8000fa4 <lcd_send_string+0x18>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff96 	bl	8000ed0 <lcd_send_data>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f4      	bne.n	8000f96 <lcd_send_string+0xa>
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d108      	bne.n	8000fd8 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	4413      	add	r3, r2
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	337f      	adds	r3, #127	; 0x7f
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	e008      	b.n	8000fea <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	3340      	adds	r3, #64	; 0x40
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff3f 	bl	8000e70 <lcd_send_cmd>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <fsm_for_input_processing1>:
enum ButtonState buttonState1 = BUTTON_RELEASED;
enum ButtonState buttonState2 = BUTTON_RELEASED;
enum ButtonState buttonState3 = BUTTON_RELEASED;
int counterMode = 0;
int counterTimeSet = 0;
void fsm_for_input_processing1(void){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	switch(buttonState1){
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <fsm_for_input_processing1+0xa0>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d038      	beq.n	800107a <fsm_for_input_processing1+0x7e>
 8001008:	2b02      	cmp	r3, #2
 800100a:	dc45      	bgt.n	8001098 <fsm_for_input_processing1+0x9c>
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <fsm_for_input_processing1+0x1a>
 8001010:	2b01      	cmp	r3, #1
 8001012:	d01e      	beq.n	8001052 <fsm_for_input_processing1+0x56>
			if(!is_button_pressed(0)){
				buttonState1 = BUTTON_RELEASED;
			}
		break;
		}
	}
 8001014:	e040      	b.n	8001098 <fsm_for_input_processing1+0x9c>
			if(is_button_pressed(0)){
 8001016:	2000      	movs	r0, #0
 8001018:	f000 f9da 	bl	80013d0 <is_button_pressed>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d035      	beq.n	800108e <fsm_for_input_processing1+0x92>
				buttonState1 = BUTTON_PRESSED ;
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <fsm_for_input_processing1+0xa0>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
				if(ProcessButton1() == 1){
 8001028:	f000 f8da 	bl	80011e0 <ProcessButton1>
 800102c:	4603      	mov	r3, r0
 800102e:	2b01      	cmp	r3, #1
 8001030:	d12d      	bne.n	800108e <fsm_for_input_processing1+0x92>
					  counterMode++;
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <fsm_for_input_processing1+0xa4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <fsm_for_input_processing1+0xa4>)
 800103a:	6013      	str	r3, [r2, #0]
					  counterTimeSet = 0;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <fsm_for_input_processing1+0xa8>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
					  if(counterMode > 4){
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <fsm_for_input_processing1+0xa4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b04      	cmp	r3, #4
 8001048:	dd21      	ble.n	800108e <fsm_for_input_processing1+0x92>
						  counterMode = 1;
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <fsm_for_input_processing1+0xa4>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]
		break;
 8001050:	e01d      	b.n	800108e <fsm_for_input_processing1+0x92>
			if(!is_button_pressed(0)){
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f9bc 	bl	80013d0 <is_button_pressed>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d103      	bne.n	8001066 <fsm_for_input_processing1+0x6a>
				buttonState1 = BUTTON_RELEASED;
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <fsm_for_input_processing1+0xa0>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
		break;
 8001064:	e015      	b.n	8001092 <fsm_for_input_processing1+0x96>
				if(is_button_pressed_1s(0) == 1){
 8001066:	2000      	movs	r0, #0
 8001068:	f000 f9cc 	bl	8001404 <is_button_pressed_1s>
 800106c:	4603      	mov	r3, r0
 800106e:	2b01      	cmp	r3, #1
 8001070:	d10f      	bne.n	8001092 <fsm_for_input_processing1+0x96>
					buttonState1 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <fsm_for_input_processing1+0xa0>)
 8001074:	2202      	movs	r2, #2
 8001076:	701a      	strb	r2, [r3, #0]
		break;
 8001078:	e00b      	b.n	8001092 <fsm_for_input_processing1+0x96>
			if(!is_button_pressed(0)){
 800107a:	2000      	movs	r0, #0
 800107c:	f000 f9a8 	bl	80013d0 <is_button_pressed>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d107      	bne.n	8001096 <fsm_for_input_processing1+0x9a>
				buttonState1 = BUTTON_RELEASED;
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <fsm_for_input_processing1+0xa0>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
		break;
 800108c:	e003      	b.n	8001096 <fsm_for_input_processing1+0x9a>
		break;
 800108e:	bf00      	nop
 8001090:	e002      	b.n	8001098 <fsm_for_input_processing1+0x9c>
		break;
 8001092:	bf00      	nop
 8001094:	e000      	b.n	8001098 <fsm_for_input_processing1+0x9c>
		break;
 8001096:	bf00      	nop
	}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200000d0 	.word	0x200000d0
 80010a0:	200000d4 	.word	0x200000d4
 80010a4:	200000d8 	.word	0x200000d8

080010a8 <fsm_for_input_processing2>:
void fsm_for_input_processing2(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	switch(buttonState2){
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <fsm_for_input_processing2+0x9c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d035      	beq.n	8001120 <fsm_for_input_processing2+0x78>
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	dc42      	bgt.n	800113e <fsm_for_input_processing2+0x96>
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <fsm_for_input_processing2+0x1a>
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d01b      	beq.n	80010f8 <fsm_for_input_processing2+0x50>
			if(!is_button_pressed(1)){
				buttonState2 = BUTTON_RELEASED;
			}
		break;
		}
	}
 80010c0:	e03d      	b.n	800113e <fsm_for_input_processing2+0x96>
			if(is_button_pressed(1)){
 80010c2:	2001      	movs	r0, #1
 80010c4:	f000 f984 	bl	80013d0 <is_button_pressed>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d032      	beq.n	8001134 <fsm_for_input_processing2+0x8c>
				buttonState2 = BUTTON_PRESSED ;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <fsm_for_input_processing2+0x9c>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
				if(ProcessButton2() == 1){
 80010d4:	f000 f8a2 	bl	800121c <ProcessButton2>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d12a      	bne.n	8001134 <fsm_for_input_processing2+0x8c>
					  counterTimeSet++;
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <fsm_for_input_processing2+0xa0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	4a18      	ldr	r2, [pc, #96]	; (8001148 <fsm_for_input_processing2+0xa0>)
 80010e6:	6013      	str	r3, [r2, #0]
					  if(counterTimeSet > 99){
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <fsm_for_input_processing2+0xa0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b63      	cmp	r3, #99	; 0x63
 80010ee:	dd21      	ble.n	8001134 <fsm_for_input_processing2+0x8c>
						  counterTimeSet = 0;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <fsm_for_input_processing2+0xa0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
		break;
 80010f6:	e01d      	b.n	8001134 <fsm_for_input_processing2+0x8c>
			if(!is_button_pressed(1)){
 80010f8:	2001      	movs	r0, #1
 80010fa:	f000 f969 	bl	80013d0 <is_button_pressed>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d103      	bne.n	800110c <fsm_for_input_processing2+0x64>
				buttonState2 = BUTTON_RELEASED;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <fsm_for_input_processing2+0x9c>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
		break;
 800110a:	e015      	b.n	8001138 <fsm_for_input_processing2+0x90>
				if(is_button_pressed_1s(1) == 1){
 800110c:	2001      	movs	r0, #1
 800110e:	f000 f979 	bl	8001404 <is_button_pressed_1s>
 8001112:	4603      	mov	r3, r0
 8001114:	2b01      	cmp	r3, #1
 8001116:	d10f      	bne.n	8001138 <fsm_for_input_processing2+0x90>
					buttonState2 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <fsm_for_input_processing2+0x9c>)
 800111a:	2202      	movs	r2, #2
 800111c:	701a      	strb	r2, [r3, #0]
		break;
 800111e:	e00b      	b.n	8001138 <fsm_for_input_processing2+0x90>
			if(!is_button_pressed(1)){
 8001120:	2001      	movs	r0, #1
 8001122:	f000 f955 	bl	80013d0 <is_button_pressed>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d107      	bne.n	800113c <fsm_for_input_processing2+0x94>
				buttonState2 = BUTTON_RELEASED;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <fsm_for_input_processing2+0x9c>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
		break;
 8001132:	e003      	b.n	800113c <fsm_for_input_processing2+0x94>
		break;
 8001134:	bf00      	nop
 8001136:	e002      	b.n	800113e <fsm_for_input_processing2+0x96>
		break;
 8001138:	bf00      	nop
 800113a:	e000      	b.n	800113e <fsm_for_input_processing2+0x96>
		break;
 800113c:	bf00      	nop
	}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200000d1 	.word	0x200000d1
 8001148:	200000d8 	.word	0x200000d8

0800114c <fsm_for_input_processing3>:
void fsm_for_input_processing3(void){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	switch(buttonState3){
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <fsm_for_input_processing3+0x78>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d024      	beq.n	80011a2 <fsm_for_input_processing3+0x56>
 8001158:	2b02      	cmp	r3, #2
 800115a:	dc31      	bgt.n	80011c0 <fsm_for_input_processing3+0x74>
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <fsm_for_input_processing3+0x1a>
 8001160:	2b01      	cmp	r3, #1
 8001162:	d00a      	beq.n	800117a <fsm_for_input_processing3+0x2e>
			if(!is_button_pressed(2)){
				buttonState3 = BUTTON_RELEASED;
			}
		break;
		}
	}
 8001164:	e02c      	b.n	80011c0 <fsm_for_input_processing3+0x74>
			if(is_button_pressed(2)){
 8001166:	2002      	movs	r0, #2
 8001168:	f000 f932 	bl	80013d0 <is_button_pressed>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d021      	beq.n	80011b6 <fsm_for_input_processing3+0x6a>
				buttonState3 = BUTTON_PRESSED ;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <fsm_for_input_processing3+0x78>)
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
		break;
 8001178:	e01d      	b.n	80011b6 <fsm_for_input_processing3+0x6a>
			if(!is_button_pressed(2)){
 800117a:	2002      	movs	r0, #2
 800117c:	f000 f928 	bl	80013d0 <is_button_pressed>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d103      	bne.n	800118e <fsm_for_input_processing3+0x42>
				buttonState3 = BUTTON_RELEASED;
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <fsm_for_input_processing3+0x78>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
		break;
 800118c:	e015      	b.n	80011ba <fsm_for_input_processing3+0x6e>
				if(is_button_pressed_1s(2) == 1){
 800118e:	2002      	movs	r0, #2
 8001190:	f000 f938 	bl	8001404 <is_button_pressed_1s>
 8001194:	4603      	mov	r3, r0
 8001196:	2b01      	cmp	r3, #1
 8001198:	d10f      	bne.n	80011ba <fsm_for_input_processing3+0x6e>
					buttonState3 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <fsm_for_input_processing3+0x78>)
 800119c:	2202      	movs	r2, #2
 800119e:	701a      	strb	r2, [r3, #0]
		break;
 80011a0:	e00b      	b.n	80011ba <fsm_for_input_processing3+0x6e>
			if(!is_button_pressed(2)){
 80011a2:	2002      	movs	r0, #2
 80011a4:	f000 f914 	bl	80013d0 <is_button_pressed>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d107      	bne.n	80011be <fsm_for_input_processing3+0x72>
				buttonState3 = BUTTON_RELEASED;
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <fsm_for_input_processing3+0x78>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
		break;
 80011b4:	e003      	b.n	80011be <fsm_for_input_processing3+0x72>
		break;
 80011b6:	bf00      	nop
 80011b8:	e002      	b.n	80011c0 <fsm_for_input_processing3+0x74>
		break;
 80011ba:	bf00      	nop
 80011bc:	e000      	b.n	80011c0 <fsm_for_input_processing3+0x74>
		break;
 80011be:	bf00      	nop
	}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200000d2 	.word	0x200000d2

080011c8 <Button1Run>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;
void Button1Run(void){
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
 	button1_flag = 1;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <Button1Run+0x14>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
 }
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	200000f4 	.word	0x200000f4

080011e0 <ProcessButton1>:
int ProcessButton1(void){
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	 if(button1_flag == 1){
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <ProcessButton1+0x20>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d104      	bne.n	80011f6 <ProcessButton1+0x16>
		 button1_flag = 0;
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <ProcessButton1+0x20>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
		 return 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <ProcessButton1+0x18>
	 }
	 return 0;
 80011f6:	2300      	movs	r3, #0
 }
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	200000f4 	.word	0x200000f4

08001204 <Button2Run>:
void Button2Run(void){
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
 	button2_flag = 1;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <Button2Run+0x14>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]
 }
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	200000f8 	.word	0x200000f8

0800121c <ProcessButton2>:
int ProcessButton2(void){
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
	 if(button2_flag == 1){
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <ProcessButton2+0x20>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d104      	bne.n	8001232 <ProcessButton2+0x16>
		 button2_flag = 0;
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <ProcessButton2+0x20>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
		 return 1;
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <ProcessButton2+0x18>
	 }
	 return 0;
 8001232:	2300      	movs	r3, #0
 }
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	200000f8 	.word	0x200000f8

08001240 <Button3Run>:
void Button3Run(void){
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
 	button3_flag = 1;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <Button3Run+0x14>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]
 }
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	200000fc 	.word	0x200000fc

08001258 <ProcessButton3>:
int ProcessButton3(void){
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
	 if(button3_flag == 1){
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <ProcessButton3+0x20>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d104      	bne.n	800126e <ProcessButton3+0x16>
		 button3_flag = 0;
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <ProcessButton3+0x20>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
		 return 1;
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <ProcessButton3+0x18>
	 }
	 return 0;
 800126e:	2300      	movs	r3, #0
 }
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	200000fc 	.word	0x200000fc

0800127c <button_reading>:
		void button_reading(void){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
			 for(unsigned char i = 0;i < N0_OF_BUTTONS;i++){
 8001282:	2300      	movs	r3, #0
 8001284:	71fb      	strb	r3, [r7, #7]
 8001286:	e08c      	b.n	80013a2 <button_reading+0x126>
				 debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8001288:	79fa      	ldrb	r2, [r7, #7]
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	4949      	ldr	r1, [pc, #292]	; (80013b4 <button_reading+0x138>)
 800128e:	5c89      	ldrb	r1, [r1, r2]
 8001290:	4a49      	ldr	r2, [pc, #292]	; (80013b8 <button_reading+0x13c>)
 8001292:	54d1      	strb	r1, [r2, r3]
				 if(i == 0){
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d108      	bne.n	80012ac <button_reading+0x30>
				 debounceButtonBuffer1[0] = HAL_GPIO_ReadPin(Button1_GPIO_Port,Button1_Pin);
 800129a:	2101      	movs	r1, #1
 800129c:	4847      	ldr	r0, [pc, #284]	; (80013bc <button_reading+0x140>)
 800129e:	f001 f959 	bl	8002554 <HAL_GPIO_ReadPin>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b43      	ldr	r3, [pc, #268]	; (80013b4 <button_reading+0x138>)
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	e017      	b.n	80012dc <button_reading+0x60>
				 }
				 else if(i == 1){
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d108      	bne.n	80012c4 <button_reading+0x48>
				 debounceButtonBuffer1[1] = HAL_GPIO_ReadPin(Button2_GPIO_Port,Button2_Pin);
 80012b2:	2102      	movs	r1, #2
 80012b4:	4841      	ldr	r0, [pc, #260]	; (80013bc <button_reading+0x140>)
 80012b6:	f001 f94d 	bl	8002554 <HAL_GPIO_ReadPin>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <button_reading+0x138>)
 80012c0:	705a      	strb	r2, [r3, #1]
 80012c2:	e00b      	b.n	80012dc <button_reading+0x60>
				 }
				 else if(i == 2){
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d108      	bne.n	80012dc <button_reading+0x60>
				 debounceButtonBuffer1[2] = HAL_GPIO_ReadPin(Button3_GPIO_Port,Button3_Pin);
 80012ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ce:	483c      	ldr	r0, [pc, #240]	; (80013c0 <button_reading+0x144>)
 80012d0:	f001 f940 	bl	8002554 <HAL_GPIO_ReadPin>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <button_reading+0x138>)
 80012da:	709a      	strb	r2, [r3, #2]
				 }
				 if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	4a35      	ldr	r2, [pc, #212]	; (80013b4 <button_reading+0x138>)
 80012e0:	5cd2      	ldrb	r2, [r2, r3]
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4934      	ldr	r1, [pc, #208]	; (80013b8 <button_reading+0x13c>)
 80012e6:	5ccb      	ldrb	r3, [r1, r3]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d14e      	bne.n	800138a <button_reading+0x10e>
					 buttonBuffer[i] = debounceButtonBuffer1[i];
 80012ec:	79fa      	ldrb	r2, [r7, #7]
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	4930      	ldr	r1, [pc, #192]	; (80013b4 <button_reading+0x138>)
 80012f2:	5c89      	ldrb	r1, [r1, r2]
 80012f4:	4a33      	ldr	r2, [pc, #204]	; (80013c4 <button_reading+0x148>)
 80012f6:	54d1      	strb	r1, [r2, r3]
					 if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	4a32      	ldr	r2, [pc, #200]	; (80013c4 <button_reading+0x148>)
 80012fc:	5cd3      	ldrb	r3, [r2, r3]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d14c      	bne.n	800139c <button_reading+0x120>
						 if(i == 0){
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <button_reading+0x92>
							 Button1Run();
 8001308:	f7ff ff5e 	bl	80011c8 <Button1Run>
 800130c:	e00a      	b.n	8001324 <button_reading+0xa8>
						 }
						 else if(i == 1){
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d102      	bne.n	800131a <button_reading+0x9e>
							 Button2Run();
 8001314:	f7ff ff76 	bl	8001204 <Button2Run>
 8001318:	e004      	b.n	8001324 <button_reading+0xa8>
						 }
						 else if(i == 2){
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d101      	bne.n	8001324 <button_reading+0xa8>
							 Button3Run();
 8001320:	f7ff ff8e 	bl	8001240 <Button3Run>
						 }
						 if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING && flagForButtonPress1s[i] == 0){
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	4a28      	ldr	r2, [pc, #160]	; (80013c8 <button_reading+0x14c>)
 8001328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800132c:	2b63      	cmp	r3, #99	; 0x63
 800132e:	d80e      	bhi.n	800134e <button_reading+0xd2>
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4a26      	ldr	r2, [pc, #152]	; (80013cc <button_reading+0x150>)
 8001334:	5cd3      	ldrb	r3, [r2, r3]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <button_reading+0xd2>
							 counterForButtonPress1s[i]++;
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	4a22      	ldr	r2, [pc, #136]	; (80013c8 <button_reading+0x14c>)
 800133e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001342:	3201      	adds	r2, #1
 8001344:	b291      	uxth	r1, r2
 8001346:	4a20      	ldr	r2, [pc, #128]	; (80013c8 <button_reading+0x14c>)
 8001348:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800134c:	e026      	b.n	800139c <button_reading+0x120>
						 }
						 else{
							 flagForButtonPress1s[i] = 1;
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <button_reading+0x150>)
 8001352:	2101      	movs	r1, #1
 8001354:	54d1      	strb	r1, [r2, r3]

							 if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING2){
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <button_reading+0x14c>)
 800135a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800135e:	2b7c      	cmp	r3, #124	; 0x7c
 8001360:	d809      	bhi.n	8001376 <button_reading+0xfa>
								counterForButtonPress1s[i]++;
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4a18      	ldr	r2, [pc, #96]	; (80013c8 <button_reading+0x14c>)
 8001366:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800136a:	3201      	adds	r2, #1
 800136c:	b291      	uxth	r1, r2
 800136e:	4a16      	ldr	r2, [pc, #88]	; (80013c8 <button_reading+0x14c>)
 8001370:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001374:	e012      	b.n	800139c <button_reading+0x120>
							 }
							 else{
								buttonBuffer[i] = BUTTON_IS_RELEASED;
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <button_reading+0x148>)
 800137a:	2101      	movs	r1, #1
 800137c:	54d1      	strb	r1, [r2, r3]
								counterForButtonPress1s[i] = 100;
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <button_reading+0x14c>)
 8001382:	2164      	movs	r1, #100	; 0x64
 8001384:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001388:	e008      	b.n	800139c <button_reading+0x120>

						 }
					 }
				 }
					 else{
						 counterForButtonPress1s[i] = 0;
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <button_reading+0x14c>)
 800138e:	2100      	movs	r1, #0
 8001390:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						 flagForButtonPress1s[i] = 0;
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <button_reading+0x150>)
 8001398:	2100      	movs	r1, #0
 800139a:	54d1      	strb	r1, [r2, r3]
			 for(unsigned char i = 0;i < N0_OF_BUTTONS;i++){
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	3301      	adds	r3, #1
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	f67f af6f 	bls.w	8001288 <button_reading+0xc>
					 }
				 }
			}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200000e0 	.word	0x200000e0
 80013b8:	200000e4 	.word	0x200000e4
 80013bc:	40010800 	.word	0x40010800
 80013c0:	40011000 	.word	0x40011000
 80013c4:	200000dc 	.word	0x200000dc
 80013c8:	200000ec 	.word	0x200000ec
 80013cc:	200000e8 	.word	0x200000e8

080013d0 <is_button_pressed>:
unsigned char is_button_pressed(uint8_t index){
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <is_button_pressed+0x14>
 80013e0:	2300      	movs	r3, #0
 80013e2:	e007      	b.n	80013f4 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	4a06      	ldr	r2, [pc, #24]	; (8001400 <is_button_pressed+0x30>)
 80013e8:	5cd3      	ldrb	r3, [r2, r3]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	bf0c      	ite	eq
 80013ee:	2301      	moveq	r3, #1
 80013f0:	2300      	movne	r3, #0
 80013f2:	b2db      	uxtb	r3, r3
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200000dc 	.word	0x200000dc

08001404 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index){
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <is_button_pressed_1s+0x14>
 8001414:	23ff      	movs	r3, #255	; 0xff
 8001416:	e007      	b.n	8001428 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	4a06      	ldr	r2, [pc, #24]	; (8001434 <is_button_pressed_1s+0x30>)
 800141c:	5cd3      	ldrb	r3, [r2, r3]
 800141e:	2b01      	cmp	r3, #1
 8001420:	bf0c      	ite	eq
 8001422:	2301      	moveq	r3, #1
 8001424:	2300      	movne	r3, #0
 8001426:	b2db      	uxtb	r3, r3
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	200000e8 	.word	0x200000e8

08001438 <DisplayREDX>:
 */
#include "main.h"
#include "global.h"
int statusledx = 0;
int statusledy = 0;
void DisplayREDX(void){
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDX1_A_GPIO_Port, LEDX1_A_Pin, SET);
 800143c:	2201      	movs	r2, #1
 800143e:	2108      	movs	r1, #8
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <DisplayREDX+0x1c>)
 8001442:	f001 f89e 	bl	8002582 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX1_B_GPIO_Port, LEDX1_B_Pin, SET);
 8001446:	2201      	movs	r2, #1
 8001448:	2120      	movs	r1, #32
 800144a:	4802      	ldr	r0, [pc, #8]	; (8001454 <DisplayREDX+0x1c>)
 800144c:	f001 f899 	bl	8002582 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(LEDX2_A_GPIO_Port, LEDX2_A_Pin, SET);
//	HAL_GPIO_WritePin(LEDX2_B_GPIO_Port, LEDX2_B_Pin, SET);
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40010c00 	.word	0x40010c00

08001458 <DisplayYELLOWX>:
void DisplayYELLOWX(void){
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDX1_A_GPIO_Port, LEDX1_A_Pin, RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	2108      	movs	r1, #8
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <DisplayYELLOWX+0x1c>)
 8001462:	f001 f88e 	bl	8002582 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX1_B_GPIO_Port, LEDX1_B_Pin, SET);
 8001466:	2201      	movs	r2, #1
 8001468:	2120      	movs	r1, #32
 800146a:	4802      	ldr	r0, [pc, #8]	; (8001474 <DisplayYELLOWX+0x1c>)
 800146c:	f001 f889 	bl	8002582 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(LEDX2_A_GPIO_Port, LEDX2_A_Pin, RESET);
//	HAL_GPIO_WritePin(LEDX2_B_GPIO_Port, LEDX2_B_Pin, SET);
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40010c00 	.word	0x40010c00

08001478 <DisplayGREENX>:
void DisplayGREENX(void){
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDX1_A_GPIO_Port, LEDX1_A_Pin, SET);
 800147c:	2201      	movs	r2, #1
 800147e:	2108      	movs	r1, #8
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <DisplayGREENX+0x1c>)
 8001482:	f001 f87e 	bl	8002582 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX1_B_GPIO_Port, LEDX1_B_Pin, RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	2120      	movs	r1, #32
 800148a:	4802      	ldr	r0, [pc, #8]	; (8001494 <DisplayGREENX+0x1c>)
 800148c:	f001 f879 	bl	8002582 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(LEDX2_A_GPIO_Port, LEDX2_A_Pin, SET);
//	HAL_GPIO_WritePin(LEDX2_B_GPIO_Port, LEDX2_B_Pin, RESET);
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40010c00 	.word	0x40010c00

08001498 <DisplayREDY>:
void DisplayREDY(void){
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDY1_A_GPIO_Port, LEDY1_A_Pin, SET);
 800149c:	2201      	movs	r2, #1
 800149e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <DisplayREDY+0x20>)
 80014a4:	f001 f86d 	bl	8002582 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY1_B_GPIO_Port, LEDY1_B_Pin, SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ae:	4802      	ldr	r0, [pc, #8]	; (80014b8 <DisplayREDY+0x20>)
 80014b0:	f001 f867 	bl	8002582 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(LEDY2_A_GPIO_Port, LEDY2_A_Pin, SET);
//	HAL_GPIO_WritePin(LEDY2_B_GPIO_Port, LEDY2_B_Pin, SET);
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40010800 	.word	0x40010800

080014bc <DisplayYELLOWY>:
void DisplayYELLOWY(void){
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDY1_A_GPIO_Port, LEDY1_A_Pin, RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <DisplayYELLOWY+0x20>)
 80014c8:	f001 f85b 	bl	8002582 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY1_B_GPIO_Port, LEDY1_B_Pin, SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d2:	4802      	ldr	r0, [pc, #8]	; (80014dc <DisplayYELLOWY+0x20>)
 80014d4:	f001 f855 	bl	8002582 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(LEDY2_A_GPIO_Port, LEDY2_A_Pin, RESET);
//	HAL_GPIO_WritePin(LEDY2_B_GPIO_Port, LEDY2_B_Pin, SET);
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40010800 	.word	0x40010800

080014e0 <DisplayGREENY>:
void DisplayGREENY(void){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDY1_A_GPIO_Port, LEDY1_A_Pin, SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <DisplayGREENY+0x20>)
 80014ec:	f001 f849 	bl	8002582 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY1_B_GPIO_Port, LEDY1_B_Pin, RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f6:	4802      	ldr	r0, [pc, #8]	; (8001500 <DisplayGREENY+0x20>)
 80014f8:	f001 f843 	bl	8002582 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(LEDY2_A_GPIO_Port, LEDY2_A_Pin, SET);
//	HAL_GPIO_WritePin(LEDY2_B_GPIO_Port, LEDY2_B_Pin, RESET);
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40010800 	.word	0x40010800

08001504 <InitLED>:
void InitLED(void){
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDX1_A_GPIO_Port, LEDX1_A_Pin, RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	2108      	movs	r1, #8
 800150c:	480a      	ldr	r0, [pc, #40]	; (8001538 <InitLED+0x34>)
 800150e:	f001 f838 	bl	8002582 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDX1_B_GPIO_Port, LEDX1_B_Pin, RESET);
 8001512:	2200      	movs	r2, #0
 8001514:	2120      	movs	r1, #32
 8001516:	4808      	ldr	r0, [pc, #32]	; (8001538 <InitLED+0x34>)
 8001518:	f001 f833 	bl	8002582 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(LEDX2_A_GPIO_Port, LEDX2_A_Pin, RESET);
//	HAL_GPIO_WritePin(LEDX2_B_GPIO_Port, LEDX2_B_Pin, RESET);
	HAL_GPIO_WritePin(LEDY1_A_GPIO_Port, LEDY1_A_Pin, RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <InitLED+0x38>)
 8001524:	f001 f82d 	bl	8002582 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY1_B_GPIO_Port, LEDY1_B_Pin, RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800152e:	4803      	ldr	r0, [pc, #12]	; (800153c <InitLED+0x38>)
 8001530:	f001 f827 	bl	8002582 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(LEDY2_A_GPIO_Port, LEDY2_A_Pin, RESET);
//	HAL_GPIO_WritePin(LEDY2_B_GPIO_Port, LEDY2_B_Pin, RESET);
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40010c00 	.word	0x40010c00
 800153c:	40010800 	.word	0x40010800

08001540 <DisplayMAN_REDX>:
void DisplayMAN_REDX(void){
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	switch(statusledx){
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <DisplayMAN_REDX+0x38>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <DisplayMAN_REDX+0x12>
 800154c:	2b01      	cmp	r3, #1
 800154e:	d003      	beq.n	8001558 <DisplayMAN_REDX+0x18>
 8001550:	e005      	b.n	800155e <DisplayMAN_REDX+0x1e>
	case 0:
		DisplayREDX();
 8001552:	f7ff ff71 	bl	8001438 <DisplayREDX>
		break;
 8001556:	e002      	b.n	800155e <DisplayMAN_REDX+0x1e>
	case 1:
		InitLED();
 8001558:	f7ff ffd4 	bl	8001504 <InitLED>
		break;
 800155c:	bf00      	nop
	}
	if(statusledx == 0){
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <DisplayMAN_REDX+0x38>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d103      	bne.n	800156e <DisplayMAN_REDX+0x2e>
		statusledx = 1;
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <DisplayMAN_REDX+0x38>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]
	}
	else{
		statusledx = 0;
	}
}
 800156c:	e002      	b.n	8001574 <DisplayMAN_REDX+0x34>
		statusledx = 0;
 800156e:	4b02      	ldr	r3, [pc, #8]	; (8001578 <DisplayMAN_REDX+0x38>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000100 	.word	0x20000100

0800157c <DisplayMAN_REDY>:
void DisplayMAN_REDY(void){
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	switch(statusledy){
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <DisplayMAN_REDY+0x38>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <DisplayMAN_REDY+0x12>
 8001588:	2b01      	cmp	r3, #1
 800158a:	d003      	beq.n	8001594 <DisplayMAN_REDY+0x18>
 800158c:	e005      	b.n	800159a <DisplayMAN_REDY+0x1e>
	case 0:
		DisplayREDY();
 800158e:	f7ff ff83 	bl	8001498 <DisplayREDY>
		break;
 8001592:	e002      	b.n	800159a <DisplayMAN_REDY+0x1e>
	case 1:
		InitLED();
 8001594:	f7ff ffb6 	bl	8001504 <InitLED>
		break;
 8001598:	bf00      	nop
	}
	if(statusledy == 0){
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <DisplayMAN_REDY+0x38>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d103      	bne.n	80015aa <DisplayMAN_REDY+0x2e>
		statusledy = 1;
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <DisplayMAN_REDY+0x38>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
	}
	else{
		statusledy = 0;
	}
}
 80015a8:	e002      	b.n	80015b0 <DisplayMAN_REDY+0x34>
		statusledy = 0;
 80015aa:	4b02      	ldr	r3, [pc, #8]	; (80015b4 <DisplayMAN_REDY+0x38>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000104 	.word	0x20000104

080015b8 <DisplayMAN_GREENX>:
void DisplayMAN_GREENX(void){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	switch(statusledx){
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <DisplayMAN_GREENX+0x38>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <DisplayMAN_GREENX+0x12>
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d003      	beq.n	80015d0 <DisplayMAN_GREENX+0x18>
 80015c8:	e005      	b.n	80015d6 <DisplayMAN_GREENX+0x1e>
	case 0:
		DisplayGREENX();
 80015ca:	f7ff ff55 	bl	8001478 <DisplayGREENX>
		break;
 80015ce:	e002      	b.n	80015d6 <DisplayMAN_GREENX+0x1e>
	case 1:
		InitLED();
 80015d0:	f7ff ff98 	bl	8001504 <InitLED>
		break;
 80015d4:	bf00      	nop
	}
	if(statusledx == 0){
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <DisplayMAN_GREENX+0x38>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d103      	bne.n	80015e6 <DisplayMAN_GREENX+0x2e>
		statusledx = 1;
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <DisplayMAN_GREENX+0x38>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
	}
	else{
		statusledx = 0;
	}
}
 80015e4:	e002      	b.n	80015ec <DisplayMAN_GREENX+0x34>
		statusledx = 0;
 80015e6:	4b02      	ldr	r3, [pc, #8]	; (80015f0 <DisplayMAN_GREENX+0x38>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000100 	.word	0x20000100

080015f4 <DisplayMAN_GREENY>:
void DisplayMAN_GREENY(void){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	switch(statusledy){
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <DisplayMAN_GREENY+0x38>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <DisplayMAN_GREENY+0x12>
 8001600:	2b01      	cmp	r3, #1
 8001602:	d003      	beq.n	800160c <DisplayMAN_GREENY+0x18>
 8001604:	e005      	b.n	8001612 <DisplayMAN_GREENY+0x1e>
	case 0:
		DisplayGREENY();
 8001606:	f7ff ff6b 	bl	80014e0 <DisplayGREENY>
		break;
 800160a:	e002      	b.n	8001612 <DisplayMAN_GREENY+0x1e>
	case 1:
		InitLED();
 800160c:	f7ff ff7a 	bl	8001504 <InitLED>
		break;
 8001610:	bf00      	nop
	}
	if(statusledy == 0){
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <DisplayMAN_GREENY+0x38>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d103      	bne.n	8001622 <DisplayMAN_GREENY+0x2e>
		statusledy = 1;
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <DisplayMAN_GREENY+0x38>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]
	}
	else{
		statusledy = 0;
	}
}
 8001620:	e002      	b.n	8001628 <DisplayMAN_GREENY+0x34>
		statusledy = 0;
 8001622:	4b02      	ldr	r3, [pc, #8]	; (800162c <DisplayMAN_GREENY+0x38>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000104 	.word	0x20000104

08001630 <DisplayMAN_YELLOWX>:
void DisplayMAN_YELLOWX(void){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	switch(statusledx){
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <DisplayMAN_YELLOWX+0x38>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <DisplayMAN_YELLOWX+0x12>
 800163c:	2b01      	cmp	r3, #1
 800163e:	d003      	beq.n	8001648 <DisplayMAN_YELLOWX+0x18>
 8001640:	e005      	b.n	800164e <DisplayMAN_YELLOWX+0x1e>
	case 0:
		DisplayYELLOWX();
 8001642:	f7ff ff09 	bl	8001458 <DisplayYELLOWX>
		break;
 8001646:	e002      	b.n	800164e <DisplayMAN_YELLOWX+0x1e>
	case 1:
		InitLED();
 8001648:	f7ff ff5c 	bl	8001504 <InitLED>
		break;
 800164c:	bf00      	nop
	}
	if(statusledx == 0){
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <DisplayMAN_YELLOWX+0x38>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d103      	bne.n	800165e <DisplayMAN_YELLOWX+0x2e>
		statusledx = 1;
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <DisplayMAN_YELLOWX+0x38>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]
	}
	else{
		statusledx = 0;
	}
}
 800165c:	e002      	b.n	8001664 <DisplayMAN_YELLOWX+0x34>
		statusledx = 0;
 800165e:	4b02      	ldr	r3, [pc, #8]	; (8001668 <DisplayMAN_YELLOWX+0x38>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000100 	.word	0x20000100

0800166c <DisplayMAN_YELLOWY>:
void DisplayMAN_YELLOWY(void){
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	switch(statusledy){
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <DisplayMAN_YELLOWY+0x38>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d002      	beq.n	800167e <DisplayMAN_YELLOWY+0x12>
 8001678:	2b01      	cmp	r3, #1
 800167a:	d003      	beq.n	8001684 <DisplayMAN_YELLOWY+0x18>
 800167c:	e005      	b.n	800168a <DisplayMAN_YELLOWY+0x1e>
	case 0:
		DisplayYELLOWY();
 800167e:	f7ff ff1d 	bl	80014bc <DisplayYELLOWY>
		break;
 8001682:	e002      	b.n	800168a <DisplayMAN_YELLOWY+0x1e>
	case 1:
		InitLED();
 8001684:	f7ff ff3e 	bl	8001504 <InitLED>
		break;
 8001688:	bf00      	nop
	}
	if(statusledy == 0){
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <DisplayMAN_YELLOWY+0x38>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d103      	bne.n	800169a <DisplayMAN_YELLOWY+0x2e>
		statusledy = 1;
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <DisplayMAN_YELLOWY+0x38>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]
	}
	else{
		statusledy = 0;
	}
}
 8001698:	e002      	b.n	80016a0 <DisplayMAN_YELLOWY+0x34>
		statusledy = 0;
 800169a:	4b02      	ldr	r3, [pc, #8]	; (80016a4 <DisplayMAN_YELLOWY+0x38>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000104 	.word	0x20000104

080016a8 <WalkingX>:
void WalkingX(void){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WALK_Xa_GPIO_Port, WALK_Xa_Pin, SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2110      	movs	r1, #16
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <WalkingX+0x20>)
 80016b2:	f000 ff66 	bl	8002582 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WALK_Xb_GPIO_Port, WALK_Xb_Pin, RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <WalkingX+0x20>)
 80016be:	f000 ff60 	bl	8002582 <HAL_GPIO_WritePin>
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40010c00 	.word	0x40010c00

080016cc <StopX>:
void StopX(void){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WALK_Xa_GPIO_Port, WALK_Xa_Pin, SET);
 80016d0:	2201      	movs	r2, #1
 80016d2:	2110      	movs	r1, #16
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <StopX+0x20>)
 80016d6:	f000 ff54 	bl	8002582 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WALK_Xb_GPIO_Port, WALK_Xb_Pin, SET);
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <StopX+0x20>)
 80016e2:	f000 ff4e 	bl	8002582 <HAL_GPIO_WritePin>
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40010c00 	.word	0x40010c00

080016f0 <WalkingY>:
void WalkingY(void){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WALK_Ya_GPIO_Port, WALK_Ya_Pin, SET);
 80016f4:	2201      	movs	r2, #1
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	4804      	ldr	r0, [pc, #16]	; (800170c <WalkingY+0x1c>)
 80016fa:	f000 ff42 	bl	8002582 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WALK_Yb_GPIO_Port, WALK_Yb_Pin, RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2140      	movs	r1, #64	; 0x40
 8001702:	4803      	ldr	r0, [pc, #12]	; (8001710 <WalkingY+0x20>)
 8001704:	f000 ff3d 	bl	8002582 <HAL_GPIO_WritePin>
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40011000 	.word	0x40011000
 8001710:	40010c00 	.word	0x40010c00

08001714 <StopY>:
void StopY(void){
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WALK_Ya_GPIO_Port, WALK_Ya_Pin, SET);
 8001718:	2201      	movs	r2, #1
 800171a:	2180      	movs	r1, #128	; 0x80
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <StopY+0x1c>)
 800171e:	f000 ff30 	bl	8002582 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WALK_Yb_GPIO_Port, WALK_Yb_Pin, SET);
 8001722:	2201      	movs	r2, #1
 8001724:	2140      	movs	r1, #64	; 0x40
 8001726:	4803      	ldr	r0, [pc, #12]	; (8001734 <StopY+0x20>)
 8001728:	f000 ff2b 	bl	8002582 <HAL_GPIO_WritePin>
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40011000 	.word	0x40011000
 8001734:	40010c00 	.word	0x40010c00

08001738 <TurnOff_WalkingX>:
void TurnOff_WalkingX(void){
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WALK_Xa_GPIO_Port, WALK_Xa_Pin, RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	2110      	movs	r1, #16
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <TurnOff_WalkingX+0x20>)
 8001742:	f000 ff1e 	bl	8002582 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WALK_Xb_GPIO_Port, WALK_Xb_Pin, RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <TurnOff_WalkingX+0x20>)
 800174e:	f000 ff18 	bl	8002582 <HAL_GPIO_WritePin>
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40010c00 	.word	0x40010c00

0800175c <TurnOff_WalkingY>:
void TurnOff_WalkingY(void){
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WALK_Ya_GPIO_Port, WALK_Ya_Pin, RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	2180      	movs	r1, #128	; 0x80
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <TurnOff_WalkingY+0x1c>)
 8001766:	f000 ff0c 	bl	8002582 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WALK_Yb_GPIO_Port, WALK_Yb_Pin, RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	2140      	movs	r1, #64	; 0x40
 800176e:	4803      	ldr	r0, [pc, #12]	; (800177c <TurnOff_WalkingY+0x20>)
 8001770:	f000 ff07 	bl	8002582 <HAL_GPIO_WritePin>
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40011000 	.word	0x40011000
 800177c:	40010c00 	.word	0x40010c00

08001780 <WalkingX_Blinking>:
void WalkingX_Blinking(void){
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	switch(statusledx){
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <WalkingX_Blinking+0x38>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <WalkingX_Blinking+0x12>
 800178c:	2b01      	cmp	r3, #1
 800178e:	d003      	beq.n	8001798 <WalkingX_Blinking+0x18>
 8001790:	e005      	b.n	800179e <WalkingX_Blinking+0x1e>
	case 0:
		WalkingX();
 8001792:	f7ff ff89 	bl	80016a8 <WalkingX>
		break;
 8001796:	e002      	b.n	800179e <WalkingX_Blinking+0x1e>
	case 1:
		TurnOff_WalkingX();
 8001798:	f7ff ffce 	bl	8001738 <TurnOff_WalkingX>
		break;
 800179c:	bf00      	nop
	}
	if(statusledx == 0){
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <WalkingX_Blinking+0x38>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d103      	bne.n	80017ae <WalkingX_Blinking+0x2e>
		statusledx = 1;
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <WalkingX_Blinking+0x38>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
	}
	else{
		statusledx = 0;
	}
}
 80017ac:	e002      	b.n	80017b4 <WalkingX_Blinking+0x34>
		statusledx = 0;
 80017ae:	4b02      	ldr	r3, [pc, #8]	; (80017b8 <WalkingX_Blinking+0x38>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000100 	.word	0x20000100

080017bc <WalkingY_Blinnking>:
void WalkingY_Blinnking(void){
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	switch(statusledy){
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <WalkingY_Blinnking+0x38>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <WalkingY_Blinnking+0x12>
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d003      	beq.n	80017d4 <WalkingY_Blinnking+0x18>
 80017cc:	e005      	b.n	80017da <WalkingY_Blinnking+0x1e>
	case 0:
		WalkingY();
 80017ce:	f7ff ff8f 	bl	80016f0 <WalkingY>
		break;
 80017d2:	e002      	b.n	80017da <WalkingY_Blinnking+0x1e>
	case 1:
		TurnOff_WalkingY();
 80017d4:	f7ff ffc2 	bl	800175c <TurnOff_WalkingY>
		break;
 80017d8:	bf00      	nop
	}
	if(statusledy == 0){
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <WalkingY_Blinnking+0x38>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d103      	bne.n	80017ea <WalkingY_Blinnking+0x2e>
		statusledy = 1;
 80017e2:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <WalkingY_Blinnking+0x38>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
	}
	else{
		statusledy = 0;
	}
}
 80017e8:	e002      	b.n	80017f0 <WalkingY_Blinnking+0x34>
		statusledy = 0;
 80017ea:	4b02      	ldr	r3, [pc, #8]	; (80017f4 <WalkingY_Blinnking+0x38>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000104 	.word	0x20000104

080017f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017fc:	f000 fb92 	bl	8001f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001800:	f000 f884 	bl	800190c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001804:	f000 f962 	bl	8001acc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001808:	f000 f936 	bl	8001a78 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800180c:	f000 f8e8 	bl	80019e0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001810:	f000 f8b8 	bl	8001984 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001814:	482a      	ldr	r0, [pc, #168]	; (80018c0 <main+0xc8>)
 8001816:	f001 ffc7 	bl	80037a8 <HAL_TIM_Base_Start_IT>
  lcd_init();
 800181a:	f7ff fb89 	bl	8000f30 <lcd_init>
  SCH_Init();
 800181e:	f7fe fca1 	bl	8000164 <SCH_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	statusx = INIT;
 8001822:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <main+0xcc>)
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]
  	statusy = INIT;
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <main+0xd0>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]
  	counter_x = 0;
 800182e:	4b27      	ldr	r3, [pc, #156]	; (80018cc <main+0xd4>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
  	counter_y = 0;
 8001834:	4b26      	ldr	r3, [pc, #152]	; (80018d0 <main+0xd8>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
  	counterMode = 1;
 800183a:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <main+0xdc>)
 800183c:	2201      	movs	r2, #1
 800183e:	601a      	str	r2, [r3, #0]
  	counterTimeSet = 0;
 8001840:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <main+0xe0>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
  	DisplayCounter = 0;
 8001846:	4b25      	ldr	r3, [pc, #148]	; (80018dc <main+0xe4>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
  	SCH_Add_Task(fsm_automatic_runx, 0, 10);
 800184c:	220a      	movs	r2, #10
 800184e:	2100      	movs	r1, #0
 8001850:	4823      	ldr	r0, [pc, #140]	; (80018e0 <main+0xe8>)
 8001852:	f7fe fd13 	bl	800027c <SCH_Add_Task>
  	SCH_Add_Task(fsm_automatic_runy, 0, 10);
 8001856:	220a      	movs	r2, #10
 8001858:	2100      	movs	r1, #0
 800185a:	4822      	ldr	r0, [pc, #136]	; (80018e4 <main+0xec>)
 800185c:	f7fe fd0e 	bl	800027c <SCH_Add_Task>
  	SCH_Add_Task(fsm_clock, 100, 100);
 8001860:	2264      	movs	r2, #100	; 0x64
 8001862:	2164      	movs	r1, #100	; 0x64
 8001864:	4820      	ldr	r0, [pc, #128]	; (80018e8 <main+0xf0>)
 8001866:	f7fe fd09 	bl	800027c <SCH_Add_Task>
  	SCH_Add_Task(fsm_mode, 100, 100);
 800186a:	2264      	movs	r2, #100	; 0x64
 800186c:	2164      	movs	r1, #100	; 0x64
 800186e:	481f      	ldr	r0, [pc, #124]	; (80018ec <main+0xf4>)
 8001870:	f7fe fd04 	bl	800027c <SCH_Add_Task>
  	SCH_Add_Task(fsm_manual_run1, 10, 10);
 8001874:	220a      	movs	r2, #10
 8001876:	210a      	movs	r1, #10
 8001878:	481d      	ldr	r0, [pc, #116]	; (80018f0 <main+0xf8>)
 800187a:	f7fe fcff 	bl	800027c <SCH_Add_Task>
  	SCH_Add_Task(fsm_manual_run2, 10, 10);
 800187e:	220a      	movs	r2, #10
 8001880:	210a      	movs	r1, #10
 8001882:	481c      	ldr	r0, [pc, #112]	; (80018f4 <main+0xfc>)
 8001884:	f7fe fcfa 	bl	800027c <SCH_Add_Task>
  	SCH_Add_Task(fsm_manual_run, 10, 10);
 8001888:	220a      	movs	r2, #10
 800188a:	210a      	movs	r1, #10
 800188c:	481a      	ldr	r0, [pc, #104]	; (80018f8 <main+0x100>)
 800188e:	f7fe fcf5 	bl	800027c <SCH_Add_Task>
 	SCH_Add_Task(Walking_LED, 0, 25);
 8001892:	2219      	movs	r2, #25
 8001894:	2100      	movs	r1, #0
 8001896:	4819      	ldr	r0, [pc, #100]	; (80018fc <main+0x104>)
 8001898:	f7fe fcf0 	bl	800027c <SCH_Add_Task>
  	SCH_Add_Task(fsm_for_input_processing1, 10, 1);
 800189c:	2201      	movs	r2, #1
 800189e:	210a      	movs	r1, #10
 80018a0:	4817      	ldr	r0, [pc, #92]	; (8001900 <main+0x108>)
 80018a2:	f7fe fceb 	bl	800027c <SCH_Add_Task>
  	SCH_Add_Task(fsm_for_input_processing2, 10, 1);
 80018a6:	2201      	movs	r2, #1
 80018a8:	210a      	movs	r1, #10
 80018aa:	4816      	ldr	r0, [pc, #88]	; (8001904 <main+0x10c>)
 80018ac:	f7fe fce6 	bl	800027c <SCH_Add_Task>
  	SCH_Add_Task(fsm_for_input_processing3, 10, 1);
 80018b0:	2201      	movs	r2, #1
 80018b2:	210a      	movs	r1, #10
 80018b4:	4814      	ldr	r0, [pc, #80]	; (8001908 <main+0x110>)
 80018b6:	f7fe fce1 	bl	800027c <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 80018ba:	f7fe fd31 	bl	8000320 <SCH_Dispatch_Tasks>
 80018be:	e7fc      	b.n	80018ba <main+0xc2>
 80018c0:	20000488 	.word	0x20000488
 80018c4:	200000c0 	.word	0x200000c0
 80018c8:	200000c4 	.word	0x200000c4
 80018cc:	200000ac 	.word	0x200000ac
 80018d0:	200000b0 	.word	0x200000b0
 80018d4:	200000d4 	.word	0x200000d4
 80018d8:	200000d8 	.word	0x200000d8
 80018dc:	2000009c 	.word	0x2000009c
 80018e0:	08000889 	.word	0x08000889
 80018e4:	080009bd 	.word	0x080009bd
 80018e8:	080006e1 	.word	0x080006e1
 80018ec:	08000781 	.word	0x08000781
 80018f0:	08000af5 	.word	0x08000af5
 80018f4:	08000bdd 	.word	0x08000bdd
 80018f8:	08000d4d 	.word	0x08000d4d
 80018fc:	080007fd 	.word	0x080007fd
 8001900:	08000ffd 	.word	0x08000ffd
 8001904:	080010a9 	.word	0x080010a9
 8001908:	0800114d 	.word	0x0800114d

0800190c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b090      	sub	sp, #64	; 0x40
 8001910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001912:	f107 0318 	add.w	r3, r7, #24
 8001916:	2228      	movs	r2, #40	; 0x28
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f002 fbee 	bl	80040fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800192e:	2302      	movs	r3, #2
 8001930:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001932:	2301      	movs	r3, #1
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001936:	2310      	movs	r3, #16
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800193a:	2300      	movs	r3, #0
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800193e:	f107 0318 	add.w	r3, r7, #24
 8001942:	4618      	mov	r0, r3
 8001944:	f001 fad2 	bl	8002eec <HAL_RCC_OscConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800194e:	f000 f959 	bl	8001c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001952:	230f      	movs	r3, #15
 8001954:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f001 fd3e 	bl	80033ec <HAL_RCC_ClockConfig>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001976:	f000 f945 	bl	8001c04 <Error_Handler>
  }
}
 800197a:	bf00      	nop
 800197c:	3740      	adds	r7, #64	; 0x40
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <MX_I2C1_Init+0x50>)
 800198a:	4a13      	ldr	r2, [pc, #76]	; (80019d8 <MX_I2C1_Init+0x54>)
 800198c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <MX_I2C1_Init+0x50>)
 8001990:	4a12      	ldr	r2, [pc, #72]	; (80019dc <MX_I2C1_Init+0x58>)
 8001992:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <MX_I2C1_Init+0x50>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <MX_I2C1_Init+0x50>)
 800199c:	2200      	movs	r2, #0
 800199e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <MX_I2C1_Init+0x50>)
 80019a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <MX_I2C1_Init+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_I2C1_Init+0x50>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <MX_I2C1_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_I2C1_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <MX_I2C1_Init+0x50>)
 80019c2:	f000 fdf7 	bl	80025b4 <HAL_I2C_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019cc:	f000 f91a 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000434 	.word	0x20000434
 80019d8:	40005400 	.word	0x40005400
 80019dc:	000186a0 	.word	0x000186a0

080019e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	463b      	mov	r3, r7
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <MX_TIM2_Init+0x94>)
 80019fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <MX_TIM2_Init+0x94>)
 8001a06:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001a0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <MX_TIM2_Init+0x94>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <MX_TIM2_Init+0x94>)
 8001a14:	2209      	movs	r2, #9
 8001a16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <MX_TIM2_Init+0x94>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <MX_TIM2_Init+0x94>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a24:	4813      	ldr	r0, [pc, #76]	; (8001a74 <MX_TIM2_Init+0x94>)
 8001a26:	f001 fe6f 	bl	8003708 <HAL_TIM_Base_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a30:	f000 f8e8 	bl	8001c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <MX_TIM2_Init+0x94>)
 8001a42:	f001 fff3 	bl	8003a2c <HAL_TIM_ConfigClockSource>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a4c:	f000 f8da 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a58:	463b      	mov	r3, r7
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_TIM2_Init+0x94>)
 8001a5e:	f002 f9d5 	bl	8003e0c <HAL_TIMEx_MasterConfigSynchronization>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a68:	f000 f8cc 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000488 	.word	0x20000488

08001a78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <MX_USART2_UART_Init+0x50>)
 8001a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001ab0:	f002 fa1c 	bl	8003eec <HAL_UART_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aba:	f000 f8a3 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200004d0 	.word	0x200004d0
 8001ac8:	40004400 	.word	0x40004400

08001acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad2:	f107 0310 	add.w	r3, r7, #16
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae0:	4b44      	ldr	r3, [pc, #272]	; (8001bf4 <MX_GPIO_Init+0x128>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a43      	ldr	r2, [pc, #268]	; (8001bf4 <MX_GPIO_Init+0x128>)
 8001ae6:	f043 0310 	orr.w	r3, r3, #16
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <MX_GPIO_Init+0x128>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af8:	4b3e      	ldr	r3, [pc, #248]	; (8001bf4 <MX_GPIO_Init+0x128>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a3d      	ldr	r2, [pc, #244]	; (8001bf4 <MX_GPIO_Init+0x128>)
 8001afe:	f043 0320 	orr.w	r3, r3, #32
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <MX_GPIO_Init+0x128>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0320 	and.w	r3, r3, #32
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <MX_GPIO_Init+0x128>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a37      	ldr	r2, [pc, #220]	; (8001bf4 <MX_GPIO_Init+0x128>)
 8001b16:	f043 0304 	orr.w	r3, r3, #4
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b35      	ldr	r3, [pc, #212]	; (8001bf4 <MX_GPIO_Init+0x128>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b28:	4b32      	ldr	r3, [pc, #200]	; (8001bf4 <MX_GPIO_Init+0x128>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a31      	ldr	r2, [pc, #196]	; (8001bf4 <MX_GPIO_Init+0x128>)
 8001b2e:	f043 0308 	orr.w	r3, r3, #8
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <MX_GPIO_Init+0x128>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LEDY1_A_Pin|LEDY1_B_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001b46:	482c      	ldr	r0, [pc, #176]	; (8001bf8 <MX_GPIO_Init+0x12c>)
 8001b48:	f000 fd1b 	bl	8002582 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WALK_Xb_Pin|LEDX1_A_Pin|WALK_Xa_Pin|LEDX1_B_Pin
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8001b52:	482a      	ldr	r0, [pc, #168]	; (8001bfc <MX_GPIO_Init+0x130>)
 8001b54:	f000 fd15 	bl	8002582 <HAL_GPIO_WritePin>
                          |WALK_Yb_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WALK_Ya_GPIO_Port, WALK_Ya_Pin, GPIO_PIN_RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2180      	movs	r1, #128	; 0x80
 8001b5c:	4828      	ldr	r0, [pc, #160]	; (8001c00 <MX_GPIO_Init+0x134>)
 8001b5e:	f000 fd10 	bl	8002582 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8001b62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	4619      	mov	r1, r3
 8001b76:	4822      	ldr	r0, [pc, #136]	; (8001c00 <MX_GPIO_Init+0x134>)
 8001b78:	f000 fb68 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	481a      	ldr	r0, [pc, #104]	; (8001bf8 <MX_GPIO_Init+0x12c>)
 8001b90:	f000 fb5c 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LEDY1_A_Pin LEDY1_B_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LEDY1_A_Pin|LEDY1_B_Pin;
 8001b94:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001b98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 0310 	add.w	r3, r7, #16
 8001baa:	4619      	mov	r1, r3
 8001bac:	4812      	ldr	r0, [pc, #72]	; (8001bf8 <MX_GPIO_Init+0x12c>)
 8001bae:	f000 fb4d 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : WALK_Xb_Pin LEDX1_A_Pin WALK_Xa_Pin LEDX1_B_Pin
                           WALK_Yb_Pin */
  GPIO_InitStruct.Pin = WALK_Xb_Pin|LEDX1_A_Pin|WALK_Xa_Pin|LEDX1_B_Pin
 8001bb2:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8001bb6:	613b      	str	r3, [r7, #16]
                          |WALK_Yb_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480c      	ldr	r0, [pc, #48]	; (8001bfc <MX_GPIO_Init+0x130>)
 8001bcc:	f000 fb3e 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : WALK_Ya_Pin */
  GPIO_InitStruct.Pin = WALK_Ya_Pin;
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WALK_Ya_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	4619      	mov	r1, r3
 8001be6:	4806      	ldr	r0, [pc, #24]	; (8001c00 <MX_GPIO_Init+0x134>)
 8001be8:	f000 fb30 	bl	800224c <HAL_GPIO_Init>

}
 8001bec:	bf00      	nop
 8001bee:	3720      	adds	r7, #32
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010800 	.word	0x40010800
 8001bfc:	40010c00 	.word	0x40010c00
 8001c00:	40011000 	.word	0x40011000

08001c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c08:	b672      	cpsid	i
}
 8001c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <Error_Handler+0x8>
	...

08001c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6193      	str	r3, [r2, #24]
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4a0e      	ldr	r2, [pc, #56]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	61d3      	str	r3, [r2, #28]
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_MspInit+0x60>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_MspInit+0x60>)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010000 	.word	0x40010000

08001c74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1d      	ldr	r2, [pc, #116]	; (8001d04 <HAL_I2C_MspInit+0x90>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d132      	bne.n	8001cfa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c94:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <HAL_I2C_MspInit+0x94>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a1b      	ldr	r2, [pc, #108]	; (8001d08 <HAL_I2C_MspInit+0x94>)
 8001c9a:	f043 0308 	orr.w	r3, r3, #8
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <HAL_I2C_MspInit+0x94>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb2:	2312      	movs	r3, #18
 8001cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4812      	ldr	r0, [pc, #72]	; (8001d0c <HAL_I2C_MspInit+0x98>)
 8001cc2:	f000 fac3 	bl	800224c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_I2C_MspInit+0x9c>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	f043 0302 	orr.w	r3, r3, #2
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <HAL_I2C_MspInit+0x9c>)
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_I2C_MspInit+0x94>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <HAL_I2C_MspInit+0x94>)
 8001ce8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cec:	61d3      	str	r3, [r2, #28]
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_I2C_MspInit+0x94>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cfa:	bf00      	nop
 8001cfc:	3728      	adds	r7, #40	; 0x28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40005400 	.word	0x40005400
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010c00 	.word	0x40010c00
 8001d10:	40010000 	.word	0x40010000

08001d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d24:	d113      	bne.n	8001d4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <HAL_TIM_Base_MspInit+0x44>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <HAL_TIM_Base_MspInit+0x44>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	61d3      	str	r3, [r2, #28]
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_TIM_Base_MspInit+0x44>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	201c      	movs	r0, #28
 8001d44:	f000 fa4b 	bl	80021de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d48:	201c      	movs	r0, #28
 8001d4a:	f000 fa64 	bl	8002216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000

08001d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a15      	ldr	r2, [pc, #84]	; (8001dcc <HAL_UART_MspInit+0x70>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d123      	bne.n	8001dc4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_UART_MspInit+0x74>)
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <HAL_UART_MspInit+0x74>)
 8001d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d86:	61d3      	str	r3, [r2, #28]
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_UART_MspInit+0x74>)
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_UART_MspInit+0x74>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <HAL_UART_MspInit+0x74>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_UART_MspInit+0x74>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dac:	230c      	movs	r3, #12
 8001dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2302      	movs	r3, #2
 8001db6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <HAL_UART_MspInit+0x78>)
 8001dc0:	f000 fa44 	bl	800224c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dc4:	bf00      	nop
 8001dc6:	3720      	adds	r7, #32
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40004400 	.word	0x40004400
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40010800 	.word	0x40010800

08001dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <NMI_Handler+0x4>

08001dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <HardFault_Handler+0x4>

08001de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <MemManage_Handler+0x4>

08001dea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dee:	e7fe      	b.n	8001dee <BusFault_Handler+0x4>

08001df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <UsageFault_Handler+0x4>

08001df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e1e:	f000 f8c7 	bl	8001fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <TIM2_IRQHandler+0x10>)
 8001e2e:	f001 fd0d 	bl	800384c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000488 	.word	0x20000488

08001e3c <_sbrk>:
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <_sbrk+0x5c>)
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <_sbrk+0x60>)
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <_sbrk+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <_sbrk+0x22>
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <_sbrk+0x64>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <_sbrk+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d207      	bcs.n	8001e7c <_sbrk+0x40>
 8001e6c:	f002 f91c 	bl	80040a8 <__errno>
 8001e70:	4603      	mov	r3, r0
 8001e72:	220c      	movs	r2, #12
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e009      	b.n	8001e90 <_sbrk+0x54>
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <_sbrk+0x64>)
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20005000 	.word	0x20005000
 8001e9c:	00000400 	.word	0x00000400
 8001ea0:	20000108 	.word	0x20000108
 8001ea4:	20000530 	.word	0x20000530

08001ea8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_TIM_PeriodElapsedCallback>:
 */
#include "main.h"
#include "timer.h"
#include "input_reading.h"
#include "Scheduler.h"
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec4:	d103      	bne.n	8001ece <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8001ec6:	f7ff f9d9 	bl	800127c <button_reading>
		SCH_Update();
 8001eca:	f7fe f969 	bl	80001a0 <SCH_Update>
	}
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <Reset_Handler>:
 8001ed8:	f7ff ffe6 	bl	8001ea8 <SystemInit>
 8001edc:	480b      	ldr	r0, [pc, #44]	; (8001f0c <LoopFillZerobss+0xe>)
 8001ede:	490c      	ldr	r1, [pc, #48]	; (8001f10 <LoopFillZerobss+0x12>)
 8001ee0:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <LoopFillZerobss+0x16>)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:
 8001ee6:	58d4      	ldr	r4, [r2, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:
 8001eec:	18c4      	adds	r4, r0, r3
 8001eee:	428c      	cmp	r4, r1
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
 8001ef2:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <LoopFillZerobss+0x1a>)
 8001ef4:	4c09      	ldr	r4, [pc, #36]	; (8001f1c <LoopFillZerobss+0x1e>)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:
 8001efe:	42a2      	cmp	r2, r4
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>
 8001f02:	f002 f8d7 	bl	80040b4 <__libc_init_array>
 8001f06:	f7ff fc77 	bl	80017f8 <main>
 8001f0a:	4770      	bx	lr
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	2000007c 	.word	0x2000007c
 8001f14:	08004a54 	.word	0x08004a54
 8001f18:	2000007c 	.word	0x2000007c
 8001f1c:	2000052c 	.word	0x2000052c

08001f20 <ADC1_2_IRQHandler>:
 8001f20:	e7fe      	b.n	8001f20 <ADC1_2_IRQHandler>
	...

08001f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_Init+0x28>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a07      	ldr	r2, [pc, #28]	; (8001f4c <HAL_Init+0x28>)
 8001f2e:	f043 0310 	orr.w	r3, r3, #16
 8001f32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f34:	2003      	movs	r0, #3
 8001f36:	f000 f947 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f000 f808 	bl	8001f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f40:	f7ff fe66 	bl	8001c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40022000 	.word	0x40022000

08001f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_InitTick+0x54>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_InitTick+0x58>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f95f 	bl	8002232 <HAL_SYSTICK_Config>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00e      	b.n	8001f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b0f      	cmp	r3, #15
 8001f82:	d80a      	bhi.n	8001f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f84:	2200      	movs	r2, #0
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f000 f927 	bl	80021de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f90:	4a06      	ldr	r2, [pc, #24]	; (8001fac <HAL_InitTick+0x5c>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e000      	b.n	8001f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	2000000c 	.word	0x2000000c
 8001fa8:	20000014 	.word	0x20000014
 8001fac:	20000010 	.word	0x20000010

08001fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_IncTick+0x1c>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_IncTick+0x20>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a03      	ldr	r2, [pc, #12]	; (8001fd0 <HAL_IncTick+0x20>)
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	20000014 	.word	0x20000014
 8001fd0:	20000518 	.word	0x20000518

08001fd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b02      	ldr	r3, [pc, #8]	; (8001fe4 <HAL_GetTick+0x10>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	20000518 	.word	0x20000518

08001fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff0:	f7ff fff0 	bl	8001fd4 <HAL_GetTick>
 8001ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002000:	d005      	beq.n	800200e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_Delay+0x44>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800200e:	bf00      	nop
 8002010:	f7ff ffe0 	bl	8001fd4 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	429a      	cmp	r2, r3
 800201e:	d8f7      	bhi.n	8002010 <HAL_Delay+0x28>
  {
  }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000014 	.word	0x20000014

08002030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800204c:	4013      	ands	r3, r2
 800204e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800205c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002062:	4a04      	ldr	r2, [pc, #16]	; (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	60d3      	str	r3, [r2, #12]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <__NVIC_GetPriorityGrouping+0x18>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	f003 0307 	and.w	r3, r3, #7
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	db0b      	blt.n	80020be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	f003 021f 	and.w	r2, r3, #31
 80020ac:	4906      	ldr	r1, [pc, #24]	; (80020c8 <__NVIC_EnableIRQ+0x34>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	2001      	movs	r0, #1
 80020b6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	e000e100 	.word	0xe000e100

080020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db0a      	blt.n	80020f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	490c      	ldr	r1, [pc, #48]	; (8002118 <__NVIC_SetPriority+0x4c>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f4:	e00a      	b.n	800210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4908      	ldr	r1, [pc, #32]	; (800211c <__NVIC_SetPriority+0x50>)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3b04      	subs	r3, #4
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	440b      	add	r3, r1
 800210a:	761a      	strb	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f1c3 0307 	rsb	r3, r3, #7
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf28      	it	cs
 800213e:	2304      	movcs	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3304      	adds	r3, #4
 8002146:	2b06      	cmp	r3, #6
 8002148:	d902      	bls.n	8002150 <NVIC_EncodePriority+0x30>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3b03      	subs	r3, #3
 800214e:	e000      	b.n	8002152 <NVIC_EncodePriority+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	f04f 32ff 	mov.w	r2, #4294967295
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	4313      	orrs	r3, r2
         );
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002194:	d301      	bcc.n	800219a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002196:	2301      	movs	r3, #1
 8002198:	e00f      	b.n	80021ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <SysTick_Config+0x40>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a2:	210f      	movs	r1, #15
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295
 80021a8:	f7ff ff90 	bl	80020cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <SysTick_Config+0x40>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <SysTick_Config+0x40>)
 80021b4:	2207      	movs	r2, #7
 80021b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010

080021c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff2d 	bl	8002030 <__NVIC_SetPriorityGrouping>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f0:	f7ff ff42 	bl	8002078 <__NVIC_GetPriorityGrouping>
 80021f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7ff ff90 	bl	8002120 <NVIC_EncodePriority>
 8002200:	4602      	mov	r2, r0
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff5f 	bl	80020cc <__NVIC_SetPriority>
}
 800220e:	bf00      	nop
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff35 	bl	8002094 <__NVIC_EnableIRQ>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ffa2 	bl	8002184 <SysTick_Config>
 8002240:	4603      	mov	r3, r0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800224c:	b480      	push	{r7}
 800224e:	b08b      	sub	sp, #44	; 0x2c
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225e:	e169      	b.n	8002534 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002260:	2201      	movs	r2, #1
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	429a      	cmp	r2, r3
 800227a:	f040 8158 	bne.w	800252e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4a9a      	ldr	r2, [pc, #616]	; (80024ec <HAL_GPIO_Init+0x2a0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d05e      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 8002288:	4a98      	ldr	r2, [pc, #608]	; (80024ec <HAL_GPIO_Init+0x2a0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d875      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 800228e:	4a98      	ldr	r2, [pc, #608]	; (80024f0 <HAL_GPIO_Init+0x2a4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d058      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 8002294:	4a96      	ldr	r2, [pc, #600]	; (80024f0 <HAL_GPIO_Init+0x2a4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d86f      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 800229a:	4a96      	ldr	r2, [pc, #600]	; (80024f4 <HAL_GPIO_Init+0x2a8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d052      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 80022a0:	4a94      	ldr	r2, [pc, #592]	; (80024f4 <HAL_GPIO_Init+0x2a8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d869      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 80022a6:	4a94      	ldr	r2, [pc, #592]	; (80024f8 <HAL_GPIO_Init+0x2ac>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d04c      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 80022ac:	4a92      	ldr	r2, [pc, #584]	; (80024f8 <HAL_GPIO_Init+0x2ac>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d863      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 80022b2:	4a92      	ldr	r2, [pc, #584]	; (80024fc <HAL_GPIO_Init+0x2b0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d046      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 80022b8:	4a90      	ldr	r2, [pc, #576]	; (80024fc <HAL_GPIO_Init+0x2b0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d85d      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 80022be:	2b12      	cmp	r3, #18
 80022c0:	d82a      	bhi.n	8002318 <HAL_GPIO_Init+0xcc>
 80022c2:	2b12      	cmp	r3, #18
 80022c4:	d859      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 80022c6:	a201      	add	r2, pc, #4	; (adr r2, 80022cc <HAL_GPIO_Init+0x80>)
 80022c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022cc:	08002347 	.word	0x08002347
 80022d0:	08002321 	.word	0x08002321
 80022d4:	08002333 	.word	0x08002333
 80022d8:	08002375 	.word	0x08002375
 80022dc:	0800237b 	.word	0x0800237b
 80022e0:	0800237b 	.word	0x0800237b
 80022e4:	0800237b 	.word	0x0800237b
 80022e8:	0800237b 	.word	0x0800237b
 80022ec:	0800237b 	.word	0x0800237b
 80022f0:	0800237b 	.word	0x0800237b
 80022f4:	0800237b 	.word	0x0800237b
 80022f8:	0800237b 	.word	0x0800237b
 80022fc:	0800237b 	.word	0x0800237b
 8002300:	0800237b 	.word	0x0800237b
 8002304:	0800237b 	.word	0x0800237b
 8002308:	0800237b 	.word	0x0800237b
 800230c:	0800237b 	.word	0x0800237b
 8002310:	08002329 	.word	0x08002329
 8002314:	0800233d 	.word	0x0800233d
 8002318:	4a79      	ldr	r2, [pc, #484]	; (8002500 <HAL_GPIO_Init+0x2b4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800231e:	e02c      	b.n	800237a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	623b      	str	r3, [r7, #32]
          break;
 8002326:	e029      	b.n	800237c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	3304      	adds	r3, #4
 800232e:	623b      	str	r3, [r7, #32]
          break;
 8002330:	e024      	b.n	800237c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	3308      	adds	r3, #8
 8002338:	623b      	str	r3, [r7, #32]
          break;
 800233a:	e01f      	b.n	800237c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	330c      	adds	r3, #12
 8002342:	623b      	str	r3, [r7, #32]
          break;
 8002344:	e01a      	b.n	800237c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d102      	bne.n	8002354 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800234e:	2304      	movs	r3, #4
 8002350:	623b      	str	r3, [r7, #32]
          break;
 8002352:	e013      	b.n	800237c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d105      	bne.n	8002368 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800235c:	2308      	movs	r3, #8
 800235e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	611a      	str	r2, [r3, #16]
          break;
 8002366:	e009      	b.n	800237c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002368:	2308      	movs	r3, #8
 800236a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	615a      	str	r2, [r3, #20]
          break;
 8002372:	e003      	b.n	800237c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002374:	2300      	movs	r3, #0
 8002376:	623b      	str	r3, [r7, #32]
          break;
 8002378:	e000      	b.n	800237c <HAL_GPIO_Init+0x130>
          break;
 800237a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2bff      	cmp	r3, #255	; 0xff
 8002380:	d801      	bhi.n	8002386 <HAL_GPIO_Init+0x13a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	e001      	b.n	800238a <HAL_GPIO_Init+0x13e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3304      	adds	r3, #4
 800238a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2bff      	cmp	r3, #255	; 0xff
 8002390:	d802      	bhi.n	8002398 <HAL_GPIO_Init+0x14c>
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	e002      	b.n	800239e <HAL_GPIO_Init+0x152>
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	3b08      	subs	r3, #8
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	210f      	movs	r1, #15
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	401a      	ands	r2, r3
 80023b0:	6a39      	ldr	r1, [r7, #32]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	431a      	orrs	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 80b1 	beq.w	800252e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023cc:	4b4d      	ldr	r3, [pc, #308]	; (8002504 <HAL_GPIO_Init+0x2b8>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	4a4c      	ldr	r2, [pc, #304]	; (8002504 <HAL_GPIO_Init+0x2b8>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6193      	str	r3, [r2, #24]
 80023d8:	4b4a      	ldr	r3, [pc, #296]	; (8002504 <HAL_GPIO_Init+0x2b8>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023e4:	4a48      	ldr	r2, [pc, #288]	; (8002508 <HAL_GPIO_Init+0x2bc>)
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	089b      	lsrs	r3, r3, #2
 80023ea:	3302      	adds	r3, #2
 80023ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	220f      	movs	r2, #15
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4013      	ands	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a40      	ldr	r2, [pc, #256]	; (800250c <HAL_GPIO_Init+0x2c0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d013      	beq.n	8002438 <HAL_GPIO_Init+0x1ec>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a3f      	ldr	r2, [pc, #252]	; (8002510 <HAL_GPIO_Init+0x2c4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00d      	beq.n	8002434 <HAL_GPIO_Init+0x1e8>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a3e      	ldr	r2, [pc, #248]	; (8002514 <HAL_GPIO_Init+0x2c8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d007      	beq.n	8002430 <HAL_GPIO_Init+0x1e4>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a3d      	ldr	r2, [pc, #244]	; (8002518 <HAL_GPIO_Init+0x2cc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d101      	bne.n	800242c <HAL_GPIO_Init+0x1e0>
 8002428:	2303      	movs	r3, #3
 800242a:	e006      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 800242c:	2304      	movs	r3, #4
 800242e:	e004      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 8002430:	2302      	movs	r3, #2
 8002432:	e002      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 8002438:	2300      	movs	r3, #0
 800243a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243c:	f002 0203 	and.w	r2, r2, #3
 8002440:	0092      	lsls	r2, r2, #2
 8002442:	4093      	lsls	r3, r2
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800244a:	492f      	ldr	r1, [pc, #188]	; (8002508 <HAL_GPIO_Init+0x2bc>)
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	089b      	lsrs	r3, r3, #2
 8002450:	3302      	adds	r3, #2
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d006      	beq.n	8002472 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002464:	4b2d      	ldr	r3, [pc, #180]	; (800251c <HAL_GPIO_Init+0x2d0>)
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	492c      	ldr	r1, [pc, #176]	; (800251c <HAL_GPIO_Init+0x2d0>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	608b      	str	r3, [r1, #8]
 8002470:	e006      	b.n	8002480 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002472:	4b2a      	ldr	r3, [pc, #168]	; (800251c <HAL_GPIO_Init+0x2d0>)
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	43db      	mvns	r3, r3
 800247a:	4928      	ldr	r1, [pc, #160]	; (800251c <HAL_GPIO_Init+0x2d0>)
 800247c:	4013      	ands	r3, r2
 800247e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d006      	beq.n	800249a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800248c:	4b23      	ldr	r3, [pc, #140]	; (800251c <HAL_GPIO_Init+0x2d0>)
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	4922      	ldr	r1, [pc, #136]	; (800251c <HAL_GPIO_Init+0x2d0>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	60cb      	str	r3, [r1, #12]
 8002498:	e006      	b.n	80024a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_GPIO_Init+0x2d0>)
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	491e      	ldr	r1, [pc, #120]	; (800251c <HAL_GPIO_Init+0x2d0>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_GPIO_Init+0x2d0>)
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	4918      	ldr	r1, [pc, #96]	; (800251c <HAL_GPIO_Init+0x2d0>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <HAL_GPIO_Init+0x2d0>)
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	4914      	ldr	r1, [pc, #80]	; (800251c <HAL_GPIO_Init+0x2d0>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d021      	beq.n	8002520 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_GPIO_Init+0x2d0>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	490e      	ldr	r1, [pc, #56]	; (800251c <HAL_GPIO_Init+0x2d0>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e021      	b.n	800252e <HAL_GPIO_Init+0x2e2>
 80024ea:	bf00      	nop
 80024ec:	10320000 	.word	0x10320000
 80024f0:	10310000 	.word	0x10310000
 80024f4:	10220000 	.word	0x10220000
 80024f8:	10210000 	.word	0x10210000
 80024fc:	10120000 	.word	0x10120000
 8002500:	10110000 	.word	0x10110000
 8002504:	40021000 	.word	0x40021000
 8002508:	40010000 	.word	0x40010000
 800250c:	40010800 	.word	0x40010800
 8002510:	40010c00 	.word	0x40010c00
 8002514:	40011000 	.word	0x40011000
 8002518:	40011400 	.word	0x40011400
 800251c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_GPIO_Init+0x304>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	43db      	mvns	r3, r3
 8002528:	4909      	ldr	r1, [pc, #36]	; (8002550 <HAL_GPIO_Init+0x304>)
 800252a:	4013      	ands	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	3301      	adds	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	fa22 f303 	lsr.w	r3, r2, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	f47f ae8e 	bne.w	8002260 <HAL_GPIO_Init+0x14>
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	372c      	adds	r7, #44	; 0x2c
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	40010400 	.word	0x40010400

08002554 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	887b      	ldrh	r3, [r7, #2]
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e001      	b.n	8002576 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	807b      	strh	r3, [r7, #2]
 800258e:	4613      	mov	r3, r2
 8002590:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002592:	787b      	ldrb	r3, [r7, #1]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002598:	887a      	ldrh	r2, [r7, #2]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800259e:	e003      	b.n	80025a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025a0:	887b      	ldrh	r3, [r7, #2]
 80025a2:	041a      	lsls	r2, r3, #16
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	611a      	str	r2, [r3, #16]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
	...

080025b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e12b      	b.n	800281e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff fb4a 	bl	8001c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2224      	movs	r2, #36	; 0x24
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002618:	f001 f830 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 800261c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4a81      	ldr	r2, [pc, #516]	; (8002828 <HAL_I2C_Init+0x274>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d807      	bhi.n	8002638 <HAL_I2C_Init+0x84>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4a80      	ldr	r2, [pc, #512]	; (800282c <HAL_I2C_Init+0x278>)
 800262c:	4293      	cmp	r3, r2
 800262e:	bf94      	ite	ls
 8002630:	2301      	movls	r3, #1
 8002632:	2300      	movhi	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	e006      	b.n	8002646 <HAL_I2C_Init+0x92>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4a7d      	ldr	r2, [pc, #500]	; (8002830 <HAL_I2C_Init+0x27c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	bf94      	ite	ls
 8002640:	2301      	movls	r3, #1
 8002642:	2300      	movhi	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e0e7      	b.n	800281e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4a78      	ldr	r2, [pc, #480]	; (8002834 <HAL_I2C_Init+0x280>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0c9b      	lsrs	r3, r3, #18
 8002658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	430a      	orrs	r2, r1
 800266c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a6a      	ldr	r2, [pc, #424]	; (8002828 <HAL_I2C_Init+0x274>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d802      	bhi.n	8002688 <HAL_I2C_Init+0xd4>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	3301      	adds	r3, #1
 8002686:	e009      	b.n	800269c <HAL_I2C_Init+0xe8>
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800268e:	fb02 f303 	mul.w	r3, r2, r3
 8002692:	4a69      	ldr	r2, [pc, #420]	; (8002838 <HAL_I2C_Init+0x284>)
 8002694:	fba2 2303 	umull	r2, r3, r2, r3
 8002698:	099b      	lsrs	r3, r3, #6
 800269a:	3301      	adds	r3, #1
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	430b      	orrs	r3, r1
 80026a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	495c      	ldr	r1, [pc, #368]	; (8002828 <HAL_I2C_Init+0x274>)
 80026b8:	428b      	cmp	r3, r1
 80026ba:	d819      	bhi.n	80026f0 <HAL_I2C_Init+0x13c>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1e59      	subs	r1, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ca:	1c59      	adds	r1, r3, #1
 80026cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026d0:	400b      	ands	r3, r1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_I2C_Init+0x138>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1e59      	subs	r1, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e4:	3301      	adds	r3, #1
 80026e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ea:	e051      	b.n	8002790 <HAL_I2C_Init+0x1dc>
 80026ec:	2304      	movs	r3, #4
 80026ee:	e04f      	b.n	8002790 <HAL_I2C_Init+0x1dc>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d111      	bne.n	800271c <HAL_I2C_Init+0x168>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1e58      	subs	r0, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	440b      	add	r3, r1
 8002706:	fbb0 f3f3 	udiv	r3, r0, r3
 800270a:	3301      	adds	r3, #1
 800270c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	e012      	b.n	8002742 <HAL_I2C_Init+0x18e>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1e58      	subs	r0, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	0099      	lsls	r1, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002732:	3301      	adds	r3, #1
 8002734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf0c      	ite	eq
 800273c:	2301      	moveq	r3, #1
 800273e:	2300      	movne	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Init+0x196>
 8002746:	2301      	movs	r3, #1
 8002748:	e022      	b.n	8002790 <HAL_I2C_Init+0x1dc>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10e      	bne.n	8002770 <HAL_I2C_Init+0x1bc>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1e58      	subs	r0, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6859      	ldr	r1, [r3, #4]
 800275a:	460b      	mov	r3, r1
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	440b      	add	r3, r1
 8002760:	fbb0 f3f3 	udiv	r3, r0, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800276e:	e00f      	b.n	8002790 <HAL_I2C_Init+0x1dc>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1e58      	subs	r0, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	0099      	lsls	r1, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	fbb0 f3f3 	udiv	r3, r0, r3
 8002786:	3301      	adds	r3, #1
 8002788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	6809      	ldr	r1, [r1, #0]
 8002794:	4313      	orrs	r3, r2
 8002796:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69da      	ldr	r2, [r3, #28]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6911      	ldr	r1, [r2, #16]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68d2      	ldr	r2, [r2, #12]
 80027ca:	4311      	orrs	r1, r2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	430b      	orrs	r3, r1
 80027d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	000186a0 	.word	0x000186a0
 800282c:	001e847f 	.word	0x001e847f
 8002830:	003d08ff 	.word	0x003d08ff
 8002834:	431bde83 	.word	0x431bde83
 8002838:	10624dd3 	.word	0x10624dd3

0800283c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af02      	add	r7, sp, #8
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	461a      	mov	r2, r3
 8002848:	460b      	mov	r3, r1
 800284a:	817b      	strh	r3, [r7, #10]
 800284c:	4613      	mov	r3, r2
 800284e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002850:	f7ff fbc0 	bl	8001fd4 <HAL_GetTick>
 8002854:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b20      	cmp	r3, #32
 8002860:	f040 80e0 	bne.w	8002a24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	2319      	movs	r3, #25
 800286a:	2201      	movs	r2, #1
 800286c:	4970      	ldr	r1, [pc, #448]	; (8002a30 <HAL_I2C_Master_Transmit+0x1f4>)
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 f964 	bl	8002b3c <I2C_WaitOnFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800287a:	2302      	movs	r3, #2
 800287c:	e0d3      	b.n	8002a26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_I2C_Master_Transmit+0x50>
 8002888:	2302      	movs	r3, #2
 800288a:	e0cc      	b.n	8002a26 <HAL_I2C_Master_Transmit+0x1ea>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d007      	beq.n	80028b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0201 	orr.w	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2221      	movs	r2, #33	; 0x21
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2210      	movs	r2, #16
 80028ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	893a      	ldrh	r2, [r7, #8]
 80028e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4a50      	ldr	r2, [pc, #320]	; (8002a34 <HAL_I2C_Master_Transmit+0x1f8>)
 80028f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028f4:	8979      	ldrh	r1, [r7, #10]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	6a3a      	ldr	r2, [r7, #32]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f89c 	bl	8002a38 <I2C_MasterRequestWrite>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e08d      	b.n	8002a26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002920:	e066      	b.n	80029f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	6a39      	ldr	r1, [r7, #32]
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 fa22 	bl	8002d70 <I2C_WaitOnTXEFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00d      	beq.n	800294e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	2b04      	cmp	r3, #4
 8002938:	d107      	bne.n	800294a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002948:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e06b      	b.n	8002a26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	781a      	ldrb	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b04      	cmp	r3, #4
 800298a:	d11b      	bne.n	80029c4 <HAL_I2C_Master_Transmit+0x188>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	2b00      	cmp	r3, #0
 8002992:	d017      	beq.n	80029c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	6a39      	ldr	r1, [r7, #32]
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fa19 	bl	8002e00 <I2C_WaitOnBTFFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00d      	beq.n	80029f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d107      	bne.n	80029ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e01a      	b.n	8002a26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d194      	bne.n	8002922 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	e000      	b.n	8002a26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a24:	2302      	movs	r3, #2
  }
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	00100002 	.word	0x00100002
 8002a34:	ffff0000 	.word	0xffff0000

08002a38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	460b      	mov	r3, r1
 8002a46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d006      	beq.n	8002a62 <I2C_MasterRequestWrite+0x2a>
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d003      	beq.n	8002a62 <I2C_MasterRequestWrite+0x2a>
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a60:	d108      	bne.n	8002a74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e00b      	b.n	8002a8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	2b12      	cmp	r3, #18
 8002a7a:	d107      	bne.n	8002a8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 f84f 	bl	8002b3c <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00d      	beq.n	8002ac0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab2:	d103      	bne.n	8002abc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e035      	b.n	8002b2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ac8:	d108      	bne.n	8002adc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aca:	897b      	ldrh	r3, [r7, #10]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ad8:	611a      	str	r2, [r3, #16]
 8002ada:	e01b      	b.n	8002b14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002adc:	897b      	ldrh	r3, [r7, #10]
 8002ade:	11db      	asrs	r3, r3, #7
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f003 0306 	and.w	r3, r3, #6
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f063 030f 	orn	r3, r3, #15
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	490e      	ldr	r1, [pc, #56]	; (8002b34 <I2C_MasterRequestWrite+0xfc>)
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f898 	bl	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e010      	b.n	8002b2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b0a:	897b      	ldrh	r3, [r7, #10]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	4907      	ldr	r1, [pc, #28]	; (8002b38 <I2C_MasterRequestWrite+0x100>)
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f888 	bl	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	00010008 	.word	0x00010008
 8002b38:	00010002 	.word	0x00010002

08002b3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b4c:	e048      	b.n	8002be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d044      	beq.n	8002be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b56:	f7ff fa3d 	bl	8001fd4 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d302      	bcc.n	8002b6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d139      	bne.n	8002be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	0c1b      	lsrs	r3, r3, #16
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d10d      	bne.n	8002b92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	43da      	mvns	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	4013      	ands	r3, r2
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf0c      	ite	eq
 8002b88:	2301      	moveq	r3, #1
 8002b8a:	2300      	movne	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	e00c      	b.n	8002bac <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	43da      	mvns	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf0c      	ite	eq
 8002ba4:	2301      	moveq	r3, #1
 8002ba6:	2300      	movne	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d116      	bne.n	8002be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	f043 0220 	orr.w	r2, r3, #32
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e023      	b.n	8002c28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	0c1b      	lsrs	r3, r3, #16
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d10d      	bne.n	8002c06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	43da      	mvns	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf0c      	ite	eq
 8002bfc:	2301      	moveq	r3, #1
 8002bfe:	2300      	movne	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	e00c      	b.n	8002c20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	43da      	mvns	r2, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	4013      	ands	r3, r2
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d093      	beq.n	8002b4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c3e:	e071      	b.n	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4e:	d123      	bne.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	f043 0204 	orr.w	r2, r3, #4
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e067      	b.n	8002d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9e:	d041      	beq.n	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca0:	f7ff f998 	bl	8001fd4 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d302      	bcc.n	8002cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d136      	bne.n	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d10c      	bne.n	8002cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bf14      	ite	ne
 8002cd2:	2301      	movne	r3, #1
 8002cd4:	2300      	moveq	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	e00b      	b.n	8002cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	43da      	mvns	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf14      	ite	ne
 8002cec:	2301      	movne	r3, #1
 8002cee:	2300      	moveq	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d016      	beq.n	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e021      	b.n	8002d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	0c1b      	lsrs	r3, r3, #16
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d10c      	bne.n	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	43da      	mvns	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf14      	ite	ne
 8002d40:	2301      	movne	r3, #1
 8002d42:	2300      	moveq	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	e00b      	b.n	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4013      	ands	r3, r2
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bf14      	ite	ne
 8002d5a:	2301      	movne	r3, #1
 8002d5c:	2300      	moveq	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f47f af6d 	bne.w	8002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d7c:	e034      	b.n	8002de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f886 	bl	8002e90 <I2C_IsAcknowledgeFailed>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e034      	b.n	8002df8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d94:	d028      	beq.n	8002de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d96:	f7ff f91d 	bl	8001fd4 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d302      	bcc.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d11d      	bne.n	8002de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b80      	cmp	r3, #128	; 0x80
 8002db8:	d016      	beq.n	8002de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	f043 0220 	orr.w	r2, r3, #32
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e007      	b.n	8002df8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df2:	2b80      	cmp	r3, #128	; 0x80
 8002df4:	d1c3      	bne.n	8002d7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e0c:	e034      	b.n	8002e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f83e 	bl	8002e90 <I2C_IsAcknowledgeFailed>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e034      	b.n	8002e88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d028      	beq.n	8002e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e26:	f7ff f8d5 	bl	8001fd4 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d11d      	bne.n	8002e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d016      	beq.n	8002e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e007      	b.n	8002e88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d1c3      	bne.n	8002e0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea6:	d11b      	bne.n	8002ee0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f043 0204 	orr.w	r2, r3, #4
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e26c      	b.n	80033d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 8087 	beq.w	800301a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f0c:	4b92      	ldr	r3, [pc, #584]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 030c 	and.w	r3, r3, #12
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d00c      	beq.n	8002f32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f18:	4b8f      	ldr	r3, [pc, #572]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d112      	bne.n	8002f4a <HAL_RCC_OscConfig+0x5e>
 8002f24:	4b8c      	ldr	r3, [pc, #560]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f30:	d10b      	bne.n	8002f4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f32:	4b89      	ldr	r3, [pc, #548]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d06c      	beq.n	8003018 <HAL_RCC_OscConfig+0x12c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d168      	bne.n	8003018 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e246      	b.n	80033d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f52:	d106      	bne.n	8002f62 <HAL_RCC_OscConfig+0x76>
 8002f54:	4b80      	ldr	r3, [pc, #512]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a7f      	ldr	r2, [pc, #508]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	e02e      	b.n	8002fc0 <HAL_RCC_OscConfig+0xd4>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x98>
 8002f6a:	4b7b      	ldr	r3, [pc, #492]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a7a      	ldr	r2, [pc, #488]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	4b78      	ldr	r3, [pc, #480]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a77      	ldr	r2, [pc, #476]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	e01d      	b.n	8002fc0 <HAL_RCC_OscConfig+0xd4>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0xbc>
 8002f8e:	4b72      	ldr	r3, [pc, #456]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a71      	ldr	r2, [pc, #452]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	4b6f      	ldr	r3, [pc, #444]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a6e      	ldr	r2, [pc, #440]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCC_OscConfig+0xd4>
 8002fa8:	4b6b      	ldr	r3, [pc, #428]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a6a      	ldr	r2, [pc, #424]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	4b68      	ldr	r3, [pc, #416]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a67      	ldr	r2, [pc, #412]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d013      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7ff f804 	bl	8001fd4 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7ff f800 	bl	8001fd4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e1fa      	b.n	80033d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	4b5d      	ldr	r3, [pc, #372]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0xe4>
 8002fee:	e014      	b.n	800301a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fe fff0 	bl	8001fd4 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7fe ffec 	bl	8001fd4 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e1e6      	b.n	80033d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x10c>
 8003016:	e000      	b.n	800301a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d063      	beq.n	80030ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003026:	4b4c      	ldr	r3, [pc, #304]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003032:	4b49      	ldr	r3, [pc, #292]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	2b08      	cmp	r3, #8
 800303c:	d11c      	bne.n	8003078 <HAL_RCC_OscConfig+0x18c>
 800303e:	4b46      	ldr	r3, [pc, #280]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d116      	bne.n	8003078 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	4b43      	ldr	r3, [pc, #268]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_RCC_OscConfig+0x176>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d001      	beq.n	8003062 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e1ba      	b.n	80033d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003062:	4b3d      	ldr	r3, [pc, #244]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4939      	ldr	r1, [pc, #228]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003076:	e03a      	b.n	80030ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d020      	beq.n	80030c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003080:	4b36      	ldr	r3, [pc, #216]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8003082:	2201      	movs	r2, #1
 8003084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003086:	f7fe ffa5 	bl	8001fd4 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308e:	f7fe ffa1 	bl	8001fd4 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e19b      	b.n	80033d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a0:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ac:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4927      	ldr	r1, [pc, #156]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]
 80030c0:	e015      	b.n	80030ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c2:	4b26      	ldr	r3, [pc, #152]	; (800315c <HAL_RCC_OscConfig+0x270>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fe ff84 	bl	8001fd4 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d0:	f7fe ff80 	bl	8001fd4 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e17a      	b.n	80033d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e2:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d03a      	beq.n	8003170 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d019      	beq.n	8003136 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003102:	4b17      	ldr	r3, [pc, #92]	; (8003160 <HAL_RCC_OscConfig+0x274>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003108:	f7fe ff64 	bl	8001fd4 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003110:	f7fe ff60 	bl	8001fd4 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e15a      	b.n	80033d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003122:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800312e:	2001      	movs	r0, #1
 8003130:	f000 facc 	bl	80036cc <RCC_Delay>
 8003134:	e01c      	b.n	8003170 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <HAL_RCC_OscConfig+0x274>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313c:	f7fe ff4a 	bl	8001fd4 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003142:	e00f      	b.n	8003164 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003144:	f7fe ff46 	bl	8001fd4 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d908      	bls.n	8003164 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e140      	b.n	80033d8 <HAL_RCC_OscConfig+0x4ec>
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000
 800315c:	42420000 	.word	0x42420000
 8003160:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003164:	4b9e      	ldr	r3, [pc, #632]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e9      	bne.n	8003144 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80a6 	beq.w	80032ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003182:	4b97      	ldr	r3, [pc, #604]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10d      	bne.n	80031aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	4b94      	ldr	r3, [pc, #592]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	4a93      	ldr	r2, [pc, #588]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003198:	61d3      	str	r3, [r2, #28]
 800319a:	4b91      	ldr	r3, [pc, #580]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031aa:	4b8e      	ldr	r3, [pc, #568]	; (80033e4 <HAL_RCC_OscConfig+0x4f8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d118      	bne.n	80031e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b6:	4b8b      	ldr	r3, [pc, #556]	; (80033e4 <HAL_RCC_OscConfig+0x4f8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a8a      	ldr	r2, [pc, #552]	; (80033e4 <HAL_RCC_OscConfig+0x4f8>)
 80031bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c2:	f7fe ff07 	bl	8001fd4 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ca:	f7fe ff03 	bl	8001fd4 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b64      	cmp	r3, #100	; 0x64
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e0fd      	b.n	80033d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	4b81      	ldr	r3, [pc, #516]	; (80033e4 <HAL_RCC_OscConfig+0x4f8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x312>
 80031f0:	4b7b      	ldr	r3, [pc, #492]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4a7a      	ldr	r2, [pc, #488]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6213      	str	r3, [r2, #32]
 80031fc:	e02d      	b.n	800325a <HAL_RCC_OscConfig+0x36e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x334>
 8003206:	4b76      	ldr	r3, [pc, #472]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	4a75      	ldr	r2, [pc, #468]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	6213      	str	r3, [r2, #32]
 8003212:	4b73      	ldr	r3, [pc, #460]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	4a72      	ldr	r2, [pc, #456]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 8003218:	f023 0304 	bic.w	r3, r3, #4
 800321c:	6213      	str	r3, [r2, #32]
 800321e:	e01c      	b.n	800325a <HAL_RCC_OscConfig+0x36e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b05      	cmp	r3, #5
 8003226:	d10c      	bne.n	8003242 <HAL_RCC_OscConfig+0x356>
 8003228:	4b6d      	ldr	r3, [pc, #436]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	4a6c      	ldr	r2, [pc, #432]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 800322e:	f043 0304 	orr.w	r3, r3, #4
 8003232:	6213      	str	r3, [r2, #32]
 8003234:	4b6a      	ldr	r3, [pc, #424]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	4a69      	ldr	r2, [pc, #420]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6213      	str	r3, [r2, #32]
 8003240:	e00b      	b.n	800325a <HAL_RCC_OscConfig+0x36e>
 8003242:	4b67      	ldr	r3, [pc, #412]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	4a66      	ldr	r2, [pc, #408]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	6213      	str	r3, [r2, #32]
 800324e:	4b64      	ldr	r3, [pc, #400]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	4a63      	ldr	r2, [pc, #396]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 8003254:	f023 0304 	bic.w	r3, r3, #4
 8003258:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d015      	beq.n	800328e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003262:	f7fe feb7 	bl	8001fd4 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fe feb3 	bl	8001fd4 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	; 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e0ab      	b.n	80033d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003280:	4b57      	ldr	r3, [pc, #348]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0ee      	beq.n	800326a <HAL_RCC_OscConfig+0x37e>
 800328c:	e014      	b.n	80032b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328e:	f7fe fea1 	bl	8001fd4 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003294:	e00a      	b.n	80032ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003296:	f7fe fe9d 	bl	8001fd4 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e095      	b.n	80033d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ac:	4b4c      	ldr	r3, [pc, #304]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1ee      	bne.n	8003296 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d105      	bne.n	80032ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032be:	4b48      	ldr	r3, [pc, #288]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	4a47      	ldr	r2, [pc, #284]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 80032c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8081 	beq.w	80033d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d4:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d061      	beq.n	80033a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d146      	bne.n	8003376 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e8:	4b3f      	ldr	r3, [pc, #252]	; (80033e8 <HAL_RCC_OscConfig+0x4fc>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ee:	f7fe fe71 	bl	8001fd4 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f6:	f7fe fe6d 	bl	8001fd4 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e067      	b.n	80033d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003308:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f0      	bne.n	80032f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331c:	d108      	bne.n	8003330 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800331e:	4b30      	ldr	r3, [pc, #192]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	492d      	ldr	r1, [pc, #180]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003330:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a19      	ldr	r1, [r3, #32]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	430b      	orrs	r3, r1
 8003342:	4927      	ldr	r1, [pc, #156]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003348:	4b27      	ldr	r3, [pc, #156]	; (80033e8 <HAL_RCC_OscConfig+0x4fc>)
 800334a:	2201      	movs	r2, #1
 800334c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334e:	f7fe fe41 	bl	8001fd4 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003356:	f7fe fe3d 	bl	8001fd4 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e037      	b.n	80033d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003368:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x46a>
 8003374:	e02f      	b.n	80033d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003376:	4b1c      	ldr	r3, [pc, #112]	; (80033e8 <HAL_RCC_OscConfig+0x4fc>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe fe2a 	bl	8001fd4 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003384:	f7fe fe26 	bl	8001fd4 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e020      	b.n	80033d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x498>
 80033a2:	e018      	b.n	80033d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e013      	b.n	80033d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCC_OscConfig+0x4f4>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d106      	bne.n	80033d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d001      	beq.n	80033d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40007000 	.word	0x40007000
 80033e8:	42420060 	.word	0x42420060

080033ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0d0      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003400:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCC_ClockConfig+0x1c0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d910      	bls.n	8003430 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340e:	4b67      	ldr	r3, [pc, #412]	; (80035ac <HAL_RCC_ClockConfig+0x1c0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 0207 	bic.w	r2, r3, #7
 8003416:	4965      	ldr	r1, [pc, #404]	; (80035ac <HAL_RCC_ClockConfig+0x1c0>)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	4313      	orrs	r3, r2
 800341c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	4b63      	ldr	r3, [pc, #396]	; (80035ac <HAL_RCC_ClockConfig+0x1c0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0b8      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d020      	beq.n	800347e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003448:	4b59      	ldr	r3, [pc, #356]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4a58      	ldr	r2, [pc, #352]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003452:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003460:	4b53      	ldr	r3, [pc, #332]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4a52      	ldr	r2, [pc, #328]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800346a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800346c:	4b50      	ldr	r3, [pc, #320]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	494d      	ldr	r1, [pc, #308]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 800347a:	4313      	orrs	r3, r2
 800347c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d040      	beq.n	800350c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003492:	4b47      	ldr	r3, [pc, #284]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d115      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e07f      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034aa:	4b41      	ldr	r3, [pc, #260]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e073      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ba:	4b3d      	ldr	r3, [pc, #244]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e06b      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ca:	4b39      	ldr	r3, [pc, #228]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f023 0203 	bic.w	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4936      	ldr	r1, [pc, #216]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034dc:	f7fe fd7a 	bl	8001fd4 <HAL_GetTick>
 80034e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e4:	f7fe fd76 	bl	8001fd4 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e053      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	4b2d      	ldr	r3, [pc, #180]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 020c 	and.w	r2, r3, #12
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	429a      	cmp	r2, r3
 800350a:	d1eb      	bne.n	80034e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800350c:	4b27      	ldr	r3, [pc, #156]	; (80035ac <HAL_RCC_ClockConfig+0x1c0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d210      	bcs.n	800353c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b24      	ldr	r3, [pc, #144]	; (80035ac <HAL_RCC_ClockConfig+0x1c0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 0207 	bic.w	r2, r3, #7
 8003522:	4922      	ldr	r1, [pc, #136]	; (80035ac <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352a:	4b20      	ldr	r3, [pc, #128]	; (80035ac <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e032      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003548:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4916      	ldr	r1, [pc, #88]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003556:	4313      	orrs	r3, r2
 8003558:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003566:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	490e      	ldr	r1, [pc, #56]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	4313      	orrs	r3, r2
 8003578:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800357a:	f000 f821 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 800357e:	4602      	mov	r2, r0
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	490a      	ldr	r1, [pc, #40]	; (80035b4 <HAL_RCC_ClockConfig+0x1c8>)
 800358c:	5ccb      	ldrb	r3, [r1, r3]
 800358e:	fa22 f303 	lsr.w	r3, r2, r3
 8003592:	4a09      	ldr	r2, [pc, #36]	; (80035b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_RCC_ClockConfig+0x1d0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe fcd8 	bl	8001f50 <HAL_InitTick>

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40022000 	.word	0x40022000
 80035b0:	40021000 	.word	0x40021000
 80035b4:	080049ec 	.word	0x080049ec
 80035b8:	2000000c 	.word	0x2000000c
 80035bc:	20000010 	.word	0x20000010

080035c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	2300      	movs	r3, #0
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035da:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <HAL_RCC_GetSysClockFreq+0x94>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 030c 	and.w	r3, r3, #12
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d002      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x30>
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d003      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x36>
 80035ee:	e027      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <HAL_RCC_GetSysClockFreq+0x98>)
 80035f2:	613b      	str	r3, [r7, #16]
      break;
 80035f4:	e027      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	0c9b      	lsrs	r3, r3, #18
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	4a17      	ldr	r2, [pc, #92]	; (800365c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003600:	5cd3      	ldrb	r3, [r2, r3]
 8003602:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d010      	beq.n	8003630 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800360e:	4b11      	ldr	r3, [pc, #68]	; (8003654 <HAL_RCC_GetSysClockFreq+0x94>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	0c5b      	lsrs	r3, r3, #17
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	4a11      	ldr	r2, [pc, #68]	; (8003660 <HAL_RCC_GetSysClockFreq+0xa0>)
 800361a:	5cd3      	ldrb	r3, [r2, r3]
 800361c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a0d      	ldr	r2, [pc, #52]	; (8003658 <HAL_RCC_GetSysClockFreq+0x98>)
 8003622:	fb02 f203 	mul.w	r2, r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	e004      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a0c      	ldr	r2, [pc, #48]	; (8003664 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003634:	fb02 f303 	mul.w	r3, r2, r3
 8003638:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	613b      	str	r3, [r7, #16]
      break;
 800363e:	e002      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCC_GetSysClockFreq+0x98>)
 8003642:	613b      	str	r3, [r7, #16]
      break;
 8003644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003646:	693b      	ldr	r3, [r7, #16]
}
 8003648:	4618      	mov	r0, r3
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40021000 	.word	0x40021000
 8003658:	007a1200 	.word	0x007a1200
 800365c:	08004a04 	.word	0x08004a04
 8003660:	08004a14 	.word	0x08004a14
 8003664:	003d0900 	.word	0x003d0900

08003668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800366c:	4b02      	ldr	r3, [pc, #8]	; (8003678 <HAL_RCC_GetHCLKFreq+0x10>)
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	2000000c 	.word	0x2000000c

0800367c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003680:	f7ff fff2 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	0a1b      	lsrs	r3, r3, #8
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4903      	ldr	r1, [pc, #12]	; (80036a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	080049fc 	.word	0x080049fc

080036a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036a8:	f7ff ffde 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	0adb      	lsrs	r3, r3, #11
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4903      	ldr	r1, [pc, #12]	; (80036c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000
 80036c8:	080049fc 	.word	0x080049fc

080036cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036d4:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <RCC_Delay+0x34>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <RCC_Delay+0x38>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	0a5b      	lsrs	r3, r3, #9
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036e8:	bf00      	nop
  }
  while (Delay --);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1e5a      	subs	r2, r3, #1
 80036ee:	60fa      	str	r2, [r7, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1f9      	bne.n	80036e8 <RCC_Delay+0x1c>
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	2000000c 	.word	0x2000000c
 8003704:	10624dd3 	.word	0x10624dd3

08003708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e041      	b.n	800379e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fe faf0 	bl	8001d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	4619      	mov	r1, r3
 8003746:	4610      	mov	r0, r2
 8003748:	f000 fa5c 	bl	8003c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d001      	beq.n	80037c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e03a      	b.n	8003836 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a18      	ldr	r2, [pc, #96]	; (8003840 <HAL_TIM_Base_Start_IT+0x98>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00e      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x58>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ea:	d009      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x58>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a14      	ldr	r2, [pc, #80]	; (8003844 <HAL_TIM_Base_Start_IT+0x9c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x58>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a13      	ldr	r2, [pc, #76]	; (8003848 <HAL_TIM_Base_Start_IT+0xa0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d111      	bne.n	8003824 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b06      	cmp	r3, #6
 8003810:	d010      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003822:	e007      	b.n	8003834 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800

0800384c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d020      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01b      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0202 	mvn.w	r2, #2
 8003880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f998 	bl	8003bcc <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f98b 	bl	8003bba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f99a 	bl	8003bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d020      	beq.n	80038fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01b      	beq.n	80038fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0204 	mvn.w	r2, #4
 80038cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2202      	movs	r2, #2
 80038d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f972 	bl	8003bcc <HAL_TIM_IC_CaptureCallback>
 80038e8:	e005      	b.n	80038f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f965 	bl	8003bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f974 	bl	8003bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d020      	beq.n	8003948 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d01b      	beq.n	8003948 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0208 	mvn.w	r2, #8
 8003918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2204      	movs	r2, #4
 800391e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f94c 	bl	8003bcc <HAL_TIM_IC_CaptureCallback>
 8003934:	e005      	b.n	8003942 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f93f 	bl	8003bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f94e 	bl	8003bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	2b00      	cmp	r3, #0
 8003950:	d020      	beq.n	8003994 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01b      	beq.n	8003994 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0210 	mvn.w	r2, #16
 8003964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2208      	movs	r2, #8
 800396a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f926 	bl	8003bcc <HAL_TIM_IC_CaptureCallback>
 8003980:	e005      	b.n	800398e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f919 	bl	8003bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f928 	bl	8003bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00c      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0201 	mvn.w	r2, #1
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fe fa7e 	bl	8001eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00c      	beq.n	80039dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fa7f 	bl	8003eda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00c      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d007      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f8f8 	bl	8003bf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00c      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0220 	mvn.w	r2, #32
 8003a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fa52 	bl	8003ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_TIM_ConfigClockSource+0x1c>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e0b4      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x186>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a80:	d03e      	beq.n	8003b00 <HAL_TIM_ConfigClockSource+0xd4>
 8003a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a86:	f200 8087 	bhi.w	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8e:	f000 8086 	beq.w	8003b9e <HAL_TIM_ConfigClockSource+0x172>
 8003a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a96:	d87f      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003a98:	2b70      	cmp	r3, #112	; 0x70
 8003a9a:	d01a      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0xa6>
 8003a9c:	2b70      	cmp	r3, #112	; 0x70
 8003a9e:	d87b      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa0:	2b60      	cmp	r3, #96	; 0x60
 8003aa2:	d050      	beq.n	8003b46 <HAL_TIM_ConfigClockSource+0x11a>
 8003aa4:	2b60      	cmp	r3, #96	; 0x60
 8003aa6:	d877      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa8:	2b50      	cmp	r3, #80	; 0x50
 8003aaa:	d03c      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0xfa>
 8003aac:	2b50      	cmp	r3, #80	; 0x50
 8003aae:	d873      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d058      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x13a>
 8003ab4:	2b40      	cmp	r3, #64	; 0x40
 8003ab6:	d86f      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab8:	2b30      	cmp	r3, #48	; 0x30
 8003aba:	d064      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x15a>
 8003abc:	2b30      	cmp	r3, #48	; 0x30
 8003abe:	d86b      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d060      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x15a>
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d867      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d05c      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x15a>
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d05a      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x15a>
 8003ad0:	e062      	b.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6899      	ldr	r1, [r3, #8]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f000 f974 	bl	8003dce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003af4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	609a      	str	r2, [r3, #8]
      break;
 8003afe:	e04f      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	6899      	ldr	r1, [r3, #8]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f000 f95d 	bl	8003dce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b22:	609a      	str	r2, [r3, #8]
      break;
 8003b24:	e03c      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	6859      	ldr	r1, [r3, #4]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	461a      	mov	r2, r3
 8003b34:	f000 f8d4 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2150      	movs	r1, #80	; 0x50
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 f92b 	bl	8003d9a <TIM_ITRx_SetConfig>
      break;
 8003b44:	e02c      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	6859      	ldr	r1, [r3, #4]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f000 f8f2 	bl	8003d3c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2160      	movs	r1, #96	; 0x60
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 f91b 	bl	8003d9a <TIM_ITRx_SetConfig>
      break;
 8003b64:	e01c      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6859      	ldr	r1, [r3, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	461a      	mov	r2, r3
 8003b74:	f000 f8b4 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2140      	movs	r1, #64	; 0x40
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 f90b 	bl	8003d9a <TIM_ITRx_SetConfig>
      break;
 8003b84:	e00c      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4610      	mov	r0, r2
 8003b92:	f000 f902 	bl	8003d9a <TIM_ITRx_SetConfig>
      break;
 8003b96:	e003      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b9c:	e000      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr

08003bde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr
	...

08003c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a2f      	ldr	r2, [pc, #188]	; (8003cd4 <TIM_Base_SetConfig+0xd0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00b      	beq.n	8003c34 <TIM_Base_SetConfig+0x30>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c22:	d007      	beq.n	8003c34 <TIM_Base_SetConfig+0x30>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a2c      	ldr	r2, [pc, #176]	; (8003cd8 <TIM_Base_SetConfig+0xd4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d003      	beq.n	8003c34 <TIM_Base_SetConfig+0x30>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a2b      	ldr	r2, [pc, #172]	; (8003cdc <TIM_Base_SetConfig+0xd8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d108      	bne.n	8003c46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a22      	ldr	r2, [pc, #136]	; (8003cd4 <TIM_Base_SetConfig+0xd0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00b      	beq.n	8003c66 <TIM_Base_SetConfig+0x62>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c54:	d007      	beq.n	8003c66 <TIM_Base_SetConfig+0x62>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a1f      	ldr	r2, [pc, #124]	; (8003cd8 <TIM_Base_SetConfig+0xd4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d003      	beq.n	8003c66 <TIM_Base_SetConfig+0x62>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <TIM_Base_SetConfig+0xd8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d108      	bne.n	8003c78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a0d      	ldr	r2, [pc, #52]	; (8003cd4 <TIM_Base_SetConfig+0xd0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d103      	bne.n	8003cac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f023 0201 	bic.w	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	611a      	str	r2, [r3, #16]
  }
}
 8003cca:	bf00      	nop
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40000800 	.word	0x40000800

08003ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 030a 	bic.w	r3, r3, #10
 8003d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	f023 0210 	bic.w	r2, r3, #16
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	031b      	lsls	r3, r3, #12
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	621a      	str	r2, [r3, #32]
}
 8003d90:	bf00      	nop
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr

08003d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f043 0307 	orr.w	r3, r3, #7
 8003dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	609a      	str	r2, [r3, #8]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr

08003dce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b087      	sub	sp, #28
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003de8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	021a      	lsls	r2, r3, #8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	431a      	orrs	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	609a      	str	r2, [r3, #8]
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bc80      	pop	{r7}
 8003e0a:	4770      	bx	lr

08003e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e046      	b.n	8003eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a16      	ldr	r2, [pc, #88]	; (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00e      	beq.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e70:	d009      	beq.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d004      	beq.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a10      	ldr	r2, [pc, #64]	; (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d10c      	bne.n	8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	40012c00 	.word	0x40012c00
 8003ec0:	40000400 	.word	0x40000400
 8003ec4:	40000800 	.word	0x40000800

08003ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e042      	b.n	8003f84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fd ff22 	bl	8001d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2224      	movs	r2, #36	; 0x24
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f82b 	bl	8003f8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003fc6:	f023 030c 	bic.w	r3, r3, #12
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	68b9      	ldr	r1, [r7, #8]
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a2c      	ldr	r2, [pc, #176]	; (80040a0 <UART_SetConfig+0x114>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d103      	bne.n	8003ffc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ff4:	f7ff fb56 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	e002      	b.n	8004002 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ffc:	f7ff fb3e 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 8004000:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	009a      	lsls	r2, r3, #2
 800400c:	441a      	add	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	4a22      	ldr	r2, [pc, #136]	; (80040a4 <UART_SetConfig+0x118>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	0119      	lsls	r1, r3, #4
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	009a      	lsls	r2, r3, #2
 800402c:	441a      	add	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	fbb2 f2f3 	udiv	r2, r2, r3
 8004038:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <UART_SetConfig+0x118>)
 800403a:	fba3 0302 	umull	r0, r3, r3, r2
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2064      	movs	r0, #100	; 0x64
 8004042:	fb00 f303 	mul.w	r3, r0, r3
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	3332      	adds	r3, #50	; 0x32
 800404c:	4a15      	ldr	r2, [pc, #84]	; (80040a4 <UART_SetConfig+0x118>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004058:	4419      	add	r1, r3
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	009a      	lsls	r2, r3, #2
 8004064:	441a      	add	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004070:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <UART_SetConfig+0x118>)
 8004072:	fba3 0302 	umull	r0, r3, r3, r2
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	2064      	movs	r0, #100	; 0x64
 800407a:	fb00 f303 	mul.w	r3, r0, r3
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	3332      	adds	r3, #50	; 0x32
 8004084:	4a07      	ldr	r2, [pc, #28]	; (80040a4 <UART_SetConfig+0x118>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	f003 020f 	and.w	r2, r3, #15
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	440a      	add	r2, r1
 8004096:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40013800 	.word	0x40013800
 80040a4:	51eb851f 	.word	0x51eb851f

080040a8 <__errno>:
 80040a8:	4b01      	ldr	r3, [pc, #4]	; (80040b0 <__errno+0x8>)
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20000018 	.word	0x20000018

080040b4 <__libc_init_array>:
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	2600      	movs	r6, #0
 80040b8:	4d0c      	ldr	r5, [pc, #48]	; (80040ec <__libc_init_array+0x38>)
 80040ba:	4c0d      	ldr	r4, [pc, #52]	; (80040f0 <__libc_init_array+0x3c>)
 80040bc:	1b64      	subs	r4, r4, r5
 80040be:	10a4      	asrs	r4, r4, #2
 80040c0:	42a6      	cmp	r6, r4
 80040c2:	d109      	bne.n	80040d8 <__libc_init_array+0x24>
 80040c4:	f000 fc5c 	bl	8004980 <_init>
 80040c8:	2600      	movs	r6, #0
 80040ca:	4d0a      	ldr	r5, [pc, #40]	; (80040f4 <__libc_init_array+0x40>)
 80040cc:	4c0a      	ldr	r4, [pc, #40]	; (80040f8 <__libc_init_array+0x44>)
 80040ce:	1b64      	subs	r4, r4, r5
 80040d0:	10a4      	asrs	r4, r4, #2
 80040d2:	42a6      	cmp	r6, r4
 80040d4:	d105      	bne.n	80040e2 <__libc_init_array+0x2e>
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040dc:	4798      	blx	r3
 80040de:	3601      	adds	r6, #1
 80040e0:	e7ee      	b.n	80040c0 <__libc_init_array+0xc>
 80040e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e6:	4798      	blx	r3
 80040e8:	3601      	adds	r6, #1
 80040ea:	e7f2      	b.n	80040d2 <__libc_init_array+0x1e>
 80040ec:	08004a4c 	.word	0x08004a4c
 80040f0:	08004a4c 	.word	0x08004a4c
 80040f4:	08004a4c 	.word	0x08004a4c
 80040f8:	08004a50 	.word	0x08004a50

080040fc <memset>:
 80040fc:	4603      	mov	r3, r0
 80040fe:	4402      	add	r2, r0
 8004100:	4293      	cmp	r3, r2
 8004102:	d100      	bne.n	8004106 <memset+0xa>
 8004104:	4770      	bx	lr
 8004106:	f803 1b01 	strb.w	r1, [r3], #1
 800410a:	e7f9      	b.n	8004100 <memset+0x4>

0800410c <siprintf>:
 800410c:	b40e      	push	{r1, r2, r3}
 800410e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004112:	b500      	push	{lr}
 8004114:	b09c      	sub	sp, #112	; 0x70
 8004116:	ab1d      	add	r3, sp, #116	; 0x74
 8004118:	9002      	str	r0, [sp, #8]
 800411a:	9006      	str	r0, [sp, #24]
 800411c:	9107      	str	r1, [sp, #28]
 800411e:	9104      	str	r1, [sp, #16]
 8004120:	4808      	ldr	r0, [pc, #32]	; (8004144 <siprintf+0x38>)
 8004122:	4909      	ldr	r1, [pc, #36]	; (8004148 <siprintf+0x3c>)
 8004124:	f853 2b04 	ldr.w	r2, [r3], #4
 8004128:	9105      	str	r1, [sp, #20]
 800412a:	6800      	ldr	r0, [r0, #0]
 800412c:	a902      	add	r1, sp, #8
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	f000 f868 	bl	8004204 <_svfiprintf_r>
 8004134:	2200      	movs	r2, #0
 8004136:	9b02      	ldr	r3, [sp, #8]
 8004138:	701a      	strb	r2, [r3, #0]
 800413a:	b01c      	add	sp, #112	; 0x70
 800413c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004140:	b003      	add	sp, #12
 8004142:	4770      	bx	lr
 8004144:	20000018 	.word	0x20000018
 8004148:	ffff0208 	.word	0xffff0208

0800414c <__ssputs_r>:
 800414c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004150:	688e      	ldr	r6, [r1, #8]
 8004152:	4682      	mov	sl, r0
 8004154:	429e      	cmp	r6, r3
 8004156:	460c      	mov	r4, r1
 8004158:	4690      	mov	r8, r2
 800415a:	461f      	mov	r7, r3
 800415c:	d838      	bhi.n	80041d0 <__ssputs_r+0x84>
 800415e:	898a      	ldrh	r2, [r1, #12]
 8004160:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004164:	d032      	beq.n	80041cc <__ssputs_r+0x80>
 8004166:	6825      	ldr	r5, [r4, #0]
 8004168:	6909      	ldr	r1, [r1, #16]
 800416a:	3301      	adds	r3, #1
 800416c:	eba5 0901 	sub.w	r9, r5, r1
 8004170:	6965      	ldr	r5, [r4, #20]
 8004172:	444b      	add	r3, r9
 8004174:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004178:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800417c:	106d      	asrs	r5, r5, #1
 800417e:	429d      	cmp	r5, r3
 8004180:	bf38      	it	cc
 8004182:	461d      	movcc	r5, r3
 8004184:	0553      	lsls	r3, r2, #21
 8004186:	d531      	bpl.n	80041ec <__ssputs_r+0xa0>
 8004188:	4629      	mov	r1, r5
 800418a:	f000 fb53 	bl	8004834 <_malloc_r>
 800418e:	4606      	mov	r6, r0
 8004190:	b950      	cbnz	r0, 80041a8 <__ssputs_r+0x5c>
 8004192:	230c      	movs	r3, #12
 8004194:	f04f 30ff 	mov.w	r0, #4294967295
 8004198:	f8ca 3000 	str.w	r3, [sl]
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a2:	81a3      	strh	r3, [r4, #12]
 80041a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a8:	464a      	mov	r2, r9
 80041aa:	6921      	ldr	r1, [r4, #16]
 80041ac:	f000 face 	bl	800474c <memcpy>
 80041b0:	89a3      	ldrh	r3, [r4, #12]
 80041b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ba:	81a3      	strh	r3, [r4, #12]
 80041bc:	6126      	str	r6, [r4, #16]
 80041be:	444e      	add	r6, r9
 80041c0:	6026      	str	r6, [r4, #0]
 80041c2:	463e      	mov	r6, r7
 80041c4:	6165      	str	r5, [r4, #20]
 80041c6:	eba5 0509 	sub.w	r5, r5, r9
 80041ca:	60a5      	str	r5, [r4, #8]
 80041cc:	42be      	cmp	r6, r7
 80041ce:	d900      	bls.n	80041d2 <__ssputs_r+0x86>
 80041d0:	463e      	mov	r6, r7
 80041d2:	4632      	mov	r2, r6
 80041d4:	4641      	mov	r1, r8
 80041d6:	6820      	ldr	r0, [r4, #0]
 80041d8:	f000 fac6 	bl	8004768 <memmove>
 80041dc:	68a3      	ldr	r3, [r4, #8]
 80041de:	6822      	ldr	r2, [r4, #0]
 80041e0:	1b9b      	subs	r3, r3, r6
 80041e2:	4432      	add	r2, r6
 80041e4:	2000      	movs	r0, #0
 80041e6:	60a3      	str	r3, [r4, #8]
 80041e8:	6022      	str	r2, [r4, #0]
 80041ea:	e7db      	b.n	80041a4 <__ssputs_r+0x58>
 80041ec:	462a      	mov	r2, r5
 80041ee:	f000 fb7b 	bl	80048e8 <_realloc_r>
 80041f2:	4606      	mov	r6, r0
 80041f4:	2800      	cmp	r0, #0
 80041f6:	d1e1      	bne.n	80041bc <__ssputs_r+0x70>
 80041f8:	4650      	mov	r0, sl
 80041fa:	6921      	ldr	r1, [r4, #16]
 80041fc:	f000 face 	bl	800479c <_free_r>
 8004200:	e7c7      	b.n	8004192 <__ssputs_r+0x46>
	...

08004204 <_svfiprintf_r>:
 8004204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004208:	4698      	mov	r8, r3
 800420a:	898b      	ldrh	r3, [r1, #12]
 800420c:	4607      	mov	r7, r0
 800420e:	061b      	lsls	r3, r3, #24
 8004210:	460d      	mov	r5, r1
 8004212:	4614      	mov	r4, r2
 8004214:	b09d      	sub	sp, #116	; 0x74
 8004216:	d50e      	bpl.n	8004236 <_svfiprintf_r+0x32>
 8004218:	690b      	ldr	r3, [r1, #16]
 800421a:	b963      	cbnz	r3, 8004236 <_svfiprintf_r+0x32>
 800421c:	2140      	movs	r1, #64	; 0x40
 800421e:	f000 fb09 	bl	8004834 <_malloc_r>
 8004222:	6028      	str	r0, [r5, #0]
 8004224:	6128      	str	r0, [r5, #16]
 8004226:	b920      	cbnz	r0, 8004232 <_svfiprintf_r+0x2e>
 8004228:	230c      	movs	r3, #12
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	f04f 30ff 	mov.w	r0, #4294967295
 8004230:	e0d1      	b.n	80043d6 <_svfiprintf_r+0x1d2>
 8004232:	2340      	movs	r3, #64	; 0x40
 8004234:	616b      	str	r3, [r5, #20]
 8004236:	2300      	movs	r3, #0
 8004238:	9309      	str	r3, [sp, #36]	; 0x24
 800423a:	2320      	movs	r3, #32
 800423c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004240:	2330      	movs	r3, #48	; 0x30
 8004242:	f04f 0901 	mov.w	r9, #1
 8004246:	f8cd 800c 	str.w	r8, [sp, #12]
 800424a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80043f0 <_svfiprintf_r+0x1ec>
 800424e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004252:	4623      	mov	r3, r4
 8004254:	469a      	mov	sl, r3
 8004256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800425a:	b10a      	cbz	r2, 8004260 <_svfiprintf_r+0x5c>
 800425c:	2a25      	cmp	r2, #37	; 0x25
 800425e:	d1f9      	bne.n	8004254 <_svfiprintf_r+0x50>
 8004260:	ebba 0b04 	subs.w	fp, sl, r4
 8004264:	d00b      	beq.n	800427e <_svfiprintf_r+0x7a>
 8004266:	465b      	mov	r3, fp
 8004268:	4622      	mov	r2, r4
 800426a:	4629      	mov	r1, r5
 800426c:	4638      	mov	r0, r7
 800426e:	f7ff ff6d 	bl	800414c <__ssputs_r>
 8004272:	3001      	adds	r0, #1
 8004274:	f000 80aa 	beq.w	80043cc <_svfiprintf_r+0x1c8>
 8004278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800427a:	445a      	add	r2, fp
 800427c:	9209      	str	r2, [sp, #36]	; 0x24
 800427e:	f89a 3000 	ldrb.w	r3, [sl]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80a2 	beq.w	80043cc <_svfiprintf_r+0x1c8>
 8004288:	2300      	movs	r3, #0
 800428a:	f04f 32ff 	mov.w	r2, #4294967295
 800428e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004292:	f10a 0a01 	add.w	sl, sl, #1
 8004296:	9304      	str	r3, [sp, #16]
 8004298:	9307      	str	r3, [sp, #28]
 800429a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800429e:	931a      	str	r3, [sp, #104]	; 0x68
 80042a0:	4654      	mov	r4, sl
 80042a2:	2205      	movs	r2, #5
 80042a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a8:	4851      	ldr	r0, [pc, #324]	; (80043f0 <_svfiprintf_r+0x1ec>)
 80042aa:	f000 fa41 	bl	8004730 <memchr>
 80042ae:	9a04      	ldr	r2, [sp, #16]
 80042b0:	b9d8      	cbnz	r0, 80042ea <_svfiprintf_r+0xe6>
 80042b2:	06d0      	lsls	r0, r2, #27
 80042b4:	bf44      	itt	mi
 80042b6:	2320      	movmi	r3, #32
 80042b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042bc:	0711      	lsls	r1, r2, #28
 80042be:	bf44      	itt	mi
 80042c0:	232b      	movmi	r3, #43	; 0x2b
 80042c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042c6:	f89a 3000 	ldrb.w	r3, [sl]
 80042ca:	2b2a      	cmp	r3, #42	; 0x2a
 80042cc:	d015      	beq.n	80042fa <_svfiprintf_r+0xf6>
 80042ce:	4654      	mov	r4, sl
 80042d0:	2000      	movs	r0, #0
 80042d2:	f04f 0c0a 	mov.w	ip, #10
 80042d6:	9a07      	ldr	r2, [sp, #28]
 80042d8:	4621      	mov	r1, r4
 80042da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042de:	3b30      	subs	r3, #48	; 0x30
 80042e0:	2b09      	cmp	r3, #9
 80042e2:	d94e      	bls.n	8004382 <_svfiprintf_r+0x17e>
 80042e4:	b1b0      	cbz	r0, 8004314 <_svfiprintf_r+0x110>
 80042e6:	9207      	str	r2, [sp, #28]
 80042e8:	e014      	b.n	8004314 <_svfiprintf_r+0x110>
 80042ea:	eba0 0308 	sub.w	r3, r0, r8
 80042ee:	fa09 f303 	lsl.w	r3, r9, r3
 80042f2:	4313      	orrs	r3, r2
 80042f4:	46a2      	mov	sl, r4
 80042f6:	9304      	str	r3, [sp, #16]
 80042f8:	e7d2      	b.n	80042a0 <_svfiprintf_r+0x9c>
 80042fa:	9b03      	ldr	r3, [sp, #12]
 80042fc:	1d19      	adds	r1, r3, #4
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	9103      	str	r1, [sp, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	bfbb      	ittet	lt
 8004306:	425b      	neglt	r3, r3
 8004308:	f042 0202 	orrlt.w	r2, r2, #2
 800430c:	9307      	strge	r3, [sp, #28]
 800430e:	9307      	strlt	r3, [sp, #28]
 8004310:	bfb8      	it	lt
 8004312:	9204      	strlt	r2, [sp, #16]
 8004314:	7823      	ldrb	r3, [r4, #0]
 8004316:	2b2e      	cmp	r3, #46	; 0x2e
 8004318:	d10c      	bne.n	8004334 <_svfiprintf_r+0x130>
 800431a:	7863      	ldrb	r3, [r4, #1]
 800431c:	2b2a      	cmp	r3, #42	; 0x2a
 800431e:	d135      	bne.n	800438c <_svfiprintf_r+0x188>
 8004320:	9b03      	ldr	r3, [sp, #12]
 8004322:	3402      	adds	r4, #2
 8004324:	1d1a      	adds	r2, r3, #4
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	9203      	str	r2, [sp, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	bfb8      	it	lt
 800432e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004332:	9305      	str	r3, [sp, #20]
 8004334:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004400 <_svfiprintf_r+0x1fc>
 8004338:	2203      	movs	r2, #3
 800433a:	4650      	mov	r0, sl
 800433c:	7821      	ldrb	r1, [r4, #0]
 800433e:	f000 f9f7 	bl	8004730 <memchr>
 8004342:	b140      	cbz	r0, 8004356 <_svfiprintf_r+0x152>
 8004344:	2340      	movs	r3, #64	; 0x40
 8004346:	eba0 000a 	sub.w	r0, r0, sl
 800434a:	fa03 f000 	lsl.w	r0, r3, r0
 800434e:	9b04      	ldr	r3, [sp, #16]
 8004350:	3401      	adds	r4, #1
 8004352:	4303      	orrs	r3, r0
 8004354:	9304      	str	r3, [sp, #16]
 8004356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800435a:	2206      	movs	r2, #6
 800435c:	4825      	ldr	r0, [pc, #148]	; (80043f4 <_svfiprintf_r+0x1f0>)
 800435e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004362:	f000 f9e5 	bl	8004730 <memchr>
 8004366:	2800      	cmp	r0, #0
 8004368:	d038      	beq.n	80043dc <_svfiprintf_r+0x1d8>
 800436a:	4b23      	ldr	r3, [pc, #140]	; (80043f8 <_svfiprintf_r+0x1f4>)
 800436c:	bb1b      	cbnz	r3, 80043b6 <_svfiprintf_r+0x1b2>
 800436e:	9b03      	ldr	r3, [sp, #12]
 8004370:	3307      	adds	r3, #7
 8004372:	f023 0307 	bic.w	r3, r3, #7
 8004376:	3308      	adds	r3, #8
 8004378:	9303      	str	r3, [sp, #12]
 800437a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800437c:	4433      	add	r3, r6
 800437e:	9309      	str	r3, [sp, #36]	; 0x24
 8004380:	e767      	b.n	8004252 <_svfiprintf_r+0x4e>
 8004382:	460c      	mov	r4, r1
 8004384:	2001      	movs	r0, #1
 8004386:	fb0c 3202 	mla	r2, ip, r2, r3
 800438a:	e7a5      	b.n	80042d8 <_svfiprintf_r+0xd4>
 800438c:	2300      	movs	r3, #0
 800438e:	f04f 0c0a 	mov.w	ip, #10
 8004392:	4619      	mov	r1, r3
 8004394:	3401      	adds	r4, #1
 8004396:	9305      	str	r3, [sp, #20]
 8004398:	4620      	mov	r0, r4
 800439a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800439e:	3a30      	subs	r2, #48	; 0x30
 80043a0:	2a09      	cmp	r2, #9
 80043a2:	d903      	bls.n	80043ac <_svfiprintf_r+0x1a8>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0c5      	beq.n	8004334 <_svfiprintf_r+0x130>
 80043a8:	9105      	str	r1, [sp, #20]
 80043aa:	e7c3      	b.n	8004334 <_svfiprintf_r+0x130>
 80043ac:	4604      	mov	r4, r0
 80043ae:	2301      	movs	r3, #1
 80043b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80043b4:	e7f0      	b.n	8004398 <_svfiprintf_r+0x194>
 80043b6:	ab03      	add	r3, sp, #12
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	462a      	mov	r2, r5
 80043bc:	4638      	mov	r0, r7
 80043be:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <_svfiprintf_r+0x1f8>)
 80043c0:	a904      	add	r1, sp, #16
 80043c2:	f3af 8000 	nop.w
 80043c6:	1c42      	adds	r2, r0, #1
 80043c8:	4606      	mov	r6, r0
 80043ca:	d1d6      	bne.n	800437a <_svfiprintf_r+0x176>
 80043cc:	89ab      	ldrh	r3, [r5, #12]
 80043ce:	065b      	lsls	r3, r3, #25
 80043d0:	f53f af2c 	bmi.w	800422c <_svfiprintf_r+0x28>
 80043d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043d6:	b01d      	add	sp, #116	; 0x74
 80043d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043dc:	ab03      	add	r3, sp, #12
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	462a      	mov	r2, r5
 80043e2:	4638      	mov	r0, r7
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <_svfiprintf_r+0x1f8>)
 80043e6:	a904      	add	r1, sp, #16
 80043e8:	f000 f87c 	bl	80044e4 <_printf_i>
 80043ec:	e7eb      	b.n	80043c6 <_svfiprintf_r+0x1c2>
 80043ee:	bf00      	nop
 80043f0:	08004a16 	.word	0x08004a16
 80043f4:	08004a20 	.word	0x08004a20
 80043f8:	00000000 	.word	0x00000000
 80043fc:	0800414d 	.word	0x0800414d
 8004400:	08004a1c 	.word	0x08004a1c

08004404 <_printf_common>:
 8004404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004408:	4616      	mov	r6, r2
 800440a:	4699      	mov	r9, r3
 800440c:	688a      	ldr	r2, [r1, #8]
 800440e:	690b      	ldr	r3, [r1, #16]
 8004410:	4607      	mov	r7, r0
 8004412:	4293      	cmp	r3, r2
 8004414:	bfb8      	it	lt
 8004416:	4613      	movlt	r3, r2
 8004418:	6033      	str	r3, [r6, #0]
 800441a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800441e:	460c      	mov	r4, r1
 8004420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004424:	b10a      	cbz	r2, 800442a <_printf_common+0x26>
 8004426:	3301      	adds	r3, #1
 8004428:	6033      	str	r3, [r6, #0]
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	0699      	lsls	r1, r3, #26
 800442e:	bf42      	ittt	mi
 8004430:	6833      	ldrmi	r3, [r6, #0]
 8004432:	3302      	addmi	r3, #2
 8004434:	6033      	strmi	r3, [r6, #0]
 8004436:	6825      	ldr	r5, [r4, #0]
 8004438:	f015 0506 	ands.w	r5, r5, #6
 800443c:	d106      	bne.n	800444c <_printf_common+0x48>
 800443e:	f104 0a19 	add.w	sl, r4, #25
 8004442:	68e3      	ldr	r3, [r4, #12]
 8004444:	6832      	ldr	r2, [r6, #0]
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	42ab      	cmp	r3, r5
 800444a:	dc28      	bgt.n	800449e <_printf_common+0x9a>
 800444c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004450:	1e13      	subs	r3, r2, #0
 8004452:	6822      	ldr	r2, [r4, #0]
 8004454:	bf18      	it	ne
 8004456:	2301      	movne	r3, #1
 8004458:	0692      	lsls	r2, r2, #26
 800445a:	d42d      	bmi.n	80044b8 <_printf_common+0xb4>
 800445c:	4649      	mov	r1, r9
 800445e:	4638      	mov	r0, r7
 8004460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004464:	47c0      	blx	r8
 8004466:	3001      	adds	r0, #1
 8004468:	d020      	beq.n	80044ac <_printf_common+0xa8>
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	68e5      	ldr	r5, [r4, #12]
 800446e:	f003 0306 	and.w	r3, r3, #6
 8004472:	2b04      	cmp	r3, #4
 8004474:	bf18      	it	ne
 8004476:	2500      	movne	r5, #0
 8004478:	6832      	ldr	r2, [r6, #0]
 800447a:	f04f 0600 	mov.w	r6, #0
 800447e:	68a3      	ldr	r3, [r4, #8]
 8004480:	bf08      	it	eq
 8004482:	1aad      	subeq	r5, r5, r2
 8004484:	6922      	ldr	r2, [r4, #16]
 8004486:	bf08      	it	eq
 8004488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800448c:	4293      	cmp	r3, r2
 800448e:	bfc4      	itt	gt
 8004490:	1a9b      	subgt	r3, r3, r2
 8004492:	18ed      	addgt	r5, r5, r3
 8004494:	341a      	adds	r4, #26
 8004496:	42b5      	cmp	r5, r6
 8004498:	d11a      	bne.n	80044d0 <_printf_common+0xcc>
 800449a:	2000      	movs	r0, #0
 800449c:	e008      	b.n	80044b0 <_printf_common+0xac>
 800449e:	2301      	movs	r3, #1
 80044a0:	4652      	mov	r2, sl
 80044a2:	4649      	mov	r1, r9
 80044a4:	4638      	mov	r0, r7
 80044a6:	47c0      	blx	r8
 80044a8:	3001      	adds	r0, #1
 80044aa:	d103      	bne.n	80044b4 <_printf_common+0xb0>
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295
 80044b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b4:	3501      	adds	r5, #1
 80044b6:	e7c4      	b.n	8004442 <_printf_common+0x3e>
 80044b8:	2030      	movs	r0, #48	; 0x30
 80044ba:	18e1      	adds	r1, r4, r3
 80044bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044c6:	4422      	add	r2, r4
 80044c8:	3302      	adds	r3, #2
 80044ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044ce:	e7c5      	b.n	800445c <_printf_common+0x58>
 80044d0:	2301      	movs	r3, #1
 80044d2:	4622      	mov	r2, r4
 80044d4:	4649      	mov	r1, r9
 80044d6:	4638      	mov	r0, r7
 80044d8:	47c0      	blx	r8
 80044da:	3001      	adds	r0, #1
 80044dc:	d0e6      	beq.n	80044ac <_printf_common+0xa8>
 80044de:	3601      	adds	r6, #1
 80044e0:	e7d9      	b.n	8004496 <_printf_common+0x92>
	...

080044e4 <_printf_i>:
 80044e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044e8:	460c      	mov	r4, r1
 80044ea:	7e27      	ldrb	r7, [r4, #24]
 80044ec:	4691      	mov	r9, r2
 80044ee:	2f78      	cmp	r7, #120	; 0x78
 80044f0:	4680      	mov	r8, r0
 80044f2:	469a      	mov	sl, r3
 80044f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80044f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044fa:	d807      	bhi.n	800450c <_printf_i+0x28>
 80044fc:	2f62      	cmp	r7, #98	; 0x62
 80044fe:	d80a      	bhi.n	8004516 <_printf_i+0x32>
 8004500:	2f00      	cmp	r7, #0
 8004502:	f000 80d9 	beq.w	80046b8 <_printf_i+0x1d4>
 8004506:	2f58      	cmp	r7, #88	; 0x58
 8004508:	f000 80a4 	beq.w	8004654 <_printf_i+0x170>
 800450c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004514:	e03a      	b.n	800458c <_printf_i+0xa8>
 8004516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800451a:	2b15      	cmp	r3, #21
 800451c:	d8f6      	bhi.n	800450c <_printf_i+0x28>
 800451e:	a001      	add	r0, pc, #4	; (adr r0, 8004524 <_printf_i+0x40>)
 8004520:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004524:	0800457d 	.word	0x0800457d
 8004528:	08004591 	.word	0x08004591
 800452c:	0800450d 	.word	0x0800450d
 8004530:	0800450d 	.word	0x0800450d
 8004534:	0800450d 	.word	0x0800450d
 8004538:	0800450d 	.word	0x0800450d
 800453c:	08004591 	.word	0x08004591
 8004540:	0800450d 	.word	0x0800450d
 8004544:	0800450d 	.word	0x0800450d
 8004548:	0800450d 	.word	0x0800450d
 800454c:	0800450d 	.word	0x0800450d
 8004550:	0800469f 	.word	0x0800469f
 8004554:	080045c1 	.word	0x080045c1
 8004558:	08004681 	.word	0x08004681
 800455c:	0800450d 	.word	0x0800450d
 8004560:	0800450d 	.word	0x0800450d
 8004564:	080046c1 	.word	0x080046c1
 8004568:	0800450d 	.word	0x0800450d
 800456c:	080045c1 	.word	0x080045c1
 8004570:	0800450d 	.word	0x0800450d
 8004574:	0800450d 	.word	0x0800450d
 8004578:	08004689 	.word	0x08004689
 800457c:	680b      	ldr	r3, [r1, #0]
 800457e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004582:	1d1a      	adds	r2, r3, #4
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	600a      	str	r2, [r1, #0]
 8004588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800458c:	2301      	movs	r3, #1
 800458e:	e0a4      	b.n	80046da <_printf_i+0x1f6>
 8004590:	6825      	ldr	r5, [r4, #0]
 8004592:	6808      	ldr	r0, [r1, #0]
 8004594:	062e      	lsls	r6, r5, #24
 8004596:	f100 0304 	add.w	r3, r0, #4
 800459a:	d50a      	bpl.n	80045b2 <_printf_i+0xce>
 800459c:	6805      	ldr	r5, [r0, #0]
 800459e:	600b      	str	r3, [r1, #0]
 80045a0:	2d00      	cmp	r5, #0
 80045a2:	da03      	bge.n	80045ac <_printf_i+0xc8>
 80045a4:	232d      	movs	r3, #45	; 0x2d
 80045a6:	426d      	negs	r5, r5
 80045a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ac:	230a      	movs	r3, #10
 80045ae:	485e      	ldr	r0, [pc, #376]	; (8004728 <_printf_i+0x244>)
 80045b0:	e019      	b.n	80045e6 <_printf_i+0x102>
 80045b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80045b6:	6805      	ldr	r5, [r0, #0]
 80045b8:	600b      	str	r3, [r1, #0]
 80045ba:	bf18      	it	ne
 80045bc:	b22d      	sxthne	r5, r5
 80045be:	e7ef      	b.n	80045a0 <_printf_i+0xbc>
 80045c0:	680b      	ldr	r3, [r1, #0]
 80045c2:	6825      	ldr	r5, [r4, #0]
 80045c4:	1d18      	adds	r0, r3, #4
 80045c6:	6008      	str	r0, [r1, #0]
 80045c8:	0628      	lsls	r0, r5, #24
 80045ca:	d501      	bpl.n	80045d0 <_printf_i+0xec>
 80045cc:	681d      	ldr	r5, [r3, #0]
 80045ce:	e002      	b.n	80045d6 <_printf_i+0xf2>
 80045d0:	0669      	lsls	r1, r5, #25
 80045d2:	d5fb      	bpl.n	80045cc <_printf_i+0xe8>
 80045d4:	881d      	ldrh	r5, [r3, #0]
 80045d6:	2f6f      	cmp	r7, #111	; 0x6f
 80045d8:	bf0c      	ite	eq
 80045da:	2308      	moveq	r3, #8
 80045dc:	230a      	movne	r3, #10
 80045de:	4852      	ldr	r0, [pc, #328]	; (8004728 <_printf_i+0x244>)
 80045e0:	2100      	movs	r1, #0
 80045e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045e6:	6866      	ldr	r6, [r4, #4]
 80045e8:	2e00      	cmp	r6, #0
 80045ea:	bfa8      	it	ge
 80045ec:	6821      	ldrge	r1, [r4, #0]
 80045ee:	60a6      	str	r6, [r4, #8]
 80045f0:	bfa4      	itt	ge
 80045f2:	f021 0104 	bicge.w	r1, r1, #4
 80045f6:	6021      	strge	r1, [r4, #0]
 80045f8:	b90d      	cbnz	r5, 80045fe <_printf_i+0x11a>
 80045fa:	2e00      	cmp	r6, #0
 80045fc:	d04d      	beq.n	800469a <_printf_i+0x1b6>
 80045fe:	4616      	mov	r6, r2
 8004600:	fbb5 f1f3 	udiv	r1, r5, r3
 8004604:	fb03 5711 	mls	r7, r3, r1, r5
 8004608:	5dc7      	ldrb	r7, [r0, r7]
 800460a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800460e:	462f      	mov	r7, r5
 8004610:	42bb      	cmp	r3, r7
 8004612:	460d      	mov	r5, r1
 8004614:	d9f4      	bls.n	8004600 <_printf_i+0x11c>
 8004616:	2b08      	cmp	r3, #8
 8004618:	d10b      	bne.n	8004632 <_printf_i+0x14e>
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	07df      	lsls	r7, r3, #31
 800461e:	d508      	bpl.n	8004632 <_printf_i+0x14e>
 8004620:	6923      	ldr	r3, [r4, #16]
 8004622:	6861      	ldr	r1, [r4, #4]
 8004624:	4299      	cmp	r1, r3
 8004626:	bfde      	ittt	le
 8004628:	2330      	movle	r3, #48	; 0x30
 800462a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800462e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004632:	1b92      	subs	r2, r2, r6
 8004634:	6122      	str	r2, [r4, #16]
 8004636:	464b      	mov	r3, r9
 8004638:	4621      	mov	r1, r4
 800463a:	4640      	mov	r0, r8
 800463c:	f8cd a000 	str.w	sl, [sp]
 8004640:	aa03      	add	r2, sp, #12
 8004642:	f7ff fedf 	bl	8004404 <_printf_common>
 8004646:	3001      	adds	r0, #1
 8004648:	d14c      	bne.n	80046e4 <_printf_i+0x200>
 800464a:	f04f 30ff 	mov.w	r0, #4294967295
 800464e:	b004      	add	sp, #16
 8004650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004654:	4834      	ldr	r0, [pc, #208]	; (8004728 <_printf_i+0x244>)
 8004656:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800465a:	680e      	ldr	r6, [r1, #0]
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004662:	061f      	lsls	r7, r3, #24
 8004664:	600e      	str	r6, [r1, #0]
 8004666:	d514      	bpl.n	8004692 <_printf_i+0x1ae>
 8004668:	07d9      	lsls	r1, r3, #31
 800466a:	bf44      	itt	mi
 800466c:	f043 0320 	orrmi.w	r3, r3, #32
 8004670:	6023      	strmi	r3, [r4, #0]
 8004672:	b91d      	cbnz	r5, 800467c <_printf_i+0x198>
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	f023 0320 	bic.w	r3, r3, #32
 800467a:	6023      	str	r3, [r4, #0]
 800467c:	2310      	movs	r3, #16
 800467e:	e7af      	b.n	80045e0 <_printf_i+0xfc>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	f043 0320 	orr.w	r3, r3, #32
 8004686:	6023      	str	r3, [r4, #0]
 8004688:	2378      	movs	r3, #120	; 0x78
 800468a:	4828      	ldr	r0, [pc, #160]	; (800472c <_printf_i+0x248>)
 800468c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004690:	e7e3      	b.n	800465a <_printf_i+0x176>
 8004692:	065e      	lsls	r6, r3, #25
 8004694:	bf48      	it	mi
 8004696:	b2ad      	uxthmi	r5, r5
 8004698:	e7e6      	b.n	8004668 <_printf_i+0x184>
 800469a:	4616      	mov	r6, r2
 800469c:	e7bb      	b.n	8004616 <_printf_i+0x132>
 800469e:	680b      	ldr	r3, [r1, #0]
 80046a0:	6826      	ldr	r6, [r4, #0]
 80046a2:	1d1d      	adds	r5, r3, #4
 80046a4:	6960      	ldr	r0, [r4, #20]
 80046a6:	600d      	str	r5, [r1, #0]
 80046a8:	0635      	lsls	r5, r6, #24
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	d501      	bpl.n	80046b2 <_printf_i+0x1ce>
 80046ae:	6018      	str	r0, [r3, #0]
 80046b0:	e002      	b.n	80046b8 <_printf_i+0x1d4>
 80046b2:	0671      	lsls	r1, r6, #25
 80046b4:	d5fb      	bpl.n	80046ae <_printf_i+0x1ca>
 80046b6:	8018      	strh	r0, [r3, #0]
 80046b8:	2300      	movs	r3, #0
 80046ba:	4616      	mov	r6, r2
 80046bc:	6123      	str	r3, [r4, #16]
 80046be:	e7ba      	b.n	8004636 <_printf_i+0x152>
 80046c0:	680b      	ldr	r3, [r1, #0]
 80046c2:	1d1a      	adds	r2, r3, #4
 80046c4:	600a      	str	r2, [r1, #0]
 80046c6:	681e      	ldr	r6, [r3, #0]
 80046c8:	2100      	movs	r1, #0
 80046ca:	4630      	mov	r0, r6
 80046cc:	6862      	ldr	r2, [r4, #4]
 80046ce:	f000 f82f 	bl	8004730 <memchr>
 80046d2:	b108      	cbz	r0, 80046d8 <_printf_i+0x1f4>
 80046d4:	1b80      	subs	r0, r0, r6
 80046d6:	6060      	str	r0, [r4, #4]
 80046d8:	6863      	ldr	r3, [r4, #4]
 80046da:	6123      	str	r3, [r4, #16]
 80046dc:	2300      	movs	r3, #0
 80046de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046e2:	e7a8      	b.n	8004636 <_printf_i+0x152>
 80046e4:	4632      	mov	r2, r6
 80046e6:	4649      	mov	r1, r9
 80046e8:	4640      	mov	r0, r8
 80046ea:	6923      	ldr	r3, [r4, #16]
 80046ec:	47d0      	blx	sl
 80046ee:	3001      	adds	r0, #1
 80046f0:	d0ab      	beq.n	800464a <_printf_i+0x166>
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	079b      	lsls	r3, r3, #30
 80046f6:	d413      	bmi.n	8004720 <_printf_i+0x23c>
 80046f8:	68e0      	ldr	r0, [r4, #12]
 80046fa:	9b03      	ldr	r3, [sp, #12]
 80046fc:	4298      	cmp	r0, r3
 80046fe:	bfb8      	it	lt
 8004700:	4618      	movlt	r0, r3
 8004702:	e7a4      	b.n	800464e <_printf_i+0x16a>
 8004704:	2301      	movs	r3, #1
 8004706:	4632      	mov	r2, r6
 8004708:	4649      	mov	r1, r9
 800470a:	4640      	mov	r0, r8
 800470c:	47d0      	blx	sl
 800470e:	3001      	adds	r0, #1
 8004710:	d09b      	beq.n	800464a <_printf_i+0x166>
 8004712:	3501      	adds	r5, #1
 8004714:	68e3      	ldr	r3, [r4, #12]
 8004716:	9903      	ldr	r1, [sp, #12]
 8004718:	1a5b      	subs	r3, r3, r1
 800471a:	42ab      	cmp	r3, r5
 800471c:	dcf2      	bgt.n	8004704 <_printf_i+0x220>
 800471e:	e7eb      	b.n	80046f8 <_printf_i+0x214>
 8004720:	2500      	movs	r5, #0
 8004722:	f104 0619 	add.w	r6, r4, #25
 8004726:	e7f5      	b.n	8004714 <_printf_i+0x230>
 8004728:	08004a27 	.word	0x08004a27
 800472c:	08004a38 	.word	0x08004a38

08004730 <memchr>:
 8004730:	4603      	mov	r3, r0
 8004732:	b510      	push	{r4, lr}
 8004734:	b2c9      	uxtb	r1, r1
 8004736:	4402      	add	r2, r0
 8004738:	4293      	cmp	r3, r2
 800473a:	4618      	mov	r0, r3
 800473c:	d101      	bne.n	8004742 <memchr+0x12>
 800473e:	2000      	movs	r0, #0
 8004740:	e003      	b.n	800474a <memchr+0x1a>
 8004742:	7804      	ldrb	r4, [r0, #0]
 8004744:	3301      	adds	r3, #1
 8004746:	428c      	cmp	r4, r1
 8004748:	d1f6      	bne.n	8004738 <memchr+0x8>
 800474a:	bd10      	pop	{r4, pc}

0800474c <memcpy>:
 800474c:	440a      	add	r2, r1
 800474e:	4291      	cmp	r1, r2
 8004750:	f100 33ff 	add.w	r3, r0, #4294967295
 8004754:	d100      	bne.n	8004758 <memcpy+0xc>
 8004756:	4770      	bx	lr
 8004758:	b510      	push	{r4, lr}
 800475a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800475e:	4291      	cmp	r1, r2
 8004760:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004764:	d1f9      	bne.n	800475a <memcpy+0xe>
 8004766:	bd10      	pop	{r4, pc}

08004768 <memmove>:
 8004768:	4288      	cmp	r0, r1
 800476a:	b510      	push	{r4, lr}
 800476c:	eb01 0402 	add.w	r4, r1, r2
 8004770:	d902      	bls.n	8004778 <memmove+0x10>
 8004772:	4284      	cmp	r4, r0
 8004774:	4623      	mov	r3, r4
 8004776:	d807      	bhi.n	8004788 <memmove+0x20>
 8004778:	1e43      	subs	r3, r0, #1
 800477a:	42a1      	cmp	r1, r4
 800477c:	d008      	beq.n	8004790 <memmove+0x28>
 800477e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004782:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004786:	e7f8      	b.n	800477a <memmove+0x12>
 8004788:	4601      	mov	r1, r0
 800478a:	4402      	add	r2, r0
 800478c:	428a      	cmp	r2, r1
 800478e:	d100      	bne.n	8004792 <memmove+0x2a>
 8004790:	bd10      	pop	{r4, pc}
 8004792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800479a:	e7f7      	b.n	800478c <memmove+0x24>

0800479c <_free_r>:
 800479c:	b538      	push	{r3, r4, r5, lr}
 800479e:	4605      	mov	r5, r0
 80047a0:	2900      	cmp	r1, #0
 80047a2:	d043      	beq.n	800482c <_free_r+0x90>
 80047a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047a8:	1f0c      	subs	r4, r1, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	bfb8      	it	lt
 80047ae:	18e4      	addlt	r4, r4, r3
 80047b0:	f000 f8d0 	bl	8004954 <__malloc_lock>
 80047b4:	4a1e      	ldr	r2, [pc, #120]	; (8004830 <_free_r+0x94>)
 80047b6:	6813      	ldr	r3, [r2, #0]
 80047b8:	4610      	mov	r0, r2
 80047ba:	b933      	cbnz	r3, 80047ca <_free_r+0x2e>
 80047bc:	6063      	str	r3, [r4, #4]
 80047be:	6014      	str	r4, [r2, #0]
 80047c0:	4628      	mov	r0, r5
 80047c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047c6:	f000 b8cb 	b.w	8004960 <__malloc_unlock>
 80047ca:	42a3      	cmp	r3, r4
 80047cc:	d90a      	bls.n	80047e4 <_free_r+0x48>
 80047ce:	6821      	ldr	r1, [r4, #0]
 80047d0:	1862      	adds	r2, r4, r1
 80047d2:	4293      	cmp	r3, r2
 80047d4:	bf01      	itttt	eq
 80047d6:	681a      	ldreq	r2, [r3, #0]
 80047d8:	685b      	ldreq	r3, [r3, #4]
 80047da:	1852      	addeq	r2, r2, r1
 80047dc:	6022      	streq	r2, [r4, #0]
 80047de:	6063      	str	r3, [r4, #4]
 80047e0:	6004      	str	r4, [r0, #0]
 80047e2:	e7ed      	b.n	80047c0 <_free_r+0x24>
 80047e4:	461a      	mov	r2, r3
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	b10b      	cbz	r3, 80047ee <_free_r+0x52>
 80047ea:	42a3      	cmp	r3, r4
 80047ec:	d9fa      	bls.n	80047e4 <_free_r+0x48>
 80047ee:	6811      	ldr	r1, [r2, #0]
 80047f0:	1850      	adds	r0, r2, r1
 80047f2:	42a0      	cmp	r0, r4
 80047f4:	d10b      	bne.n	800480e <_free_r+0x72>
 80047f6:	6820      	ldr	r0, [r4, #0]
 80047f8:	4401      	add	r1, r0
 80047fa:	1850      	adds	r0, r2, r1
 80047fc:	4283      	cmp	r3, r0
 80047fe:	6011      	str	r1, [r2, #0]
 8004800:	d1de      	bne.n	80047c0 <_free_r+0x24>
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	4401      	add	r1, r0
 8004808:	6011      	str	r1, [r2, #0]
 800480a:	6053      	str	r3, [r2, #4]
 800480c:	e7d8      	b.n	80047c0 <_free_r+0x24>
 800480e:	d902      	bls.n	8004816 <_free_r+0x7a>
 8004810:	230c      	movs	r3, #12
 8004812:	602b      	str	r3, [r5, #0]
 8004814:	e7d4      	b.n	80047c0 <_free_r+0x24>
 8004816:	6820      	ldr	r0, [r4, #0]
 8004818:	1821      	adds	r1, r4, r0
 800481a:	428b      	cmp	r3, r1
 800481c:	bf01      	itttt	eq
 800481e:	6819      	ldreq	r1, [r3, #0]
 8004820:	685b      	ldreq	r3, [r3, #4]
 8004822:	1809      	addeq	r1, r1, r0
 8004824:	6021      	streq	r1, [r4, #0]
 8004826:	6063      	str	r3, [r4, #4]
 8004828:	6054      	str	r4, [r2, #4]
 800482a:	e7c9      	b.n	80047c0 <_free_r+0x24>
 800482c:	bd38      	pop	{r3, r4, r5, pc}
 800482e:	bf00      	nop
 8004830:	2000010c 	.word	0x2000010c

08004834 <_malloc_r>:
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	1ccd      	adds	r5, r1, #3
 8004838:	f025 0503 	bic.w	r5, r5, #3
 800483c:	3508      	adds	r5, #8
 800483e:	2d0c      	cmp	r5, #12
 8004840:	bf38      	it	cc
 8004842:	250c      	movcc	r5, #12
 8004844:	2d00      	cmp	r5, #0
 8004846:	4606      	mov	r6, r0
 8004848:	db01      	blt.n	800484e <_malloc_r+0x1a>
 800484a:	42a9      	cmp	r1, r5
 800484c:	d903      	bls.n	8004856 <_malloc_r+0x22>
 800484e:	230c      	movs	r3, #12
 8004850:	6033      	str	r3, [r6, #0]
 8004852:	2000      	movs	r0, #0
 8004854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004856:	f000 f87d 	bl	8004954 <__malloc_lock>
 800485a:	4921      	ldr	r1, [pc, #132]	; (80048e0 <_malloc_r+0xac>)
 800485c:	680a      	ldr	r2, [r1, #0]
 800485e:	4614      	mov	r4, r2
 8004860:	b99c      	cbnz	r4, 800488a <_malloc_r+0x56>
 8004862:	4f20      	ldr	r7, [pc, #128]	; (80048e4 <_malloc_r+0xb0>)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	b923      	cbnz	r3, 8004872 <_malloc_r+0x3e>
 8004868:	4621      	mov	r1, r4
 800486a:	4630      	mov	r0, r6
 800486c:	f000 f862 	bl	8004934 <_sbrk_r>
 8004870:	6038      	str	r0, [r7, #0]
 8004872:	4629      	mov	r1, r5
 8004874:	4630      	mov	r0, r6
 8004876:	f000 f85d 	bl	8004934 <_sbrk_r>
 800487a:	1c43      	adds	r3, r0, #1
 800487c:	d123      	bne.n	80048c6 <_malloc_r+0x92>
 800487e:	230c      	movs	r3, #12
 8004880:	4630      	mov	r0, r6
 8004882:	6033      	str	r3, [r6, #0]
 8004884:	f000 f86c 	bl	8004960 <__malloc_unlock>
 8004888:	e7e3      	b.n	8004852 <_malloc_r+0x1e>
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	1b5b      	subs	r3, r3, r5
 800488e:	d417      	bmi.n	80048c0 <_malloc_r+0x8c>
 8004890:	2b0b      	cmp	r3, #11
 8004892:	d903      	bls.n	800489c <_malloc_r+0x68>
 8004894:	6023      	str	r3, [r4, #0]
 8004896:	441c      	add	r4, r3
 8004898:	6025      	str	r5, [r4, #0]
 800489a:	e004      	b.n	80048a6 <_malloc_r+0x72>
 800489c:	6863      	ldr	r3, [r4, #4]
 800489e:	42a2      	cmp	r2, r4
 80048a0:	bf0c      	ite	eq
 80048a2:	600b      	streq	r3, [r1, #0]
 80048a4:	6053      	strne	r3, [r2, #4]
 80048a6:	4630      	mov	r0, r6
 80048a8:	f000 f85a 	bl	8004960 <__malloc_unlock>
 80048ac:	f104 000b 	add.w	r0, r4, #11
 80048b0:	1d23      	adds	r3, r4, #4
 80048b2:	f020 0007 	bic.w	r0, r0, #7
 80048b6:	1ac2      	subs	r2, r0, r3
 80048b8:	d0cc      	beq.n	8004854 <_malloc_r+0x20>
 80048ba:	1a1b      	subs	r3, r3, r0
 80048bc:	50a3      	str	r3, [r4, r2]
 80048be:	e7c9      	b.n	8004854 <_malloc_r+0x20>
 80048c0:	4622      	mov	r2, r4
 80048c2:	6864      	ldr	r4, [r4, #4]
 80048c4:	e7cc      	b.n	8004860 <_malloc_r+0x2c>
 80048c6:	1cc4      	adds	r4, r0, #3
 80048c8:	f024 0403 	bic.w	r4, r4, #3
 80048cc:	42a0      	cmp	r0, r4
 80048ce:	d0e3      	beq.n	8004898 <_malloc_r+0x64>
 80048d0:	1a21      	subs	r1, r4, r0
 80048d2:	4630      	mov	r0, r6
 80048d4:	f000 f82e 	bl	8004934 <_sbrk_r>
 80048d8:	3001      	adds	r0, #1
 80048da:	d1dd      	bne.n	8004898 <_malloc_r+0x64>
 80048dc:	e7cf      	b.n	800487e <_malloc_r+0x4a>
 80048de:	bf00      	nop
 80048e0:	2000010c 	.word	0x2000010c
 80048e4:	20000110 	.word	0x20000110

080048e8 <_realloc_r>:
 80048e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ea:	4607      	mov	r7, r0
 80048ec:	4614      	mov	r4, r2
 80048ee:	460e      	mov	r6, r1
 80048f0:	b921      	cbnz	r1, 80048fc <_realloc_r+0x14>
 80048f2:	4611      	mov	r1, r2
 80048f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048f8:	f7ff bf9c 	b.w	8004834 <_malloc_r>
 80048fc:	b922      	cbnz	r2, 8004908 <_realloc_r+0x20>
 80048fe:	f7ff ff4d 	bl	800479c <_free_r>
 8004902:	4625      	mov	r5, r4
 8004904:	4628      	mov	r0, r5
 8004906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004908:	f000 f830 	bl	800496c <_malloc_usable_size_r>
 800490c:	42a0      	cmp	r0, r4
 800490e:	d20f      	bcs.n	8004930 <_realloc_r+0x48>
 8004910:	4621      	mov	r1, r4
 8004912:	4638      	mov	r0, r7
 8004914:	f7ff ff8e 	bl	8004834 <_malloc_r>
 8004918:	4605      	mov	r5, r0
 800491a:	2800      	cmp	r0, #0
 800491c:	d0f2      	beq.n	8004904 <_realloc_r+0x1c>
 800491e:	4631      	mov	r1, r6
 8004920:	4622      	mov	r2, r4
 8004922:	f7ff ff13 	bl	800474c <memcpy>
 8004926:	4631      	mov	r1, r6
 8004928:	4638      	mov	r0, r7
 800492a:	f7ff ff37 	bl	800479c <_free_r>
 800492e:	e7e9      	b.n	8004904 <_realloc_r+0x1c>
 8004930:	4635      	mov	r5, r6
 8004932:	e7e7      	b.n	8004904 <_realloc_r+0x1c>

08004934 <_sbrk_r>:
 8004934:	b538      	push	{r3, r4, r5, lr}
 8004936:	2300      	movs	r3, #0
 8004938:	4d05      	ldr	r5, [pc, #20]	; (8004950 <_sbrk_r+0x1c>)
 800493a:	4604      	mov	r4, r0
 800493c:	4608      	mov	r0, r1
 800493e:	602b      	str	r3, [r5, #0]
 8004940:	f7fd fa7c 	bl	8001e3c <_sbrk>
 8004944:	1c43      	adds	r3, r0, #1
 8004946:	d102      	bne.n	800494e <_sbrk_r+0x1a>
 8004948:	682b      	ldr	r3, [r5, #0]
 800494a:	b103      	cbz	r3, 800494e <_sbrk_r+0x1a>
 800494c:	6023      	str	r3, [r4, #0]
 800494e:	bd38      	pop	{r3, r4, r5, pc}
 8004950:	2000051c 	.word	0x2000051c

08004954 <__malloc_lock>:
 8004954:	4801      	ldr	r0, [pc, #4]	; (800495c <__malloc_lock+0x8>)
 8004956:	f000 b811 	b.w	800497c <__retarget_lock_acquire_recursive>
 800495a:	bf00      	nop
 800495c:	20000524 	.word	0x20000524

08004960 <__malloc_unlock>:
 8004960:	4801      	ldr	r0, [pc, #4]	; (8004968 <__malloc_unlock+0x8>)
 8004962:	f000 b80c 	b.w	800497e <__retarget_lock_release_recursive>
 8004966:	bf00      	nop
 8004968:	20000524 	.word	0x20000524

0800496c <_malloc_usable_size_r>:
 800496c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004970:	1f18      	subs	r0, r3, #4
 8004972:	2b00      	cmp	r3, #0
 8004974:	bfbc      	itt	lt
 8004976:	580b      	ldrlt	r3, [r1, r0]
 8004978:	18c0      	addlt	r0, r0, r3
 800497a:	4770      	bx	lr

0800497c <__retarget_lock_acquire_recursive>:
 800497c:	4770      	bx	lr

0800497e <__retarget_lock_release_recursive>:
 800497e:	4770      	bx	lr

08004980 <_init>:
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	bf00      	nop
 8004984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004986:	bc08      	pop	{r3}
 8004988:	469e      	mov	lr, r3
 800498a:	4770      	bx	lr

0800498c <_fini>:
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	bf00      	nop
 8004990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004992:	bc08      	pop	{r3}
 8004994:	469e      	mov	lr, r3
 8004996:	4770      	bx	lr
